swagger: '2.0'
info:
  title: sevDesk
  description: "# Getting started\r\nThe sevDesk API v1 uses a token authentication.\r\n\r\nYou need to click on the authorization button (lock symbol) and enter your api-key there.\r\n\r\nThe token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).\r\n\r\nsettings-->user-->specific user\r\n\r\n# General information\r\n\r\nThe sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.\r\n\r\nEvery time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.\r\n\r\nHave a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.\r\n\r\n# URL\r\n\r\nThe basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)\r\n\r\n# Basic Operations\r\n\r\nAccess a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)\r\n\r\nAccess a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})\r\n\r\nThe **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.\r\n\r\nCall a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})\r\n\r\nEach operation can be used with different HTTP methods:\r\n* GET - read data\r\n* POST - create data\r\n* PUT - update existing data\r\n* DELETE - delete data\r\n\r\n# Useful Parameters\r\n\r\nFor each request, there are some specific parameters.\r\n\r\n**GET Query Parameters**\r\n* **limit** - limits the number of entries returned\r\n* **offset** - set the index where the returned entries should start\r\n* **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**\r\n\r\n`[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`\r\n\r\n* If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**\r\n\r\n`[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`\r\n\r\n* Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.\r\n\r\n`[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`\r\n\r\n* Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name\r\n\r\n`[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`\r\n\r\n* **countAll** If countAll is set to 1 the total number of entries will be returned additionally\r\n* **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement\r\n\r\n`json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`\r\n\r\n`url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`"
  version: 1.0.0
host: my.sevdesk.de
basePath: /api/v1
schemes:
  - https
paths:
  /AccountingChart:
    get:
      tags:
        - AccountingChart
      summary: Get an overview of all accounting charts
      description: Calls AccountingChart.php to get necessary variables.
      operationId: getAccountingChart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting charts start. Default is
            0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingChart'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingChart
      summary: Create a new accounting chart
      description: Calls AccountingChart.php to add an accounting chart
      operationId: addAccountingChart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting chart, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: name=
          x-example: name=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingChart'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingChart/{id}':
    put:
      tags:
        - AccountingChart
      summary: Update an existing accounting chart
      description: Calls AccountingChart.php to update an accounting chart
      operationId: updateAccountingChart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting chart you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingChart'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingChart
      summary: Delete an existing accounting chart
      description: Calls AccountingChart.php to delete an accounting chart
      operationId: deleteAccountingChart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the accounting chart you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingContact:
    get:
      tags:
        - AccountingContact
      summary: Get an overview of all accounting contacts
      description: Calls AccountingContact.php to get necessary variables.
      operationId: getAccountingContacts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned discounts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingContact'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingContact
      summary: Create a new accounting contact
      description: 'Calls AccountingContact.php '
      operationId: addAccountingContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting contact, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              contact[id]=&contact[objectName]=Contact&debitorNumber=&creditorNumber=
          x-example: >-
            contact[id]=&contact[objectName]=Contact&debitorNumber=&creditorNumber=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingContact'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingContact/{id}':
    put:
      tags:
        - AccountingContact
      summary: Update an existing accounting contact
      description: Calls AccountingContact.php
      operationId: updateAccountingContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create accounting contact.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingContact'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingContact
      summary: Delete an existing accounting contact
      description: Calls the delete() function in AccountingContact.php
      operationId: deleteAccountingContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting contact you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingContact/isAvailableDebitorCreditorNumber:
    get:
      tags:
        - AccountingContact
      summary: Return if a debitor / creditor number is available
      description: >-
        Calls isAvailableDebitorCreditorNumber() in AccountingContact.php to get
        if the debitor / creditor number is available.
      operationId: AccountingContactIsAvailableDebitorCreditorNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: 'contact[id]'
          in: query
          description: >-
            If you want to exclude a contact from getting checked you can
            provide its id here
          required: false
          type: integer
          default: null
        - name: 'contact[objectName]'
          in: query
          description: Contact object name
          required: false
          type: string
          default: Contact
        - name: debitorNumber
          in: query
          description: debitor number of which you want to know if it is available
          required: false
          type: string
          default: null
        - name: creditorNumber
          in: query
          description: creditor number of which you want to know if it is available
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingCorrection:
    get:
      tags:
        - AccountingCorrection
      summary: Get an overview of all accounting corrections
      description: Calls AccountingCorrection.php to get necessary variables.
      operationId: getAccountingCorrections
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting corrections start.
            Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingCorrection'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingCorrection
      summary: Create a new accounting correction
      description: Calls AccountingCorrection.php to add an accounting correction
      operationId: addAccountingCorrection
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting correction, simply enter desired values
            after parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              object[id]=&object[objectName]=&accountingType[id]=&accountingType[objectName]=AccountingType&ammount=
          x-example: >-
            object[id]=&object[objectName]=&accountingType[id]=&accountingType[objectName]=AccountingType&ammount=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingCorrection'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingCorrection/{id}':
    put:
      tags:
        - AccountingCorrection
      summary: Update an existing accounting correction
      description: Calls AccountingCorrection.php to update an accounting correction
      operationId: updateAccountingCorrection
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting correction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingCorrection'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingCorrection
      summary: Delete an existing accounting correction
      description: Calls AccountingCorrection.php to delete an accounting correction
      operationId: deleteAccountingCorrection
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the accounting correction you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingIndex:
    get:
      tags:
        - AccountingIndex
      summary: Get an overview of all accounting indexes
      description: Calls AccountingIndex.php to get necessary variables.
      operationId: getAccountingIndexes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting indexes start. Default
            is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingIndex'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingIndex
      summary: Create a new accounting index
      description: Calls AccountingIndex.php to add an accounting index
      operationId: addAccountingIndex
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting index, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              keyword=&accountingType[id]=&accountingType[objectName]=AccountingType&taxType=default
          x-example: >-
            keyword=&accountingType[id]=&accountingType[objectName]=AccountingType&taxType=default
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingIndex'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingIndex/{id}':
    put:
      tags:
        - AccountingIndex
      summary: Update an existing accounting index
      description: Calls AccountingIndex.php to update an accounting index
      operationId: updateAccountingIndex
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting index you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingIndex'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingIndex
      summary: Delete an existing accounting index
      description: Calls AccountingIndex.php to delete an accounting index
      operationId: deleteAccountingIndex
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the accounting index you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingSystem:
    get:
      tags:
        - AccountingSystem
      summary: Get an overview of all accounting systems
      description: Calls AccountingSystem.php to get necessary variables.
      operationId: getAccountingSystems
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting systems start. Default
            is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingSystem'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingSystemNumber:
    get:
      tags:
        - AccountingSystemNumber
      summary: Get an overview of all accounting system numbers
      description: Calls AccountingSystemNumber.php to get necessary variables.
      operationId: getAccountingSystemNumbers
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 1000
          required: false
          type: integer
          default: 1000
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting system numbers start.
            Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingSystemNumber'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingSystemNumber
      summary: Create a new accounting system number
      description: 'Calls AccountingSystemNumber.php '
      operationId: addAccountingSystemNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting system number, simply enter desired values
            after parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              number=&accountingType[id]=&accountingType[objectName]=AccountingType&accountingSystem[id]=1&accountingSystem[objectName]=AccountingSystem&objectName=AccountingSystemNumber 
              &id=&accountingSystemNumber=undefined
          x-example: >-
            number=&accountingType[id]=&accountingType[objectName]=AccountingType&accountingSystem[id]=1&accountingSystem[objectName]=AccountingSystem&objectName=AccountingSystemNumber 
            &id=&accountingSystemNumber=undefined
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingSystemNumber'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingSystemNumber/{id}':
    put:
      tags:
        - AccountingSystemNumber
      summary: Update an existing accounting system number
      description: Calls AccountingSystemNumber.php
      operationId: updateAccountingSystemNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting system number you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create accounting system number.\r\n\r\nAppend the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema:
            example: ''
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingSystemNumber
      summary: Delete an existing accounting system number
      description: Calls the delete() function in AccountingSystemNumber.php
      operationId: deleteAccountingSystemNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting system number you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingType:
    get:
      tags:
        - AccountingType
      summary: Get an overview of all accounting types
      description: Calls AccountingType.php to get necessary variables.
      operationId: getAccountingTypes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 1000
          required: false
          type: integer
          default: 1000
        - name: offset
          in: query
          description: >-
            Set the index where the returned accounting types start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AccountingType
      summary: Create a new accounting type
      description: 'Calls AccountingType.php '
      operationId: addAccountingType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting type, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              parent[id]=&parent[objectName]=AccountingType&name=&type=&assetType=N&status=100
          x-example: >-
            parent[id]=&parent[objectName]=AccountingType&name=&type=&assetType=N&status=100
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingType/{id}':
    put:
      tags:
        - AccountingType
      summary: Update an existing accounting type
      description: Calls AccountingType.php
      operationId: updateAccountingType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting type you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create accounting type.\r\n\r\nAppend the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema:
            example: objectName=AccountingType
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AccountingType
      summary: Delete an existing accounting type
      description: Calls the delete() function in AccountingType.php
      operationId: deleteAccountingType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of accounting type you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingType/{id}/getAccountingSystemNumber':
    get:
      tags:
        - AccountingType
      summary: Get accounting system number of the specified accounting type
      description: >-
        Calls getAccountingSystemNumber() in AccountingType.php to get the
        accounting system number of the specified accounting type.
      operationId: AccountingTypeGetAccountingSystemNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the accounting type for which you want to get the accounting
            system number
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingSystemNumber'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingType/{id}/getAccountingNumber':
    get:
      tags:
        - AccountingType
      summary: Get accounting system number of the specified accounting type
      description: "Calls getAccountingNumber() in AccountingType.php to get the accounting system number of the specified accounting type.\r\n\r\nBasically this function does just calls getAccountingSystemNumber() and returns just the number, not the model."
      operationId: AccountingTypeGetAccountingNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the accounting type for which you want to get the accounting
            system number
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AccountingType/{id}/getAccountingNumberDepreciation':
    get:
      tags:
        - AccountingType
      summary: >-
        Get accounting system number depreciation of the specified accounting
        type
      description: "Calls getAccountingNumberDepreciation() in AccountingType.php to get the accounting system number depreciation of the specified accounting type.\r\n\r\nBasically this function does just calls getAccountingSystemNumber() and returns just the depreciation, not the model."
      operationId: AccountingTypeGetAccountingNumberDepreciation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the accounting type for which you want to get the accounting
            system number depreciation
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AccountingType/Factory/createType:
    post:
      tags:
        - AccountingType
      summary: Create a new accounting type
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the Model.php itself still constructs the model however new instances of the model are created trough the factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='"
      operationId: addAccountingTypeFactory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an accounting type, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: name=&type=&number=&assetType=N&numberDepreciation=&automatic=
          x-example: name=&type=&number=&assetType=N&numberDepreciation=&automatic=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getWebRevenueChartData:
    get:
      tags:
        - Aggregator
      summary: Get the data which is displayed in the chart on the dashboard
      description: >-
        Calls getWebRevenueChartData() in Aggregator.php to get data displayed
        in the revenue chart on the dashboard
      operationId: AggregatorGetWebRevenueChartData
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: sumGrossToggle
          in: query
          description: Specify if you want to calculate sum gross instead of net
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getAppRevenueChartData:
    get:
      tags:
        - Aggregator
      summary: Get the data which is displayed in the chart on the dashboard in the app
      description: >-
        Calls getAppRevenueChartData() in Aggregator.php to get data displayed
        in the revenue chart on the dashboard in the app
      operationId: AggregatorGetAppRevenueChartData
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getProfitAndLossCalculation:
    get:
      tags:
        - Aggregator
      summary: Calculates the profit and loss over a specified period
      description: "Calls getProfitAndLossCalculation() in Aggregator.php to calculate the profit and loss over a specified period.\r\n\r\nThe output of this function is divided into six groups:\r\n* costs - all invoices/vouchers which contain a spending, again separated into direct [dc] and indirect costs [ic]\r\n* earnings - all invoices/vouchers which contain a earning\r\n* totalcosts\r\n* totalearnings\r\n* totalrevenue\r\n* profit - the profit, difference between costs and earnings"
      operationId: AggregatorGetProfitAndLossCalculation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: startDate
          in: query
          description: Start date of the period you want to calculate
          required: true
          type: string
          default: null
        - name: endDate
          in: query
          description: End date of the period you want to calculate
          required: true
          type: string
          default: null
        - name: actualTaxation
          in: query
          description: >-
            Specify if you want to calculate the net income method (true) or the
            profit and loss (false)
          required: true
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getTaxInformation:
    get:
      tags:
        - Aggregator
      summary: Calculates tax of earnings and spending over a specified period
      description: "Calls getTaxInformation() in Aggregator.php to calculate tax of earnings and spending over a specified period.\r\n\r\nThis function will return:\r\n* earningsSum (gross earnings), earningsSumNet (net earnings)\r\n* earningsTax - tax on earnings\r\n* expensesSum (gross expenses), expensesSumNet (net expenses)\r\n* expensesTax - tax on expenses\r\n* earningsTaxGroups - list of invoices/vouchers which involved a taxation, separated into tax groups\r\n* expensesTaxGroups - list of invoices/vouchers which involved a taxation, separated into tax groups\r\n* remainingTaxPayable - tax which is yet to be payed"
      operationId: AggregatorGetTaxInformation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: type
          in: query
          description: Tax period you want to calculate with
          required: true
          type: string
          default: monthly
          enum:
            - monthly
            - quarterly
            - semiannual
        - name: year
          in: query
          description: Year of your tax calculation
          required: true
          type: string
          default: null
        - name: period
          in: query
          description: Starting period (month) of your tax calculation
          required: true
          type: integer
          default: null
        - name: actualTaxation
          in: query
          description: >-
            Specify if you want to calculate the net income method (true) or the
            profit and loss (false)
          required: true
          type: boolean
          default: false
        - name: noActualTaxationOnInputTax
          in: query
          description: Specify if you want no actual taxation on input tax
          required: true
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/calcTotalDepreciation:
    get:
      tags:
        - Aggregator
      summary: >-
        Calculates total sum of all asset amounts for the year of the current
        query
      description: >-
        Calls calcTotalDepreciation() in Aggregator.php to get total sum of all
        asset amounts for the year of the current query
      operationId: AggregatorCalcTotalDepreciation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getVoucherCategoryInformation:
    get:
      tags:
        - Aggregator
      summary: >-
        Get information about the categories of all vouchers in the year of the
        current query
      description: >-
        Calls getVoucherCategoryInformation() in Aggregator.php to get
        information about the categories of all vouchers in the year of the
        current query
      operationId: AggregatorGetVoucherCategoryInformation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getVoucherChartData:
    get:
      tags:
        - Aggregator
      summary: Get voucher chart data
      description: Calls getVoucherChartData() in Aggregator.php to get voucher chart data
      operationId: AggregatorGetVoucherChartData
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: year
          in: query
          description: Year for which you want to get the voucher chart data
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Aggregator/getAccountingScore:
    get:
      tags:
        - Aggregator
      summary: Get accounting score
      description: >-
        Calls getAccountingScore() in Aggregator.php to get your accounting
        score
      operationId: AggregatorGetAccountingScore
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: startdate
          in: query
          description: Start date for the accounting score calculation
          required: false
          type: string
          default: null
        - name: enddate
          in: query
          description: End date for the accounting score calculation
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Asset:
    get:
      tags:
        - Asset
      summary: Get an overview of all assets
      description: Calls Asset.php to get necessary variables.
      operationId: getAssets
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned assets start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Asset'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Asset
      summary: Create a new asset
      description: 'Calls Asset.php '
      operationId: addAsset
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an asset, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: >-
              voucherPos[id]=&voucherPos[objectName]=VoucherPos&name=&usefulLife=&acquisitionDate=&purchasePrice=&taxRate=19&accountingType[id]=&accountingType[objectName]=AccountingType
          x-example: >-
            voucherPos[id]=&voucherPos[objectName]=VoucherPos&name=&usefulLife=&acquisitionDate=&purchasePrice=&taxRate=19&accountingType[id]=&accountingType[objectName]=AccountingType
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Asset'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Asset/{id}':
    put:
      tags:
        - Asset
      summary: Update an existing asset
      description: Calls Asset.php
      operationId: updateAsset
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of asset you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create asset.\r\n\r\nAppend the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema:
            example: ''
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Asset'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Asset
      summary: Delete an existing asset
      description: Calls the delete() function in Asset.php
      operationId: deleteAsset
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of asset you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Asset/{id}/getVoucher':
    get:
      tags:
        - Asset
      summary: Get voucher of the specified asset
      description: >-
        Calls getVoucher() in Asset.php to get the voucher of the specified
        asset
      operationId: AssetGetVoucher
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the asset of which you want to get the voucher
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Asset/{id}/getDepreciationAmount':
    get:
      tags:
        - Asset
      summary: Get depreciation amount of the specified asset for the given year/month
      description: >-
        Calls getDepreciationAmount() in Asset.php to get the depreciation
        ammount of the specified asset for the given year/month
      operationId: AssetGetDepreciationAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the asset of which you want to get the depreciation amount
          required: true
          type: integer
          default: null
        - name: year
          in: query
          description: year for which you want to get the depreciation amount
          required: false
          type: string
          default: null
        - name: month
          in: query
          description: month for which you want to get the depreciation amount
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Asset/{id}/getResidualValue':
    get:
      tags:
        - Asset
      summary: Get residual value of the specified asset for the given year/month
      description: >-
        Calls getResidualValue() in Asset.php to get the residual value of the
        specified asset for the given year/month
      operationId: AssetGetResidualValue
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the asset of which you want to get the residual value
          required: true
          type: integer
          default: null
        - name: year
          in: query
          description: year for which you want to get the residual value
          required: false
          type: string
          default: null
        - name: month
          in: query
          description: month for which you want to get the residual value
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /AssetPos:
    get:
      tags:
        - AssetPos
      summary: Get an overview of all asset positions
      description: Calls AssetPos.php to get necessary variables.
      operationId: getAssetPositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned assets start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AssetPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - AssetPos
      summary: Create a new asset position
      description: 'Calls AssetPos.php '
      operationId: addAssetPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an asset position, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              asset[id]=&asset[objectName]=Asset&year=&month=&depreciationAmount=&residualValue=
          x-example: >-
            asset[id]=&asset[objectName]=Asset&year=&month=&depreciationAmount=&residualValue=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_AssetPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/AssetPos/{id}':
    put:
      tags:
        - AssetPos
      summary: Update an existing asset position
      description: Calls AssetPos.php
      operationId: updateAssetPosition
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of asset position you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create asset position.\r\n\r\nAppend the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema:
            example: ''
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AssetPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - AssetPos
      summary: Delete an existing asset position
      description: Calls the delete() function in AssetPos.php
      operationId: deleteAssetPosition
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of asset position you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Category:
    get:
      tags:
        - Category
      summary: Get an overview of all categories
      description: Calls Category.php to get necessary variables.
      operationId: getCategories
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned categories start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Category'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Category
      summary: Create a new category
      description: 'Calls Category.php '
      operationId: addCategory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a category, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: name=&objectType=&priority=100
          x-example: name=&objectType=&priority=100
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Category'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Category/{id}':
    put:
      tags:
        - Category
      summary: Update a existing category
      description: Calls Category.php
      operationId: updateCategory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of category you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create discount.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Category'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Category
      summary: Delete an existing category
      description: Calls the delete() function in Category.php
      operationId: deleteCategory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of category you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CheckAccount:
    get:
      tags:
        - CheckAccount
      summary: Get an overview of all check accounts
      description: Calls CheckAccount.php to get necessary variables.
      operationId: getCheckAccounts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned check accounts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - CheckAccount
      summary: Create a new check account
      description: Calls CheckAccount.php to create a check account
      operationId: addCheckAccount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a check account, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: name=&type=&currency=&status=
          x-example: name=&type=&currency=&status=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CheckAccount'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}':
    put:
      tags:
        - CheckAccount
      summary: Update an existing check account
      description: Calls CheckAccount.php to update a check account
      operationId: updateCheckAccount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of check account you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create discount.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccount'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - CheckAccount
      summary: Delete an existing check account
      description: Calls the delete() function in CheckAccount.php
      operationId: deleteCheckAccount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of check account you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/getNewTransactions':
    get:
      tags:
        - CheckAccount
      summary: Get new transactions from figo
      description: >-
        Calls getNewTransactions() in CheckAccount.php to check if there are any
        transactions in figo that are not in the db and import them.
      operationId: CheckAccountGetNewTransactions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the check account you want to use
          required: true
          type: integer
          default: null
        - name: fromDate
          in: query
          description: Start date of period you want to check on
          required: true
          type: string
          default: null
        - name: toDate
          in: query
          description: End date of period you want to check on
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/getSupportedTanSchemes':
    get:
      tags:
        - CheckAccount
      summary: Get supported tan schemes of figo
      description: >-
        Calls getSupportedTanSchemes() in CheckAccount.php to get the supported
        tan schemes of figo.
      operationId: CheckAccountGetSupportedTanSchemes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the check account you want to use. Must be a figo check
            account!
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/getCheckAccountDetails':
    get:
      tags:
        - CheckAccount
      summary: Get check account details of figo check account
      description: >-
        Calls getCheckAccountDetails() in CheckAccount.php to get the details of
        the figo check account.
      operationId: CheckAccountGetCheckAccountDetails
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the check account you want to use. Must be a figo check
            account!
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/getIbanBic':
    get:
      tags:
        - CheckAccount
      summary: Get iban and bic of figo check account
      description: >-
        Calls getIbanBic() in CheckAccount.php to get the iban and bic of the
        figo check account.
      operationId: CheckAccountGetIbanBic
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the check account you want to use. Must be a figo check
            account!
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/setDefault':
    put:
      tags:
        - CheckAccount
      summary: Set the specified check accounts as the default check account
      description: >-
        Calls setDefault() in CheckAccount.php to set a specified check account
        as the default check account
      operationId: CheckAccountSetDefault
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of check account you want to set as the default check account
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/transfer':
    put:
      tags:
        - CheckAccount
      summary: Transfer an amount from one check account to another
      description: >-
        Calls transfer() in CheckAccount.php to transfer an amount from one
        check account to another
      operationId: CheckAccountTransfer
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of check account you want to use as source account
          required: true
          type: integer
          default: null
        - name: amount
          in: query
          description: Amount you want to transfer
          required: true
          type: string
          default: null
        - name: 'target[id]'
          in: query
          description: Target check account id
          required: true
          type: integer
          default: null
        - name: 'target[objectName]'
          in: query
          description: Target check account object name
          required: true
          type: string
          default: CheckAccount
        - name: date
          in: query
          description: Date of the transfer
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccount/{id}/getCurrentBalance':
    get:
      tags:
        - CheckAccount
      summary: Get current balance of the specified check account
      description: >-
        Calls getCurrentBalance() in CheckAccount.php to get the balance of the
        specified check account.
      operationId: CheckAccountGetCurrentBalance
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the check account of which you want the current balance
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CheckAccount/getSupportedBankServices:
    get:
      tags:
        - CheckAccount
      summary: Get supported bank services of figo
      description: >-
        Calls getSupportedBankServices() in CheckAccount.php to get the bank
        services figo supports.
      operationId: CheckAccountGetSupportedBankServices
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CheckAccount/getPaymentIsSupported:
    get:
      tags:
        - CheckAccount
      summary: Return if a payment method is supported
      description: >-
        Calls getPaymentIsSupported() in CheckAccount.php to get if a payment
        method is supported.
      operationId: CheckAccountGetPaymentIsSupported
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CheckAccountTransaction:
    get:
      tags:
        - CheckAccountTransaction
      summary: Get an overview of all check account transactions
      description: Calls CheckAccountTransaction.php to get necessary variables.
      operationId: getCheckAccountTransactions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned check account transactions start.
            Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - CheckAccountTransaction
      summary: Create a new check account transaction
      description: 'Calls CheckAccountTransaction.php '
      operationId: addCheckAccountTransaction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a check account transaction , simply enter desired values
            after parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              valueDate=&amount=&paymtPurpose=&checkAccount[id]=&checkAccount[objectName]=CheckAccount
          x-example: >-
            valueDate=&amount=&paymtPurpose=&checkAccount[id]=&checkAccount[objectName]=CheckAccount
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}':
    put:
      tags:
        - CheckAccountTransaction
      summary: Update a existing check account transaction
      description: Calls CheckAccountTransaction.php
      operationId: updateCheckAccountTransaction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of check account transaction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create check account transaction.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - CheckAccountTransaction
      summary: Delete an existing check account transaction
      description: Calls the delete() function in CheckAccountTransaction.php
      operationId: deleteCheckAccountTransaction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of check account transaction you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}/getLog':
    get:
      tags:
        - CheckAccountTransaction
      summary: Get log of a specified check account transaction
      description: >-
        Calls getLog() in CheckAccountTransaction.php to get the log of a
        specified check account transaction.
      operationId: CheckAccountTransactionGetLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the check account transaction of which you want to get the log
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransactionLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}/changeStatus':
    put:
      tags:
        - CheckAccountTransaction
      summary: Update status of a existing check account transaction
      description: Calls changeStatus() in CheckAccountTransaction.php
      operationId: updateCheckAccountTransactionStatus
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of check account transaction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter your desired status after value= and remove the quotation
            marks
          schema:
            example: value=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}/linkInvoice':
    put:
      tags:
        - CheckAccountTransaction
      summary: link invoice to check account transaction
      description: "Calls linkInvoice() in CheckAccountTransaction.php.\r\n    This will update the specified invoice as well as the status of the check account transaction!"
      operationId: linkInvoiceToCheckAccountTransaction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of check account transaction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter the id of the invoice you want to be linked after invoiceId=
            and remove the quotation marks.
          schema:
            example: invoiceId=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}/linkVoucher':
    put:
      tags:
        - CheckAccountTransaction
      summary: link voucher to check account transaction
      description: "Calls linkVoucher() in CheckAccountTransaction.php.\r\n    This will update the specified voucher as well as the status of the check account transaction!"
      operationId: linkVoucherToCheckAccountTransaction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of check account transaction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter the id of the voucher you want to be linked after voucherId=
            and remove the quotation marks.
          schema:
            example: voucherId=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransaction/{id}/getRemainingAmount':
    get:
      tags:
        - CheckAccountTransaction
      summary: Get invoice amount which is not assigned yet
      description: >-
        Calls getRemainingAmount() in CheckAccountTransaction.php to get invoice
        amount which is not assigned yet.
      operationId: CheckAccountTransactionGetRemainingAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of check account transaction you want to use
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CheckAccountTransactionLog:
    get:
      tags:
        - CheckAccountTransactionLog
      summary: Get an overview of all check account transactions which were logged
      description: Calls CheckAccountTransactionLog.php to get necessary variables.
      operationId: getCheckAccountTransactionLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned logged check account transactions
            start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransactionLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - CheckAccountTransactionLog
      summary: Create a new logged check account transaction
      description: 'Calls CheckAccountTransactionLog.php '
      operationId: addCheckAccountTransactionLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a logged check account transaction , simply enter desired
            values after parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              checkAccountTransaction[id]=&checkAccountTransaction[objectName]=CheckAccountTransaction&fromStatus=&toStatus=&bookingDate=
          x-example: >-
            checkAccountTransaction[id]=&checkAccountTransaction[objectName]=CheckAccountTransaction&fromStatus=&toStatus=&bookingDate=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CheckAccountTransactionLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CheckAccountTransactionLog/{id}':
    put:
      tags:
        - CheckAccountTransactionLog
      summary: Update a existing logged check account transaction
      description: Calls CheckAccountTransactionLog.php
      operationId: updateCheckAccountTransactionLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of logged check account transaction you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create check account transaction log.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransactionLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - CheckAccountTransactionLog
      summary: Delete an existing logged check account transaction
      description: Calls the delete() function in CheckAccountTransactionLog.php
      operationId: deleteCheckAccountTransactionLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of logged check account transaction you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CommunicationWay:
    get:
      tags:
        - CommunicationWay
      summary: Get an overview of all communication ways
      description: Calls CommunicationWay.php to get necessary variables.
      operationId: getCommunicationWays
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned communication ways start. Default
            is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - CommunicationWay
      summary: Create a new communication way
      description: 'Calls CommunicationWay.php '
      operationId: addCommunicationWay
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a communication way , simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: 'type=&value=&key[id]=&key[objectName]=CommunicationWayKey'
          x-example: 'type=&value=&key[id]=&key[objectName]=CommunicationWayKey'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CommunicationWay/{id}':
    put:
      tags:
        - CommunicationWay
      summary: Update a existing communication way
      description: Calls CommunicationWay.php
      operationId: updateCommunicationWay
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of communication way you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create communication way.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - CommunicationWay
      summary: Delete an existing communication way
      description: Calls CommunicationWay.php
      operationId: deleteCommunicationWay
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of communication way you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CommunicationWayKey:
    get:
      tags:
        - CommunicationWayKey
      summary: Get an overview of all communication way keys
      description: Calls CommunicationWayKey.php to get necessary variables.
      operationId: getCommunicationWayKeys
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned communication way keys start.
            Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWayKey'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Contact:
    get:
      tags:
        - Contact
      summary: Get an overview of all contacts
      description: Calls Contact.php to get necessary variables
      operationId: getContacts
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: depth
          in: query
          description: >-
            If depth is set 1 companies and persons will be shown, otherwise
            only the companies will be shown. Default: 0
          required: false
          type: integer
          default: 0
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned contacts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Contact'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Contact
      summary: Create a new contact of type person or company
      description: "Creating a new contact of type person/company calls a shared path with the same http-verb.\r\nHowever, both types require certain parameters which will indicate that their type of contact should be created.\r\nSo, using **familyname** or **name** in front of 'category' will define if either a person or a company is created"
      operationId: addContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "Concatenate the following attributes with '&' to the example and put **familyname=yourFamilyName&** at the beginning to define the **person** you want to add and remove the quotation marks:\r\n* customerNumber\r\n* gender (m,w, empty)\r\n* academicTitle, titel\r\n* surename, name2\r\n* bankNumber, bankAccount, vatNumber\r\n* defaultCashbackTime, defaultCashbackPercent, defaultTimeToPay\r\n* description\r\n\r\nConcatenate the following attributes with '&' to the example and put **name=yourCompanyName&** at the beginning  to define the **company** you want to add and remove the quotation marks:\r\n* name2\r\n* bankNumber, bankAccount, vatNumber\r\n* defaultCashbackTime, defaultCashbackPercent, defaultTimeToPay\r\n* description"
          required: true
          schema:
            example: 'category[id]=3&category[objectName]=Category'
          x-example: 'category[id]=3&category[objectName]=Category'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Contact'
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}':
    put:
      tags:
        - Contact
      summary: Update an existing contact
      description: Calls Contact.php to update an existing contact
      operationId: updateContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please be aware not to update any parameters which don't belong to the type of contact you are updating\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Contact'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Contact
      summary: Delete an existing contact
      description: Calls the delete() function in Contact.php
      operationId: deleteContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of contact you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getCommunicationWays':
    get:
      tags:
        - Contact
      summary: Get the communication ways of a specified contact
      description: >-
        Calls getCommunicationWays() in Contact.php to get the communication
        ways of a specified contact
      operationId: getContactCommunicationWays
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the communication ways from
          required: true
          type: integer
          default: null
        - name: type
          in: query
          description: Type of communication ways you want to get
          required: false
          type: string
          default: WEB
          enum:
            - WEB
            - PHONE
            - EMAIL
            - MOBILE
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getRelatedCommunicationWays':
    get:
      tags:
        - Contact
      summary: Get the related communication ways of a specified contact
      description: >-
        Calls getRelatedCommunicationWays() in Contact.php to get the related
        communication ways of a specified contact
      operationId: getContactRelatedCommunicationWays
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the contact you want to get the related communication ways
            from
          required: true
          type: integer
          default: null
        - name: type
          in: query
          description: Type of related communication ways you want to get
          required: false
          type: string
          default: WEB
          enum:
            - WEB
            - PHONE
            - EMAIL
            - MOBILE
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addPhone':
    post:
      tags:
        - Contact
      summary: Add a new phone number
      description: Calls addPhone() in Contact.php
      operationId: addPhone
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values and remove the quotation marks to add a phone number.\r\n\r\nThe key represents what type of website it is (1: Private, 2: Work, 3. Fax, 4. Mobil, 5. empty, 6. Autobox, 7. Newsletter, 8. Invoice address)"
          required: true
          schema:
            example: key=1&value=1337
          x-example: key=1&value=1337
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addMobile':
    post:
      tags:
        - Contact
      summary: Add a new mobile number
      description: Calls addMobile in Contact.php
      operationId: addMobile
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values and remove the quotation marks to add a mobile number.\r\n\r\nThe key represents what type of website it is (1: Private, 2: Work, 3. Fax, 4. Mobil, 5. empty, 6. Autobox, 7. Newsletter, 8. Invoice address)"
          required: true
          schema:
            example: key=1&value=1337
          x-example: key=1&value=1337
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addEmail':
    post:
      tags:
        - Contact
      summary: Add a new email
      description: Calls addEmail() in Contact.php
      operationId: ContactAddEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values and remove the quotation marks to add an email.\r\n\r\nThe key represents what type of website it is (1: Private, 2: Work, 3. Fax, 4. Mobil, 5. empty, 6. Autobox, 7. Newsletter, 8. Invoice address)"
          required: true
          schema:
            example: key=1&value=example@example.com
          x-example: key=1&value=example@example.com
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addWeb':
    post:
      tags:
        - Contact
      summary: Add a new website
      description: Calls addWeb() in Contact.php
      operationId: addWebsite
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values and remove the quotation marks to add a website.\r\n\r\nThe key represents what type of website it is (1: Private, 2: Work, 3. Fax, 4. Mobil, 5. empty, 6. Autobox, 7. Newsletter, 8. Invoice address)"
          required: true
          schema:
            example: key=1&value=www.sevdesk.de
          x-example: key=1&value=www.sevdesk.de
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addCommunicationWay':
    post:
      tags:
        - Contact
      summary: Create a new communication way for a contact
      description: Calls addCommunicationWay() in Contact.php
      operationId: addContactCommunicationWay
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to add a communication way to
          required: true
          type: integer
          default: null
        - name: type
          in: query
          description: Type of communication way you want to add
          required: false
          type: string
          default: WEB
          enum:
            - WEB
            - PHONE
            - EMAIL
            - MOBILE
        - name: value
          in: query
          description: Value of the communication way you want to add
          required: true
          type: string
          default: ''
        - name: key
          in: query
          description: Key of the communication way you want to add
          required: true
          type: integer
          default: '2'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/addAddress':
    post:
      tags:
        - Contact
      summary: Add an address
      description: >-
        Adds an address to the contact by calling addAddress() in Contact.php.
        Address is defined in ContactAddress.php
      operationId: addAddress
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of contact you want to add an address to
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Change the desired values and remove the quotation marks to add an
            address.
          required: true
          schema:
            example: street=&city=&zip=&country=&category=
          x-example: street=&city=&zip=&country=&category=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getAddresses':
    get:
      tags:
        - Contact
      summary: Get the addresses of a specified contact
      description: >-
        Calls getAddresses() in Contact.php to get the addresses of a specified
        contact
      operationId: ContactGetAddresses
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the addresses from
          required: true
          type: integer
          default: null
        - name: 'category[id]'
          in: query
          description: Category of addresses you want to get
          required: true
          type: integer
          default: '43'
        - name: 'category[objectName]'
          in: query
          required: true
          type: string
          default: Category
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getMainAddress':
    get:
      tags:
        - Contact
      summary: Get the main address of a specified contact
      description: >-
        Calls getMainAddress() in Contact.php to get the main address of a
        specified contact
      operationId: getContactMainAddress
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the main address from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getBillingAddress':
    get:
      tags:
        - Contact
      summary: Get the billing address of a specified contact
      description: >-
        Calls getBillingAddress() in Contact.php to get the billing address of a
        specified contact
      operationId: getContactBillingAddress
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the billing address from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getMainPhone':
    get:
      tags:
        - Contact
      summary: Get the main phone of a specified contact
      description: >-
        Calls getMainPhone() in Contact.php to get the main phone of a specified
        contact
      operationId: getContactMainPhone
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the main phone from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getMainMobile':
    get:
      tags:
        - Contact
      summary: Get the main mobile of a specified contact
      description: >-
        Calls getMainMobile() in Contact.php to get the main mobile of a
        specified contact
      operationId: getContactMainMobile
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the main mobile from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getMainEmail':
    get:
      tags:
        - Contact
      summary: Get the main email of a specified contact
      description: >-
        Calls getMainEmail() in Contact.php to get the main email of a specified
        contact
      operationId: getContactMainEmail
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the main email from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getBillingEmail':
    get:
      tags:
        - Contact
      summary: Get the billing email of a specified contact
      description: >-
        Calls getBillingEmail() in Contact.php to get the billing email of a
        specified contact
      operationId: getContactBillingEmail
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the billing email from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getMainWebsite':
    get:
      tags:
        - Contact
      summary: Get the main website of a specified contact
      description: >-
        Calls getMainWebsite() in Contact.php to get the main website of a
        specified contact
      operationId: getContactMainWebsite
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the contact you want to get the main website from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CommunicationWay'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Contact/{id}/getTabsItemCount':
    get:
      tags:
        - Contact
      summary: 'Get number of all invoices, orders, etc. of a specified contact'
      description: >-
        Calls getTabsItemCount() in Contact.php to get the number of all
        invoices, orders, etc. of a specified contact
      operationId: getContactTabsItemCount
      consumes:
        - application/text
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the contact you want to get the number of all invoices,
            orders, etc. from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /ContactAddress:
    get:
      tags:
        - ContactAddress
      summary: Get an overview of all contact addresses
      description: Calls ContactAddress.php to get necessary variables
      operationId: getContactAddresses
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned contacts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - ContactAddress
      summary: Create a new contact address
      description: Calls ContactAddress.php
      operationId: addContactAddress
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a contact address, simply enter desired values after
            parameter= and remove the quotation marks
          required: true
          schema:
            example: >-
              contact[id]=&contact[objectName]=Contact&country[id]=&country[objectName]=StaticCountry&street=&zip=&city=
          x-example: >-
            contact[id]=&contact[objectName]=Contact&country[id]=&country[objectName]=StaticCountry&street=&zip=&city=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/ContactAddress/{id}':
    put:
      tags:
        - ContactAddress
      summary: Update an existing contact address
      description: Calls ContactAddress.php
      operationId: updateContactAddress
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of contact address you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create contact address.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ContactAddress'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - ContactAddress
      summary: Delete an existing contact address
      description: Calls the delete() function in ContactAddress.php
      operationId: deleteContactAddress
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of contact address you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Contact/Factory/create:
    post:
      tags:
        - Contact
      summary: Create a new contact of type person or company
      description: "With the new version of sevdesk some models are not created by calling the model.php directly but by calling the factory.php because of better performance and flexibility.\r\n\r\nBasically the model.php itself still constructs the model however new instances of the model are created trough the factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='\r\n\r\nCreating a new contact of type person/company calls a shared path with the same http-verb.\r\n\r\nHowever, both types require certain parameters which will indicate that their type of contact should be created.\r\n\r\nSo, using **familyname** or **name** in front of 'category' will define if either a person or a company is created"
      operationId: ContactFactoryCreateContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "Concatenate the following attributes with '&' to the example and put **data[familyname]=yourFamilyName&** at the beginning to define the **person** you want to add and remove the quotation marks:\r\n* &data[customerNumber]=\r\n* &data[gender]= (m,w, empty)\r\n* &data[academicTitle]=, &data[titel]=\r\n* &data[surename]=, &data[name2]=\r\n* &data[bankNumber]=, &data[bankAccount]=, &data[vatNumber]=\r\n* &data[defaultCashbackTime]=, &data[defaultCashbackPercent]=, &data[defaultTimeToPay]=\r\n* &data[description]=\r\n\r\nConcatenate the following attributes with '&' to the example and put **data[name]=yourCompanyName&** at the beginning  to define the **company** you want to add and remove the quotation marks:\r\n* &data[name2]=\r\n* &data[bankNumber]=, &data[bankAccount]=, &data[vatNumber]=\r\n* &data[defaultCashbackTime]=, &data[defaultCashbackPercent]=, &data[defaultTimeToPay]=\r\n* &data[description]="
          required: true
          schema:
            example: 'data[category][id]=3&data[category][objectName]=Category'
          x-example: 'data[category][id]=3&data[category][objectName]=Category'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Contact'
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Contact/Factory/getNextCustomerNumber:
    get:
      tags:
        - Contact
      summary: Get the next customer number
      description: Get the next customer number in the sequence
      operationId: getNextCustomerNumber
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CostCentre:
    get:
      tags:
        - CostCentre
      summary: Get an overview of all cost centre
      description: Calls CostCentre.php to get necessary variables
      operationId: getCostCentre
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned cost centre start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CostCentre'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - CostCentre
      summary: Create a new cost centre
      description: Calls CostCentre.php
      operationId: addCostCentre
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a cost centre, simply enter desired values after
            parameter= and remove the quotation marks
          required: true
          schema:
            example: name=&color=&number=
          x-example: name=&color=&number=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_CostCentre'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/CostCentre/{id}':
    put:
      tags:
        - CostCentre
      summary: Update an existing cost centre
      description: Calls CostCentre.php
      operationId: updateCostCentre
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of cost centre you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create cost centre.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CostCentre'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - CostCentre
      summary: Delete an existing cost centre
      description: Calls the delete() function in CostCentre.php
      operationId: deleteCostCentre
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of cost centre you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /CurrencyExchangeRate:
    get:
      tags:
        - CurrencyExchangeRate
      summary: Get an overview of all currency exchange rates
      description: Calls CurrencyExchangeRate.php to get necessary variables
      operationId: getCurrencyExchangeRates
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: "Limits the number of entries returned. Default is 1000.\r\n\r\nBe aware that there are over 100000 entries in the database for currency exchange rate, so using a limit higher than 1000 with offset=0 is not recommended!\r\n\r\nHowever you can set the offset appropriately so you minimize the amount of returned exchange rates and keep loading time to a low."
          required: false
          type: integer
          default: 1000
        - name: offset
          in: query
          description: >-
            Set the index where the returned currency exchange rates start.
            Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CurrencyExchangeRate'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Discounts:
    get:
      tags:
        - Discounts
      summary: Get an overview of all discounts
      description: Calls Discounts.php to get necessary variables.
      operationId: getDiscounts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned discounts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Discounts
      summary: Create a new discount
      description: 'Calls Discounts.php '
      operationId: addDiscount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a discount, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: >-
              object[id]=&object[objectName]=&discount[text]=&discount[percentage]=&discount[value]=
          x-example: >-
            object[id]=&object[objectName]=&discount[text]=&discount[percentage]=&discount[value]=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Discounts/{id}':
    put:
      tags:
        - Discounts
      summary: Update an existing discount
      description: Calls Discounts.php
      operationId: updateDiscount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of discount you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create discount.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Discounts
      summary: Delete an existing discount
      description: Calls the delete() function in Discounts.php
      operationId: deleteDiscount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of discount you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/storeTemplate:
    post:
      tags:
        - DocServer
      summary: Store a template on the doc server
      description: >-
        Calls storeTemplate() in DocServer.php to store a template on the doc
        server
      operationId: DocServerStoreTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "Enter the desired values after parameter= and remove the quotation marks!\r\n\r\nBe aware that you need to enter the html code of your template after html=! Type can be Invoice, Invoicereminder, Order, Contractnote, Packingllist, Letter."
          required: true
          schema:
            example: name=&html=&type=&id=null&isDefault=null&json=undefined
          x-example: name=&html=&type=&id=null&isDefault=null&json=undefined
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/storeLetterpaper:
    post:
      tags:
        - DocServer
      summary: Store a letter paper on the doc server
      description: >-
        Calls storeLetterpaper() in DocServer.php to store a letter paper on the
        doc server
      operationId: DocServerStoreLetterPaper
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "Enter the desired values after parameter= and remove the quotation marks!\r\n\r\nBe aware that you need to enter the base64 of the pdf you want as a letter paper after pdf=!"
          required: true
          schema:
            example: name=&pdf=&type=null&id=null&isDefault=null
          x-example: name=&pdf=&type=null&id=null&isDefault=null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/getTemplates:
    get:
      tags:
        - DocServer
      summary: Get an overview of all templates
      description: Calls getTemplates() in DocServer.php to get the stored templates.
      operationId: DocServerGetTemplates
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/getTemplatesWithThumb:
    get:
      tags:
        - DocServer
      summary: Get an overview of all templates with their thumb
      description: >-
        Calls getTemplatesWithThumb() in DocServer.php to get the stored
        templates with their thumb.
      operationId: DocServerGetTemplatesWithThumb
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/getLetterpapersWithThumb:
    get:
      tags:
        - DocServer
      summary: Get an overview of all letter papers with their thumb
      description: >-
        Calls getLetterpapersWithThumb() in DocServer.php to get the stored
        letter papers with their thumb.
      operationId: DocServerGetLetterPapersWithThumb
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/getLetterpapers:
    get:
      tags:
        - DocServer
      summary: Get an overview of all letter papers
      description: Calls getLetterpapers() in DocServer.php to get the stored letter papers
      operationId: DocServerGetLetterPapers
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/deleteLetterpaper:
    post:
      tags:
        - DocServer
      summary: Delete a specified letter paper
      description: >-
        Calls deleteLetterpaper() in DocServer.php to delete a specified letter
        paper
      operationId: DocServerDeleteLetterPaper
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Enter the id of the letter paper you want to delete after id= and
            remove the quotation marks!
          required: true
          schema:
            example: id=
          x-example: id=
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/setDefaultLetterpaper:
    post:
      tags:
        - DocServer
      summary: Set a letter papers as the default letter paper
      description: >-
        Calls setDefaultLetterpaper() in DocServer.php to set the specified
        letter paper as the default letter paper
      operationId: DocServerSetDefaultLetterPaper
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Enter the id of the letter paper you want to set as the default
            letter paper after id= and remove the quotation marks!
          required: true
          schema:
            example: id=
          x-example: id=
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/setDefaultTemplate:
    post:
      tags:
        - DocServer
      summary: Set a template as the default template
      description: >-
        Calls setDefaultTemplate() in DocServer.php to set the specified
        template as the default template
      operationId: DocServerSetDefaultTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Enter the id of the template you want to set as the default template
            after id= and remove the quotation marks!
          required: true
          schema:
            example: id=
          x-example: id=
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/deleteTemplate:
    post:
      tags:
        - DocServer
      summary: Delete a specified template
      description: >-
        Calls setDefaultTemplate() in DocServer.php to set the specified
        template as the default template
      operationId: DocServerDeleteTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Enter the id of the template you want to set as the default template
            after id= and remove the quotation marks!
          required: true
          schema:
            example: id=
          x-example: id=
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocServer/testTemplate:
    post:
      tags:
        - DocServer
      summary: Test a template
      description: >-
        Calls testTemplate() in DocServer.php to test your template by providing
        the html.
      operationId: DocServerTestTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Enter the html of your template after html= and remove the quotation
            marks!
          required: true
          schema:
            example: html=
          x-example: html=
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      deprecated: true
      security:
        - api_key: []
  /DocServer/testLetterpaper:
    post:
      tags:
        - DocServer
      summary: Test a letter paper
      description: >-
        Calls testLetterpaper() in DocServer.php to test your letter paper by
        providing the pdf.
      operationId: DocServerTestLetterPaper
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/xml
        - application/json
      parameters:
        - name: file
          in: formData
          description: Pdf file to test
          required: true
          type: file
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      deprecated: true
      security:
        - api_key: []
  /Document:
    get:
      tags:
        - Document
      summary: Get an overview of all documents
      description: Calls Document.php to get necessary variables
      operationId: getDocuments
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned documents start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Document'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Document
      summary: >-
        Create a new document. Be aware that there wont be a working document
        with content!
      description: Calls Document.php
      operationId: addDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a document, simply enter desired values after parameter=
            and remove the quotation marks
          required: true
          schema:
            example: filename=&status=&extension=&filesize=
          x-example: filename=&status=&extension=&filesize=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Document'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Document/{id}':
    put:
      tags:
        - Document
      summary: >-
        Update an existing document. Be aware that you can only update its
        parameter but not the content of the document itself!
      description: Calls Document.php
      operationId: updateDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create document.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Document'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Document
      summary: Delete an existing document
      description: Calls the delete() function in Document.php
      operationId: deleteDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Document/{id}/trash':
    put:
      tags:
        - Document
      summary: >-
        Update an existing documents status to 'TRASHED', be aware that this
        deletes the document
      description: Calls trash() in Document.php
      operationId: updateDocumentStatusToTrashed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document of which you want to update the status to 'TRASHED
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema: {}
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Document/{id}/download':
    get:
      tags:
        - Document
      summary: Download a document
      description: >-
        Calls download() in Document.php to download a document. Will return
        base64 content.
      operationId: downloadDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: id
          in: path
          description: Id of the document you want to download
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocumentFolder:
    get:
      tags:
        - DocumentFolder
      summary: Get an overview of all document folders
      description: Calls DocumentFolder.php to get necessary variables
      operationId: getDocumentFolders
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned document folders start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - DocumentFolder
      summary: Create a new document folder
      description: Calls DocumentFolder.php
      operationId: addDocumentFolder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a document folder, simply enter desired values after
            parameter= and remove the quotation marks
          required: true
          schema:
            example: name=&status=
          x-example: name=&status=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}':
    put:
      tags:
        - DocumentFolder
      summary: Update an existing document folder
      description: Calls DocumentFolder.php
      operationId: updateDocumentFolder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document folder you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create document folder.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - DocumentFolder
      summary: Delete an existing document folder
      description: Calls the delete() function in DocumentFolder.php
      operationId: deleteDocumentFolder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document folder you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}/getDocuments':
    get:
      tags:
        - DocumentFolder
      summary: Get an overview of all documents in a document folder
      description: Calls getDocuments() in DocumentFolder.php to get necessary variables
      operationId: getDocumentFolderDocuments
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Document folder of which you want to get the containing documents
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned documents start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}/getFolders':
    get:
      tags:
        - DocumentFolder
      summary: Get an overview of all folders in a document folder
      description: Calls getFolders() in DocumentFolder.php to get necessary variables
      operationId: getDocumentFolderFolders
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Document folder of which you want to get the containing folders
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned folders start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}/getChildren':
    get:
      tags:
        - DocumentFolder
      summary: >-
        Returns children (documents and document folders) as 'nodes' and count
        of all children as 'total'
      description: Calls getChildren() in DocumentFolder.php to get necessary variables
      operationId: getDocumentFolderChildren
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Document folder of which you want to get the children
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned children start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}/trash':
    put:
      tags:
        - DocumentFolder
      summary: Trash an existing document folder
      description: Calls trash() in DocumentFolder.php
      operationId: trashDocumentFolder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of document folder you want to trash
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/DocumentFolder/{id}/getPath':
    get:
      tags:
        - DocumentFolder
      summary: Get path (all parent folders) of this folder
      description: Calls getPath() in DocumentFolder.php to get necessary variables
      operationId: getDocumentFolderPath
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Document folder of which you want to get the path
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentFolder'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocumentFolder/emptyBin:
    delete:
      tags:
        - DocumentFolder
      summary: Delete all objects in the bin
      description: Calls the emptyBin() function in DocumentFolder.php
      operationId: emptyBin
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /DocumentIndex:
    get:
      tags:
        - DocumentIndex
      summary: Get an overview of all document indexes
      description: Calls DocumentIndex.php to get necessary variables.
      operationId: getDocumentIndexes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned document indexes start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_DocumentIndex'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Document/Factory/fileUpload:
    post:
      tags:
        - Document
      summary: Upload a file (creating a document)
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='"
      operationId: FactoryAddDocument
      consumes:
        - multipart/form-data
      produces:
        - application/xml
        - application/json
      parameters:
        - name: object
          in: query
          description: object to which you want to upload your file
          required: false
          type: string
          default: null
        
        - name: folder
          in: query
          description: folder to which you want to upload your file
          required: false
          type: string
          default: null
        - name: file
          in: formData
          description: file to upload
          required: true
          type: file
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Email:
    get:
      tags:
        - Email
      summary: Get an overview of all emails
      description: Calls Email.php to get necessary variables
      operationId: getEmails
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned emails start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Email'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Email
      summary: Create a new email
      description: Calls Email.php
      operationId: addEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an email, simply enter desired values after parameter= and
            remove the quotation marks
          required: true
          schema:
            example: from=&to=&subject=&text=
          x-example: from=&to=&subject=&text=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Email'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Email/{id}':
    put:
      tags:
        - Email
      summary: Update an existing email
      description: Calls Email.php
      operationId: updateEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of email you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create email.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Email'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Email
      summary: Delete an existing email
      description: Calls Email.php
      operationId: deleteEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of email you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /EntryType:
    get:
      tags:
        - EntryType
      summary: Get an overview of all entry types
      description: Calls EntryType.php to get necessary variables.
      operationId: getEntryTypes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned entry types start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_EntryType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - EntryType
      summary: Create a new entry type
      description: Calls EntryType.php to create an entry type
      operationId: addEntryType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an entry type, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: name=
          x-example: name=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_EntryType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/EntryType/{id}':
    put:
      tags:
        - EntryType
      summary: Update an existing entry type
      description: Calls EntryType.php to update an entry type
      operationId: updateEntryType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of entry type you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create entry type.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_EntryType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - EntryType
      summary: Delete an existing entry type
      description: Calls EntryType.php to delete an entry type
      operationId: deleteEntryType
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of entry type you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/EntryType/{id}/deleteReferencedObjects':
    delete:
      tags:
        - EntryType
      summary: Delete all objects bound to the specified entry type
      description: >-
        Tries to delete all objects bound to the specified entry type if they
        are not in use
      operationId: EntryTypeDeleteReferencedObjects
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of entry type you want to use
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/inventoryPartLogListCsv:
    get:
      tags:
        - Export
      summary: Export the inventory part log as csv
      description: "Calls inventoryPartLogListCsv() in Export.php to export the inventory part log list as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportInventoryPartLogList
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported part log
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[filter][part][id]'
          in: query
          description: Id of the part for which you want to export the part log
          required: false
          type: integer
          default: null
        - name: 'sevQuery[filter][part][objectName]'
          in: query
          description: Object name of part
          required: false
          type: string
          default: Part
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: InventoryPartLog
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/voucherListCsv:
    get:
      tags:
        - Export
      summary: Export the voucher list as csv
      description: "Calls voucherListCsv() in Export.php to export the voucher list as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportVoucherListCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported vouchers
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[filter][startDate]'
          in: query
          description: Start date of the voucher list
          required: false
          type: string
          default: null
        - name: 'sevQuery[filter][voucherType]'
          in: query
          description: Type of vouchers you want to export
          required: false
          type: string
          default: VOU
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Voucher
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/contactListCsv:
    get:
      tags:
        - Export
      summary: Export the contact list as csv
      description: "Calls contactListCsv() in Export.php to export the contact list as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportContactListCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported contacts
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[filter][depth]'
          in: query
          description: >-
            Specify if companies and persons (true) or only persons (false)
            should be exported
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Contact
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/contactCsv:
    get:
      tags:
        - Export
      summary: Export the specified contact as csv
      description: "Calls contactCsv() in Export.php to export the specified contact as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportContactCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'contact[id]'
          in: query
          description: Id of the contact you want to export
          required: true
          type: integer
          default: null
        - name: 'contact[objectName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Contact
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/invoiceCsv:
    get:
      tags:
        - Export
      summary: Export the invoice list as csv
      description: "Calls invoiceCsv() in Export.php to export the invoice list as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportInvoiceCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported invoices
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Invoice
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/datevZip:
    get:
      tags:
        - Export
      summary: Export zip for voucher upload
      description: "Calls datevZip() in Export.php to export the zip for voucher upload.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportDatevZip
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/zip
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: scope
          in: query
          description: "Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.\r\n\r\nPossible letters are: **'I'** (Invoices), **'V'** (Vouchers), **'D'** (Depreciations), **'T'** (Transactions).\r\n\r\nBy providing one of those letter you specify that it should be included in the datev export. Some combinations are: 'IVDT', 'IVT' ..."
          required: true
          type: string
          default: IVDT
        - name: start
          in: query
          description: Specify the start date for the zip export
          required: true
          type: string
          default: null
        - name: end
          in: query
          description: Specify the end date for the zip export
          required: true
          type: string
          default: null
        - name: withEnshrined
          in: query
          description: Specify if you want to include enshrined models
          required: true
          type: boolean
          default: 'false'
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/invoiceZip:
    get:
      tags:
        - Export
      summary: Export the invoice list as zip with csv´s
      description: "Calls invoiceZip() in Export.php to export the invoice list as a zip with csv´s.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportInvoiceZip
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/zip
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported invoices
          required: false
          type: integer
          default: 50
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Invoice
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/voucherZip:
    get:
      tags:
        - Export
      summary: Export the voucher list as zip with csv´s
      description: "Calls voucherZip() in Export.php to export the voucher list as a zip with csv´s.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportVoucherZip
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/zip
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported vouchers
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[filter][startDate]'
          in: query
          description: Start date of the voucher list
          required: false
          type: string
          default: null
        - name: 'sevQuery[filter][voucherType]'
          in: query
          description: Type of vouchers you want to export
          required: false
          type: string
          default: VOU
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Voucher
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/partCsv:
    get:
      tags:
        - Export
      summary: Export the parts as csv
      description: "Calls partCsv() in Export.php to export the parts as csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportPartCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported part
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Part
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/transactionsCsv:
    get:
      tags:
        - Export
      summary: Export the transactions as csv
      description: "Calls transactionsCsv() in Export.php to export the transactions as csv. Optionally you can provide a specific check account.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportTransactionsCsv
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/csv
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'checkAccount[id]'
          in: query
          description: >-
            Specify check account for which you want the transactions. Otherwise
            all transactions will be used
          required: false
          type: integer
          default: null
        - name: 'checkAccount[objectName]'
          in: query
          description: Check account model name
          required: false
          type: string
          default: CheckAccount
        - name: 'sevQuery[filter][register]'
          in: query
          description: Specifies if the register is included
          required: true
          type: boolean
          default: false
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported transactions
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: CheckAccountTransaction
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
        - name: 'sevQuery[order][entryDate]'
          in: query
          description: Order in which you want to have the transactions listed
          required: true
          type: string
          default: desc
          enum:
            - desc
            - asc
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/pebe:
    get:
      tags:
        - Export
      summary: Pebe export as zip with csv´s
      description: "Calls pebe() in Export.php to export the pebe zip with csv´s.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportPebe
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/zip
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: scope
          in: query
          description: "Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.\r\n\r\nPossible letters are: **'I'** (Invoices), **'V'** (Vouchers), **'D'** (Depreciations), **'T'** (Transactions).\r\n\r\nBy providing one of those letter you specify that it should be included in the datev export. Some combinations are: 'IVDT', 'IVT' ..."
          required: true
          type: string
          default: IVDT
        - name: start
          in: query
          description: Specify the start date for the pebe export
          required: true
          type: string
          default: null
        - name: end
          in: query
          description: Specify the end date for the pebe export
          required: true
          type: string
          default: null
        - name: withEnshrined
          in: query
          description: Specify if you want to include enshrined models
          required: true
          type: boolean
          default: 'false'
        - name: enshrine
          in: query
          description: >-
            Specify if you want to enshrine all models which were included in
            the export
          required: true
          type: boolean
          default: 'false'
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Export/datev:
    get:
      tags:
        - Export
      summary: Datev export as zip with csv´s
      description: "Calls datev() in Export.php to export the datev as a csv.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ExportDatev
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/zip
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: scope
          in: query
          description: "Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.\r\n\r\nPossible letters are: **'I'** (Invoices), **'V'** (Vouchers), **'D'** (Depreciations), **'T'** (Transactions).\r\n\r\nBy providing one of those letter you specify that it should be included in the datev export. Some combinations are: 'IVDT', 'IVT' ..."
          required: true
          type: string
          default: IVDT
        - name: start
          in: query
          description: Specify the start date for the datev export
          required: true
          type: string
          default: null
        - name: end
          in: query
          description: Specify the end date for the datev export
          required: true
          type: string
          default: null
        - name: withEnshrined
          in: query
          description: Specify if you want to include enshrined models
          required: true
          type: boolean
          default: 'false'
        - name: enshrine
          in: query
          description: >-
            Specify if you want to enshrine all models which were included in
            the export
          required: true
          type: boolean
          default: 'false'
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Feed:
    get:
      tags:
        - Feed
      summary: >-
        Get an overview of all actions from everyone, which will be displayed in
        the dashboard
      description: Calls Feed.php to get necessary variables.
      operationId: getFeeds
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned feeds start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Feed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Feed
      summary: Create a new action which will be displayed in the feed
      description: Calls Feed.php to add an action to the feed
      operationId: addFeed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a new action for the feed, simply enter desired values
            after parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              text=&type[id]=&type[objectName]=FeedType&user[id]=&user[objectName]=SevUser
          x-example: >-
            text=&type[id]=&type[objectName]=FeedType&user[id]=&user[objectName]=SevUser
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Feed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Feed/{id}':
    put:
      tags:
        - Feed
      summary: Update an existing Feed action
      description: 'TODO: Enter short backend documentation here'
      operationId: updateFeed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of feed action you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema:
            example: >-
              text=&type[id]=&type[objectName]=FeedType&user[id]=&user[objectName]=SevUser
          x-example: >-
            text=&type[id]=&type[objectName]=FeedType&user[id]=&user[objectName]=SevUser
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Feed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Feed
      summary: Delete an existing feed action
      description: Deletes a feed action
      operationId: deleteFeed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of feed action you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Feed/{id}/getParsedObjectAction':
    get:
      tags:
        - Feed
      summary: Get more information about the specific feed object
      description: >-
        Calls getParsedObjectAction() in Feed.php to get more information about
        the specified object
      operationId: getParsedObjectAction
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Feed id of the object you want to get more information about
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Help/getCategories:
    get:
      tags:
        - Help
      summary: Get all categories of help articles
      description: >-
        Calls getCategories() in Help.php to get all categories available for
        searching help articles
      operationId: HelpGetCategories
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned sections start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Help'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Help/getSections:
    get:
      tags:
        - Help
      summary: Get all sections of help articles
      description: >-
        Calls getSections() in Help.php to get all sections available for
        searching help articles
      operationId: HelpGetSections
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned sections start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Help'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Help/getArticles:
    get:
      tags:
        - Help
      summary: Get all help articles for a specified section
      description: >-
        Calls getArticles() in Help.php to get all help articles for a specified
        section
      operationId: HelpGetArticles
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: sectionId
          in: query
          description: Section id you want to get help articles about
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned help articles start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Help'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Help/getArticle:
    get:
      tags:
        - Help
      summary: Get a specified article
      description: Calls getArticle() in Help.php to get a specified help article
      operationId: HelpGetArticle
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: articleId
          in: query
          description: Id of the article you want to get
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Help'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Help/search:
    get:
      tags:
        - Help
      summary: Search for articles
      description: Calls search() in Help.php to search for articles
      operationId: HelpSearchArticles
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: name
          in: query
          description: String to search for
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Help'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /InventoryPartLog:
    get:
      tags:
        - InventoryPartLog
      summary: Get an overview of InventoryPartLog
      description: Calls InventoryPartLog.php to get necessary variables
      operationId: getInventoryPartLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned part logs start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InventoryPartLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - InventoryPartLog
      summary: Create a new inventory part log
      description: Calls InventoryPartLog.php
      operationId: addInventoryPartLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create a inventory part log, simply enter desired values after parameter= and remove the quotation marks!\r\n\r\nBe aware that creating an inventory part log this way is not recommended as there is no real acquisition/dispatch of a part!"
          required: true
          schema:
            example: >-
              part[id]=&part[objectName]=Part&ammount=&name=&supplier[id]=&supplier[objectName]=Contact&postingDate=
          x-example: >-
            part[id]=&part[objectName]=Part&ammount=&name=&supplier[id]=&supplier[objectName]=Contact&postingDate=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_InventoryPartLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/InventoryPartLog/{id}':
    put:
      tags:
        - InventoryPartLog
      summary: Update an existing inventory part log
      description: Calls InventoryPartLog.php
      operationId: updateInventoryPartLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of inventory part log you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create inventory part log.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!\r\n\r\nBe aware that updating an existing inventory part log is not recommended unless its for correcting wrong data in the database!"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InventoryPartLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - InventoryPartLog
      summary: Delete an existing inventory part log
      description: "Calls the delete() function in InventoryPartLog.php\r\n\r\nBe aware that this operations sets the stock of your part to the value it had before the acquisition/dispatch and deletes the corresponding feed!"
      operationId: deleteInventoryPartLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of inventory part log you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/InventoryPartLog/{id}/getStock':
    get:
      tags:
        - InventoryPartLog
      summary: Get stock of inventory part involved in part log
      description: >-
        Calls getStock() in InventoryPartLog.php to get the stock of the part
        involved in the part log
      operationId: getInventoryPartLogStock
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of inventory part log you want to get the stock from
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice:
    get:
      tags:
        - Invoice
      summary: Get an overview of all invoices
      description: >-
        Calls Invoice.php to get necessary variables. However, not all variables
        get their value from Invoice.php directly but from other models like
        Model_InvoicePos or Model_Part
      operationId: getInvoices
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned invoices start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Invoice
      summary: Create a new invoice
      description: 'Calls Invoice.php '
      operationId: addInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create an invoice, simply enter desired values after parameter= and remove the quotation marks.\r\n\r\nBe aware that you can't use all the parameters included in the Model_Invoice, as creating an invoice involves other functions.\r\n\r\nSo for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product which is involved in the invoice\r\n\r\nThe product/part in this case is handled in the Model_InvoicePos which makes a call to Model_Part.\r\n\r\nIn Invoice.php there is only a function 'addPosition' which makes the call to InvoicePos.php"
          required: true
          schema:
            example: >-
              header=&invoiceNumber=&invoiceType=&invoiceDate=&contactPerson[id]=705&contactPerson[objectName]=SevUser&contact[id]=207&contact[objectName]=Contact&discount=&discountTime=& 
              taxRate=&taxText=&taxType=&status=100&smallSettlement=&currency=
          x-example: >-
            header=&invoiceNumber=&invoiceType=&invoiceDate=&contactPerson[id]=705&contactPerson[objectName]=SevUser&contact[id]=207&contact[objectName]=Contact&discount=&discountTime=& 
            taxRate=&taxText=&taxType=&status=100&smallSettlement=&currency=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}':
    put:
      tags:
        - Invoice
      summary: Update an existing invoice
      description: Calls Invoice.php
      operationId: updateInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create invoice.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Invoice
      summary: Delete an existing invoice
      description: Calls the delete() function in Invoice.php
      operationId: deleteInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getIsPartiallyPaid':
    get:
      tags:
        - Invoice
      summary: Returns if the invoice is partially payed
      description: Calls getIsPartiallyPaid() in Invoice.php
      operationId: InvoiceGetIsPartiallyPaid
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to know if it is partially paid
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getFeed':
    get:
      tags:
        - Invoice
      summary: Get the feed of a specified invoice
      description: Calls getFeed() in Invoice.php
      operationId: InvoiceGetFeed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the feed
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Feed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/addPosition':
    put:
      tags:
        - Invoice
      summary: Add a position to an existing invoice
      description: "Calls addPosition() in Invoice.php to add a position to an invoice.\r\n\r\nThis function is not required anymore as there is a function for creating Invoices in Invoice/Factory which includes adding the position."
      operationId: InvoiceAddPosition
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to add a position to
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            To add a position, simply enter desired values after parameter= and
            remove the quotation marks
          schema:
            example: >-
              quantity=&name=&text=&price=&taxRate=&part[id]=&part[objectName]=Part&unity[id]=&unity[objectName]=Unity&discount=&temporary=
          x-example: >-
            quantity=&name=&text=&price=&taxRate=&part[id]=&part[objectName]=Part&unity[id]=&unity[objectName]=Unity&discount=&temporary=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getPositions':
    get:
      tags:
        - Invoice
      summary: Get the positions of a specified invoice
      description: Calls getPositions() in Invoice.php
      operationId: InvoiceGetPositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the positions
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: limits the number of entries returned
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: set the index where the returned entries start
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoicePos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/duplicate':
    post:
      tags:
        - Invoice
      summary: Duplicate an existing invoice
      description: Calls duplicate() in Invoice.php to duplicate an existing invoice
      operationId: duplicateInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to duplicate
          required: true
          type: integer
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getDiscounts':
    get:
      tags:
        - Invoice
      summary: Get the discounts of a specified invoice
      description: Calls getDiscounts() in Invoice.php
      operationId: InvoiceGetDiscounts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the discounts
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTags':
    get:
      tags:
        - Invoice
      summary: Get the tags of a specified invoice
      description: Calls getTags() in Invoice.php
      operationId: InvoiceGetTags
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the tags
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Tag'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/hasDiscounts':
    get:
      tags:
        - Invoice
      summary: Returns if the specified invoice has discounts
      description: Calls hasDiscounts() in Invoice.php
      operationId: InvoiceHasDiscounts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to know if it has discounts
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/isOrigin':
    get:
      tags:
        - Invoice
      summary: Returns if the specified invoice is the origin of an order
      description: >-
        Calls isOrigin() in Invoice.php to find out if the invoice is the origin
        of an order
      operationId: InvoiceIsOrigin
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of invoice of which you want to know if it is the origin of an
            order
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTaxGroupes':
    get:
      tags:
        - Invoice
      summary: Get tax groups of invoice
      description: Calls getTaxGroupes() in Invoice.php to get tax groups
      operationId: InvoiceGetTaxGroups
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the tax groups
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTotalCalc':
    get:
      tags:
        - Invoice
      summary: Get total invoice amount in invoice currency
      description: Calls getTotalCalc() in Invoice.php to get tax groups
      operationId: InvoiceGetTotalCalc
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of invoice of which you want to get the invoice amount in invoice
            currency
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTotalNet':
    get:
      tags:
        - Invoice
      summary: Get total net invoice amount in invoice currency
      description: Calls getTotalNet() in Invoice.php to get total net amount of invoice
      operationId: InvoiceGetTotalNet
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the total net invoice amount
          required: true
          type: integer
          default: null
        - name: invoiceAmount
          in: query
          description: Determines whether to use sumNet from invoice or sumNetAccounting
          required: false
          type: boolean
          default: false
        - name: withoutDiscounts
          in: query
          description: >-
            Determines whether the total net is calculated with or without the
            discounts
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTotal':
    get:
      tags:
        - Invoice
      summary: Get gross invoice amount in invoice currency
      description: Calls getTotal() in Invoice.php to get gross amount of invoice
      operationId: InvoiceGetTotal
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the gross invoice amount
          required: true
          type: integer
          default: null
        - name: invoiceAmount
          in: query
          description: >-
            Determines whether to use sumGross from invoice or
            sumGrossAccounting
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getTax':
    get:
      tags:
        - Invoice
      summary: Get invoice tax amount in invoice currency
      description: Calls getTax() in Invoice.php to get tax amount of invoice
      operationId: InvoiceGetTax
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the invoice tax amount
          required: true
          type: integer
          default: null
        - name: invoiceAmount
          in: query
          description: Determines whether to use sumTax from invoice or sumTaxAccounting
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/markAsSent':
    put:
      tags:
        - Invoice
      summary: Marks an invoice as sent
      description: Calls markAsSent() in Invoice.php to mark an invoice as sent
      operationId: InvoiceMarkAsSent
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice which you want to mark as sent
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/cancel':
    get:
      tags:
        - Invoice
      summary: Cancel an invoice
      description: >-
        Calls cancel() in Invoice.php to cancel an invoice and creates a
        cancellation invoice  
      operationId: CancelInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice which you want to cancel
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/refundAmmount':
    put:
      tags:
        - Invoice
      summary: Refund an already payed invoice amount
      description: Calls refundAmmount() in Invoice.php to refund an invoice amount
      operationId: InvoiceRefundAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to refund the amount
          required: true
          type: integer
          default: null
        - name: ammount
          in: query
          description: amount which should be refunded
          required: true
          type: integer
          default: null
        - name: date
          in: query
          description: booking date
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/bookAmmount':
    put:
      tags:
        - Invoice
      summary: Book amount for an invoice
      description: Calls bookAmmount() in Invoice.php to book an invoice amount
      operationId: InvoiceBookAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to book an amount
          required: true
          type: integer
          default: null
        - name: ammount
          in: query
          description: amount which should be booked
          required: true
          type: integer
          default: null
        - name: date
          in: query
          description: booking date
          required: true
          type: string
          default: null
        - name: body
          in: body
          description: "Optionally, you can enter a checkAccount and checkAccountTransaction here.\r\n\r\nBe aware that if you dont define a checkAccount / checkAccountTransaction you need to remove the part from the body or remove everything except the quotation marks if you dont want to define anything at all!"
          schema:
            example: >-
              checkAccount[objectName]=CheckAccount&checkAccount[id]=&checkAccountTransaction[objectName]=CheckAccountTransaction&checkAccountTransaction[id]=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoiceLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getDebit':
    get:
      tags:
        - Invoice
      summary: Get debit of an invoice
      description: Calls getDebit() in Invoice.php to get debit of an invoice
      operationId: InvoiceGetDebit
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the debit
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/changeStatus':
    put:
      tags:
        - Invoice
      summary: Change status of an invoice
      description: Calls changeStatus() in Invoice.php to book an invoice amount
      operationId: InvoiceChangeStatus
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to book an amount
          required: true
          type: integer
          default: null
        - name: value
          in: query
          description: desired status
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getDelinquent':
    get:
      tags:
        - Invoice
      summary: Get if an invoice is delinquent
      description: Calls getDelinquent() in Invoice.php to get if an invoice is delinquent
      operationId: InvoiceGetDelinquent
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to know if its delinquent
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getDocument':
    get:
      tags:
        - Invoice
      summary: Get document of an invoice
      description: Calls getDocument() in Invoice.php to get the document of an invoice
      operationId: InvoiceGetDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the document
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getDunnings':
    get:
      tags:
        - Invoice
      summary: Get invoice dunnings
      description: Calls getDunnings() in Invoice.php to get the dunnings of an invoice
      operationId: InvoiceGetDunnings
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the dunnings
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getLastDunningDate':
    get:
      tags:
        - Invoice
      summary: Get last dunning date of invoice as timestamp
      description: >-
        Calls getLastDunningDate() in Invoice.php to get the date of the last
        dunning of an invoice
      operationId: InvoiceGetLastDunningDate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the date of the last dunning
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/calculateDunningLevel':
    get:
      tags:
        - Invoice
      summary: Get dunning level of an invoice
      description: >-
        Calls calculateDunningLevel() in Invoice.php to get the dunning level of
        an invoice
      operationId: InvoiceCalculateDunningLevel
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the dunning level
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getCancled':
    get:
      tags:
        - Invoice
      summary: Returns if an invoice is cancled
      description: Calls getCancled() in Invoice.php to know if an invoice is cancled
      operationId: InvoiceGetCancled
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to know if it is cancled
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/render':
    post:
      tags:
        - Invoice
      summary: Render invoice document on docserver and return metadata
      description: >-
        Calls render() in Invoice.php to render invoice document on docserver
        and return the metadata
      operationId: InvoiceRender
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of invoice of which you want to render the document and get the
            metadata
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/sendViaEmail':
    post:
      tags:
        - Invoice
      summary: Send an invoice via Email
      description: Calls sendViaEmail in Invoice.php
      operationId: sendInvoiceViaEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to send via Email
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values after the parameters and remove the quotation marks. You can also add 'additionalAttachments', 'ccEmail=' and 'bccEmail'\r\n\r\nPlease note: additionalAttachments is a String containing document id's (of existing documents!)"
          required: true
          schema:
            example: >-
              toEmail=test@sevenit.de&subject=This is a test&text=Hello this is
              a test mail
          x-example: >-
            toEmail=test@sevenit.de&subject=This is a test&text=Hello this is a
            test mail
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Email'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/sendViaPost':
    post:
      tags:
        - Invoice
      summary: Send an invoice via Letter
      description: Calls sendViaPost in Invoice.php
      operationId: sendInvoiceViaPost
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice you want to send via Letter
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getPdf':
    get:
      tags:
        - Invoice
      summary: Get the invoice as a PDF
      description: Calls getPdf in Invoice.php
      operationId: getInvoiceAsPdf
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice of which you want to get the PDF
          required: true
          type: integer
          default: null
        - name: download
          in: query
          description: >-
            If true PDF will return as filestream otherwise as json object the
            content base64 encoded
          required: true
          type: boolean
          default: 0
          enum:
            - 'true'
            - 'false'
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/calcTotalDebit:
    get:
      tags:
        - Invoice
      summary: Calculate total sum of all invoices of current query
      description: >-
        Calls calcTotalDebit() in Invoice.php to calculate total sum of all
        invoices of current query
      operationId: InvoiceCalcTotalDebit
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getCheckAccountTransactionLogs':
    get:
      tags:
        - Invoice
      summary: Get check account transaction logs about a specified invoice
      description: >-
        Calls getCheckAccountTransactionLogs() in Invoice.php to get check
        account transaction logs about the invoice
      operationId: InvoiceGetCheckAccountTransactionLogs
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the invoice of which you want to get the check account
            transaction logs
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransactionLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getCheckAccountTransactions':
    get:
      tags:
        - Invoice
      summary: Get check account transactions of a specified invoice
      description: >-
        Calls getCheckAccountTransactions() in Invoice.php to get check account
        transactions of the invoice
      operationId: InvoiceGetCheckAccountTransactions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the invoice of which you want to get the check account
            transactions
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_CheckAccountTransaction'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getPartialInvoices':
    get:
      tags:
        - Invoice
      summary: Get partial invoices of a specified invoice
      description: >-
        Calls getPartialInvoices() in Invoice.php to get partial invoices of the
        invoice
      operationId: InvoiceGetPartialInvoices
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the invoice of which you want to get the partial invoices
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getRelatedObjects':
    get:
      tags:
        - Invoice
      summary: Get related objects of a specified invoice
      description: >-
        Calls getRelatedObjects() in Invoice.php to get related objects of the
        invoice
      operationId: InvoiceGetRelatedObjects
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the invoice of which you want to get the related objects
          required: true
          type: integer
          default: null
        - name: includeItself
          in: query
          description: Define if the related objects include the invoice itself
          required: false
          type: boolean
          default: false
        - name: sortByType
          in: query
          description: Define if you want the related objects sorted by type
          required: false
          type: boolean
          default: false
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/getFinalInvoiceId':
    get:
      tags:
        - Invoice
      summary: Get final invoice id
      description: >-
        Calls getFinalInvoiceId() in Invoice.php to get final invoice id of the
        invoice chain
      operationId: InvoiceGetFinalInvoiceId
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the invoice of which you want to get the final invoice id
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Invoice/{id}/sendBy':
    put:
      tags:
        - Invoice
      summary: Send invoice by desired method
      description: Calls sendBy() in Invoice.php to send an invoice by the desired method
      operationId: InvoiceSendBy
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice which you want to send
          required: true
          type: integer
          default: null
        - name: sendType
          in: query
          description: >-
            desired send type, available are: VM = Mail, VP = Post, VPDF = PDF,
            PRN = Print
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/getSwissEsr:
    get:
      tags:
        - Invoice
      summary: Get swiss esr
      description: Calls getSwissEsr() in Invoice.php to get the swiss esr
      operationId: InvoiceGetSwissEsr
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/getSwissEsrData:
    get:
      tags:
        - Invoice
      summary: Get swiss esr data
      description: Calls getSwissEsrData() in Invoice.php to get the swiss esr data
      operationId: InvoiceGetSwissEsrData
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /InvoiceLog:
    get:
      tags:
        - InvoiceLog
      summary: Get an overview of invoice logs
      description: Calls InvoiceLog.php to get necessary variables
      operationId: getInvoiceLogs
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned invoice logs start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoiceLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - InvoiceLog
      summary: Create a new invoice log
      description: Calls InvoiceLog.php
      operationId: addInvoiceLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an invoice log, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              invoice[objectName]=Invoice&invoice[id]=&fromStatus=&toStatus=&ammountPayed=&bookingDate=
          x-example: >-
            invoice[objectName]=Invoice&invoice[id]=&fromStatus=&toStatus=&ammountPayed=&bookingDate=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_InvoiceLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/InvoiceLog/{id}':
    put:
      tags:
        - InvoiceLog
      summary: Update an existing invoice log
      description: Calls InvoiceLog.php
      operationId: updateInvoiceLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice log you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create invoice log.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoiceLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - InvoiceLog
      summary: Delete an existing invoice log
      description: Calls the delete() function in InvoiceLog.php
      operationId: deleteInvoiceLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of invoice log you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /InvoicePos:
    get:
      tags:
        - InvoicePos
      summary: Get an overview of all invoice positions
      description: Calls InvoicePos.php to get necessary variables.
      operationId: getInvoicePositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned invoice positions start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoicePos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - InvoicePos
      summary: Create a new invoice position
      description: "Calls InvoicePos.php.\r\n\r\nAs described in the Model_Invoice earlier, some of its parameters get their value from other models/functions.\r\n\r\nInvoicePos is one of those Models and provides the ability to add products/parts to your invoice which fills values like sumNet,taxation, etc."
      operationId: addInvoicePos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create an invoice position, simply enter desired values after parameter= and remove the quotation marks.\r\n\r\nAdds a product/part to an invoice with a price, quantity etc, therefore the invoice model gets sumNet and other parameters from it too"
          required: true
          schema:
            example: >-
              invoice[id]=210&invoice[objectName]=Invoice&name=Pizza&quantity=1&price=4.5&unity[id]=1&unity[objectName]=Unity&taxRate=7
          x-example: >-
            invoice[id]=210&invoice[objectName]=Invoice&name=Pizza&quantity=1&price=4.5&unity[id]=1&unity[objectName]=Unity&taxRate=7
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_InvoicePos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/InvoicePos/{id}':
    put:
      tags:
        - InvoicePos
      summary: Update an existing invoice position
      description: 'TODO: Enter short backend documentation here'
      operationId: updateInvoicePos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice position you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create invoice position.\r\n\r\n\tEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InvoicePos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - InvoicePos
      summary: Delete an existing invoice position
      description: >-
        Calls the delete() function in InvoicePos.php. This does NOT delete an
        invoice, just the position which belonged to the invoice!
      operationId: deleteInvoicePos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of invoice position you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/saveInvoice:
    post:
      tags:
        - Invoice
      summary: 'Create a new invoice (with / without invoice positions and discounts) '
      description: "With the new version of sevdesk some models are not created by calling the model.php directly but by calling the factory.php because of better performance and flexibility.\r\n\r\nBasically the model.php itself still constructs the model however new instances of the model are created trough the factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='"
      operationId: saveInvoice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "The saveInvoice function in Invoice/Factory.php combines both Invoice and InvoicePos with all their HTTP-methods.\r\n\r\nIt is now possible to **simultaneously** create an invoice with its position and discount.\r\n\r\nTo simply (only) create an invoice you can use the given parameters and concatenate your values.\r\n\r\nFor also adding an invoice position or a discount refer to the corresponding **quick reference** below.\r\n\r\nThe parameters you find there are **needed** for creating an invoice position / discount. Just concatenate them to the existing invoice / invoicePosSave parameters.\r\n\r\nYou can also find additional (optional) parameters in the **Models** section.\r\n\r\nQuick reference InvoicePos:\r\n* &invoicePosSave[0][part][id]=\r\n* &invoicePosSave[0][part][objectName]=Part\r\n* &invoicePosSave[0][quantity]=\r\n* &invoicePosSave[0][unity][id]=\r\n* &invoicePosSave[0][unity][objectName]=Unity\r\n* &invoicePosSave[0][taxRate]=19\r\n* &invoicePosSave[0][objectName]=InvoicePos\r\n* &invoicePosSave[0][mapAll]=true\r\n* &invoicePosSave[0][price]=\r\n* &invoicePosDelete=null\r\n\r\nQuick reference Discounts:\r\n* &discountSave[0][discount]=true\r\n* &discountSave[0][text]=\r\n* &discountSave[0][percentage]=\r\n* &discountSave[0][value]=\r\n* &discountSave[0][objectName]=Discounts\r\n* &discountSave[0][mapAll]=true\r\n* &discountDelete=null\r\n\r\nYou can also use additional parameters for creating an invoice in the same way by adding them in the format: **invoice[yourParameter]** "
          required: true
          schema:
            example: >-
              invoice[invoiceNumber]=&invoice[contact][id]=&invoice[contact][objectName]=Contact&invoice[invoiceDate]=&invoice[header]=&invoice[createUser][id]=&invoice[createUser][objectName]=SevUser&invoice[status]=&invoice[contactPerson][id]=&invoice[contactPerson][objectName]=SevUser&invoice[taxType]=default&invoice[invoiceType]=RE&invoice[currency]=EUR&invoice[objectName]=Invoice&invoice[mapAll]=true&invoice[discount]=false 
              &invoice[taxRate]=0&invoice[taxText]=0
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice_Factory'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/createInvoiceFromOrder:
    post:
      tags:
        - Invoice
      summary: Create an new invoice from an existing order
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='"
      operationId: createInvoiceFromOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            Takes an existing Model_Order and creates an invoice with positions
            and discounts from it. Enter your values after parameter= and remove
            the quotation marks
          required: true
          schema:
            example: >-
              order[id]=&order[objectName]=Order&optArray=null&type=percentage&amount=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/createInvoiceReminder:
    post:
      tags:
        - Invoice
      summary: Create an invoice reminder
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the Model.php itself still constructs the model however new instances of the model are created trough the Factory.php\r\n\r\nSo for example when you create a new invoice it wont be saved by a POST request with '/Invoice?para1=&...' but with the saveInvoice function in Factory.php 'Voucher/Factory/saveInvoice?para1='"
      operationId: createInvoiceReminder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "Takes an existing Model_Invoice and creates a reminder for it.\r\n\r\nNote that actually creating a reminder would require to save the rendered invoice reminder so this is not possible by calling the api directly.\r\n\r\nHowever for demonstration purposes you can still call the function by appending an invoice id after invoice[id]= and removing the quotation marks."
          required: true
          schema:
            example: 'invoice[id]=&invoice[objectName]=Invoice'
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Invoice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/getNextInvoiceNumber:
    get:
      tags:
        - Invoice
      summary: Get the next invoice number
      description: ''
      operationId: getNextInvoiceNumber
      consumes:
        - application/application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: invoiceType
          in: query
          description: defines the type of invoice you want to get the next number from
          required: true
          type: string
          default: RE
          enum:
            - RE
            - MA
            - WKR
        - name: useNextNumber
          in: query
          description: >-
            By default this is true, so the invoiceNumber will increase by one
            otherwise the invoiceNumber will not change
          required: true
          type: boolean
          default: true
          enum:
            - 'true'
            - 'false'
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/getTotalInvoiceReminderAmount:
    get:
      tags:
        - Invoice
      summary: Get (monetary) amount of all reminders of an invoice
      description: >-
        Calls the getTotalInvoiceReminderAmount function in /Invoice/Factory/ to
        get the amount of all reminders of an invoice.
      operationId: getInvoiceReminderAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: 'invoice[id]'
          in: query
          description: id of the invoice you want to get the reminder amount for
          required: true
          type: integer
        - name: 'invoice[objectName]'
          in: query
          description: ''
          required: true
          type: string
          default: Invoice
      responses:
        '200':
          description: successful operation
          schema: {}
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Invoice/Factory/getTotalInvoiceReminderAndInvoiceAmount:
    get:
      tags:
        - Invoice
      summary: Get amount of an invoice including reminders
      description: >-
        Calls the getTotalInvoiceReminderAndInvoiceAmount function in
        /Invoice/Factory/ to get the amount of the invoice including its
        reminders.
      operationId: getInvoiceAndReminderAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: 'invoice[id]'
          in: query
          description: id of the invoice you want to get the total amount for
          required: true
          type: integer
        - name: 'invoice[objectName]'
          in: query
          description: ''
          required: true
          type: string
          default: Invoice
      responses:
        '200':
          description: successful operation
          schema: {}
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Letter:
    get:
      tags:
        - Letter
      summary: Get an overview of all letters
      description: Calls Letter.php to get necessary variables
      operationId: getLetters
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned letters start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Letter'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Letter
      summary: Create a new letter
      description: Calls Letter.php
      operationId: addLetter
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a letter, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: >-
              letterNumber=&contact[objectName]=Contact&contact[id]=&header=&status=&text=&sendType=&sendDate=
          x-example: >-
            letterNumber=&contact[objectName]=Contact&contact[id]=&header=&status=&text=&sendType=&sendDate=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Letter'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}':
    put:
      tags:
        - Letter
      summary: Update an existing letter
      description: Calls Letter.php
      operationId: updateLetter
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create letter.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Letter'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Letter
      summary: Delete an existing letter
      description: Calls the delete() function in Letter.php
      operationId: deleteLetter
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}/render':
    post:
      tags:
        - Letter
      summary: Render a letter to the docserver and return the metadata
      description: "Calls render() in Letter.php to render a letter to the docserver and return the metadata.\r\n\r\nNote that this does not work for letters created by calling the api directly (eg. over Swagger)!"
      operationId: LetterRender
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter you want to render
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}/getPdf':
    get:
      tags:
        - Letter
      summary: Get pdf from docserver
      description: >-
        Calls getPdf() in Letter.php to get the pdf of a specified letter from
        the docserver
      operationId: LetterGetPdf
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the letter of which you want to get the pdf
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}/sendViaEmail':
    post:
      tags:
        - Letter
      summary: Send a letter via mail
      description: "Calls sendViaMail() in Letter.php to send a letter via mail.\r\n\r\nNote that you can not send a letter created by calling the api directly (eg. over Swagger)!"
      operationId: LetterSendViaMail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter you want to send
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "To send a letter, simply enter desired values after parameter= and remove the quotation marks.\r\n\r\nPlease note: additionalAttachments is a String containing document id's (of existing documents!)"
          schema:
            example: >-
              toEmail=&ccEmail=&bccEmail=&subject=&text=&copy=false&additionalAttachments=null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}/sendViaPost':
    post:
      tags:
        - Letter
      summary: Send a letter via post
      description: "Calls sendViaPost() in Letter.php to send a letter via post if enabled in your subscription\r\n\r\nNote that you can not send a letter created by calling the api directly (eg. over Swagger)!"
      operationId: LetterSendViaPost
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter you want to send
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Letter/{id}/sendBy':
    put:
      tags:
        - Letter
      summary: Update parameter sendType
      description: >-
        Calls sendBy() in Letter.php to update the sendType parameter of the
        letter and change its status to DELIVERED
      operationId: LetterSendBy
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of letter of which you want to update the sendType parameter
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter desired send type after sendType= and remove the quotation
            marks!
          schema:
            example: sendType=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Letter'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /ObjectUsed:
    get:
      tags:
        - ObjectUsed
      summary: Get an overview of all objects used
      description: Calls ObjectUsed.php to get necessary variables
      operationId: getObjectUsed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned objects used start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ObjectUsed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /ObjectViewed:
    get:
      tags:
        - ObjectViewed
      summary: Get an overview of objects viewed
      description: Calls ObjectViewed.php to get necessary variables
      operationId: getObjectViewed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned objects viewed start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_ObjectViewed'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Order:
    get:
      tags:
        - Order
      summary: Get an overview of all orders
      description: >-
        Calls Order.php to get necessary variables. However, not all variables
        get their value from Order.php directly but from other models like
        Model_OrderPos
      operationId: getOrders
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned invoice positions start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Order
      summary: Create a new order
      description: Calls Order.php
      operationId: addOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create an order, simply enter desired values after parameter=, concatenate additional parameters with & and remove the quotation marks.\r\n\r\nBe aware that you can't use all the parameters included in the Model_Order, as creating an order involves other functions/models.\r\n\r\nSo for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product/part which is involved in the order.\r\n\r\nThe product/part in this case is handled in the Model_OrderPos which makes a call to Model_Part.\r\n\r\nIn Order.php there is only a function 'getPositions' which makes the call to OrderPos.php to get the positions involved in the order."
          required: true
          schema:
            example: >-
              orderNumber=AN-1042&orderType=AN&contact[id]=825022&contact[objectName]=Contact&orderDate=26.8.2015&header=Angebot
              O-42&headText=head text&footText=foot
              text&addressName=Factory&addressStreet=Hauptstr.
              5&addressZip=77933&addressCity=Lahr&smallSettlement=0&contactPerson[id]=811&contactPerson[objectName]=SevUser&taxRate=0&taxText=Umsatzsteuer
              ausweisen&taxType=default&currency=EUR&version=1
          x-example: >-
            orderNumber=AN-1042&orderType=AN&contact[id]=825022&contact[objectName]=Contact&orderDate=26.8.2015&header=Angebot
            O-42&headText=head text&footText=foot
            text&addressName=Factory&addressStreet=Hauptstr.
            5&addressZip=77933&addressCity=Lahr&smallSettlement=0&contactPerson[id]=811&contactPerson[objectName]=SevUser&taxRate=0&taxText=Umsatzsteuer
            ausweisen&taxType=default&currency=EUR&version=1
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}':
    put:
      tags:
        - Order
      summary: Update an existing order
      description: Calls Order.php
      operationId: updateOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of order you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2=
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Order
      summary: Delete an existing order
      description: Calls the delete() function in Order.php
      operationId: deleteOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of order you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getPositions':
    get:
      tags:
        - Order
      summary: Get all order positions
      description: Calls getPositions() in Order.php to get necessary variables
      operationId: OrderGetPositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the positions
          required: true
          type: integer
          default: null
        - name: withOptional
          in: query
          description: Define if you want optional order positions
          required: false
          type: boolean
          default: false
        - name: onlyChargeable
          in: query
          description: Define if you want only chargeable order positions
          required: false
          type: boolean
          default: false
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned order positions start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getDiscounts':
    get:
      tags:
        - Order
      summary: Get all order discounts
      description: >-
        Calls getDiscounts() in Order.php to get the discounts of the specified
        order
      operationId: getOrderDiscounts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the discounts
          required: true
          type: integer
          default: null
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned order positions start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Discounts'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/duplicate':
    post:
      tags:
        - Order
      summary: Duplicate an existing order
      description: Calls duplicate() in Order.php to duplicate an existing order
      operationId: duplicateOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order which you want to duplicate
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTotalCalc':
    get:
      tags:
        - Order
      summary: Get total gross amount of order
      description: >-
        Calls getTotalCalc() in Order.php to get the total gross amount of the
        specified order
      operationId: OrderGetTotalCalc
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the total gross amount
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTotalNet':
    get:
      tags:
        - Order
      summary: Get total net amount of order
      description: >-
        Calls getTotalNet() in Order.php to get the total net amount of the
        specified order
      operationId: OrderGetTotalNet
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the total net amount
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getChargeableSums':
    get:
      tags:
        - Order
      summary: 'Get total net, gross and tax amount of order'
      description: >-
        Calls getChargeableSums() in Order.php to get the total net, gross and
        tax amount of the specified order
      operationId: OrderGetChargeableSums
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the order of which you want to get the total net, gross and
            tax amount
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getChargeableInformation':
    get:
      tags:
        - Order
      summary: 'Get sum charged already, total net, gross and tax amount and tax rate'
      description: >-
        Calls getChargeableInformation() in Order.php to get the sum charged
        already, total net, gross and tax amount and tax rate of the specified
        order
      operationId: OrderGetChargeableInformation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the information
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTotal':
    get:
      tags:
        - Order
      summary: Get sum gross of the specified order
      description: >-
        Calls getTotal() in Order.php to get the sum gross of the specified
        order
      operationId: OrderGetTotal
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the sum gross
          required: true
          type: integer
          default: null
        - name: foreignCurrency
          in: query
          description: Specify if a foreign currency is used
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTax':
    get:
      tags:
        - Order
      summary: Get sum tax of the specified order
      description: Calls getTax() in Order.php to get the sum tax of the specified order
      operationId: OrderGetTax
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the sum tax
          required: true
          type: integer
          default: null
        - name: foreignCurrency
          in: query
          description: Specify if a foreign currency is used
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTaxGroupes':
    get:
      tags:
        - Order
      summary: Get tax groups of the specified order
      description: >-
        Calls getTaxGroupes() in Order.php to get the tax groups of the
        specified order
      operationId: OrderGetTaxGroupes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the tax groups
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/copy':
    post:
      tags:
        - Order
      summary: Copy an existing order
      description: "Calls copy() in Order.php to copy an existing order.\r\n\r\nThe new orders origin is the copied order, and its version is the copied orders version increased by one."
      operationId: copyOrder
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order which you want to copy
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/changeStatus':
    put:
      tags:
        - Order
      summary: Update status of an existing order
      description: Calls changeStatus() in Order.php to update the specified orders status
      operationId: OrderChangeStatus
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order of which you want to change the status
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Enter desired values after parameter= and remove the quotation marks!\r\n\r\nIf updateOther is set to 'true', changeStatus will also change other orders with the same order number.\r\n\r\nIf updateContactStatus is set to 'true', changeStatus will update the connected contacts category if necessary."
          schema:
            example: value=&updateOther=false&updateContactStatus=false
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getTags':
    get:
      tags:
        - Order
      summary: Get tags of the specified order
      description: Calls getTags() in Order.php to get the tags of the specified order
      operationId: OrderGetTags
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the tags
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/sendViaEmail':
    post:
      tags:
        - Order
      summary: Send an order via Email
      description: Calls sendViaEmail in Order.php
      operationId: sendOrderViaEmail
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order you want to send via Email
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Change the desired values after the parameters and remove the quotation marks. You can also add 'additionalAttachments', 'ccEmail=' and 'bccEmail'\r\n\r\nPlease note: additionalAttachments is a String containing document id's (of existing documents!)"
          required: true
          schema:
            example: >-
              toEmail=test@sevenit.de&subject=This is a test&text=Hello this is
              a test mail
          x-example: >-
            toEmail=test@sevenit.de&subject=This is a test&text=Hello this is a
            test mail
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Email'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/sendViaPost':
    post:
      tags:
        - Order
      summary: Send an order via post
      description: Calls sendViaPost() in Order.php
      operationId: sendOrderViaPost
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order you want to send via post
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/render':
    post:
      tags:
        - Order
      summary: Render the order document on doc server and return the metadata
      description: >-
        Calls render() in Order.php to render an order document on doc server
        and return the metadata
      operationId: OrderRender
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order you want to render
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getPdf':
    get:
      tags:
        - Order
      summary: Get the order as a pdf
      description: Calls getPdf() in Order.php
      operationId: OrderGetPdf
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the pdf
          required: true
          type: integer
          default: null
        - name: preventSendBy
          in: query
          description: Define if you want to prevent to send the order via pdf
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getRelatedObjects':
    get:
      tags:
        - Order
      summary: Get related objects of a specified order
      description: >-
        Calls getRelatedObjects() in Order.php to get related objects of the
        order
      operationId: OrderGetRelatedObjects
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to get the related objects
          required: true
          type: integer
          default: null
        - name: includeItself
          in: query
          description: Define if the related objects include the order itself
          required: false
          type: boolean
          default: false
        - name: sortByType
          in: query
          description: Define if you want the related objects sorted by type
          required: false
          type: boolean
          default: false
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/getMainOrderByLogs':
    get:
      tags:
        - Order
      summary: >-
        Get main order by checking if there are existing order logs of the
        specified order
      description: "Calls getMainOrderByLogs() in Order.php to get main order by checking if there are existing order logs of the specified order.\r\n\r\nIf the specified order is not the main order (eg. if there are no existing logs), this will return null!"
      operationId: OrderGetMainOrderByLogs
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the order of which you want to know if it is the main order
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Order/{id}/sendBy':
    put:
      tags:
        - Order
      summary: Send an order by the desired send type
      description: Calls sendBy() in Order.php to send the order by the desired send type
      operationId: OrderSendBy
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order which you want to send
          required: true
          type: integer
          default: null
        - name: sendType
          in: query
          description: >-
            Your desired send type. Available are: VM = Mail, VP = Post, VPDF =
            PDF, PRN = Print
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Order'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /OrderLog:
    get:
      tags:
        - OrderLog
      summary: Get an overview of order logs
      description: Calls OrderLog.php to get necessary variables
      operationId: getOrderLogs
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned order logs start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_OrderLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - OrderLog
      summary: Create a new order log
      description: Calls OrderLog.php
      operationId: addOrderLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an order log, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: >-
              date=&order[id]=&order[objectName]=Order&object[id]=&object[objectName]=&currency=EUR&amount=&taxRate=&amountType=
          x-example: >-
            date=&order[id]=&order[objectName]=Order&object[id]=&object[objectName]=&currency=EUR&amount=&taxRate=&amountType=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_OrderLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/OrderLog/{id}':
    put:
      tags:
        - OrderLog
      summary: Update an existing order log
      description: Calls OrderLog.php
      operationId: updateOrderLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order log you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create order log.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks!"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_OrderLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - OrderLog
      summary: Delete an existing order log
      description: Calls the delete() function in OrderLog.php
      operationId: deleteOrderLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of order log you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /OrderPos:
    get:
      tags:
        - OrderPos
      summary: Get an overview of all order positions
      description: Calls OrderPos.php to get necessary variables.
      operationId: getOrderPositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned order positions start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - OrderPos
      summary: Create a new order position
      description: "Calls OrderPos.php.\r\n\r\n As described in the Model_Order earlier, some of its parameters get their value from other models/functions.\r\n\r\n OrderPos is one of those Models and provides the ability to add products/parts to your order which fills values like sumNet,taxation, etc."
      operationId: addOrderPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create an order position, simply enter desired values after parameter= and remove the quotation marks.\r\n\r\n  Adds a product/part to an order with a price, quantity etc, therefore the order model gets sumNet and other parameters from it too"
          required: true
          schema:
            example: >-
              order[id]=194409&order[objectName]=Order&quantity=1&price=5.42&taxRate=19&unity[id]=1&unity[objectName]=Unity
          x-example: >-
            order[id]=194409&order[objectName]=Order&quantity=1&price=5.42&taxRate=19&unity[id]=1&unity[objectName]=Unity
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/OrderPos/{id}':
    put:
      tags:
        - OrderPos
      summary: Update an existing order position
      description: 'TODO: Enter short backend documentation here'
      operationId: updateOrderPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of order position you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create order position.\r\n\r\n    Enter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - OrderPos
      summary: Delete an existing order position
      description: >-
        Calls the delete() function in OrderPos.php. This does NOT delete an
        order, just the position which belonged to the order!
      operationId: deleteOrderPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of order position you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Order/Factory/getNextOrderNumber:
    get:
      tags:
        - Order
      summary: Get the next order number
      description: ''
      operationId: getNextOrderNumber
      consumes:
        - application/application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderType
          in: query
          description: defines the type of order you want to get the next number from
          required: true
          type: string
          default: AN
          enum:
            - AN
            - AB
            - LI
        - name: useNextNumber
          in: query
          description: >-
            By default this is true, so the orderNumber will increase by one
            otherwise the orderNumber will not change
          required: true
          type: boolean
          default: true
          enum:
            - 'true'
            - 'false'
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Part:
    get:
      tags:
        - Part
      summary: Get an overview of all parts
      description: Calls Part.php to get necessary variables.
      operationId: getParts
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned parts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Part'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Part
      summary: Create a new part
      description: Calls Part.php to add a part
      operationId: addPart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a part, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: >-
              partNumber=1111&name=test
              part&stock=10&taxRate=19&unity[id]=1&unity[objectName]=Unity&price=42.50&category[id]=1&category[objectName]=Category
          x-example: >-
            partNumber=1111&name=test
            part&stock=10&taxRate=19&unity[id]=1&unity[objectName]=Unity&price=42.50&category[id]=1&category[objectName]=Category
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Part'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}':
    put:
      tags:
        - Part
      summary: Update an existing part
      description: Calls PartContactPrice to update a part
      operationId: updatePart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of part you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Part'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Part
      summary: Delete an existing part
      description: >-
        Calls the delete() function in Part.php. Be aware that you can't delete
        parts which are used somewhere!
      operationId: deletePart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the part you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/book':
    put:
      tags:
        - Part
      summary: add / remove parts from the stock
      description: Calls book() in Part.php
      operationId: bookPart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of part of which you want to update the stock
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema:
            example: >-
              name=&amount=&date=&object[id]&object[objectName]=&supplier[id]=&supplier[objectName]=Contact
          x-example: >-
            name=&amount=&date=&object[id]&object[objectName]=&supplier[id]=&supplier[objectName]=Contact
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Part'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/getLastLog':
    get:
      tags:
        - Part
      summary: Get last log about the part
      description: >-
        Calls getLastLog() in Part.php to get the last log about the specified
        part
      operationId: PartGetLastLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the part of which you want to get the last log
          required: true
          type: integer
          default: null
        - name: maxDate
          in: query
          description: Sets the maximal date if required
          required: false
          type: string
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_InventoryPartLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/getStock':
    get:
      tags:
        - Part
      summary: Get stock of the part
      description: Calls getStock() in Part.php to get the stock of the specified part
      operationId: PartGetStock
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the part of which you want to get stock
          required: true
          type: integer
          default: null
        - name: maxDate
          in: query
          description: >-
            Sets the maximal date if required. The function will return the
            stock of the part at the specified date!
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/getStockBefore':
    get:
      tags:
        - Part
      summary: Get stock difference of the part before a specified date
      description: >-
        Calls getStockBefore() in Part.php to get the stock difference of the
        specified part before the specified date
      operationId: PartGetStockBefore
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the part of which you want to get the stock difference
          required: true
          type: integer
          default: null
        - name: date
          in: query
          description: >-
            You will get the stock difference before this specified date,
            otherwise the current date will be used
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/getPrice':
    get:
      tags:
        - Part
      summary: Get price of a specified part
      description: Calls getPrice() in Part.php to get the price of the specified part
      operationId: PartGetPrice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the part of which you want to get the price
          required: true
          type: integer
          default: null
        - name: 'contact[id]'
          in: query
          description: Enter valid contact id here for getting a part contact price
          required: false
          type: integer
          default: null
        - name: 'contact[objectName]'
          in: query
          description: Enter 'Contact' here for getting a part contact price
          required: false
          type: string
          default: null
        - name: 'partUnity[id]'
          in: query
          description: Enter a valid part unity id here for getting a part unity price
          required: false
          type: integer
          default: null
        - name: 'partUnity[objectName]'
          in: query
          description: Enter 'PartUnity' here for getting a part unity price
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Part/{id}/duplicate':
    post:
      tags:
        - Part
      summary: Duplicate an existing part
      description: >-
        Calls duplicate() in Part.php to duplicate the specified part. Mind that
        the stock will be zero
      operationId: duplicatePart
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the part which you want to duplicate
          required: true
          type: integer
          default: null
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Part'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /PartContactPrice:
    get:
      tags:
        - PartContactPrice
      summary: Get an overview of all part contact prices
      description: Calls PartContactPrice.php to get necessary variables.
      operationId: getPartContactPrices
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned part contact prices start. Default
            is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PartContactPrice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - PartContactPrice
      summary: Create a new part contact price
      description: Calls PartContactPrice.php to add a part contact price
      operationId: addPartContactPrice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a part contact price, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              contact[id]=&contact[objectName]=Contact&part[id]=&part[objectName]=Part&type=&priceNet=&priceGross=
          x-example: >-
            contact[id]=&contact[objectName]=Contact&part[id]=&part[objectName]=Part&type=&priceNet=&priceGross=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_PartContactPrice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/PartContactPrice/{id}':
    put:
      tags:
        - PartContactPrice
      summary: Update an existing part contact price
      description: Calls PartContactPrice.php to update a part contact price
      operationId: updatePartContactPrice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of part contact price you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PartContactPrice'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - PartContactPrice
      summary: Delete an existing part contact price
      description: Calls PartContactPrice.php to delete a part contact price
      operationId: deletePartContactPrice
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the part contact price you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /PartUnity:
    get:
      tags:
        - PartUnity
      summary: Get an overview of all part unities
      description: Calls PartUnity.php to get necessary variables.
      operationId: getPartUnities
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned part unities start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PartUnity'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - PartUnity
      summary: Create a new part unity
      description: Calls PartUnity.php to add a part unity
      operationId: addPartUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a part unity, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: >-
              part[id]=&part[objectName]=Part&price=&factor=1&unity[id]=&unity[objectName]=Unity
          x-example: >-
            part[id]=&part[objectName]=Part&price=&factor=1&unity[id]=&unity[objectName]=Unity
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_PartUnity'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/PartUnity/{id}':
    put:
      tags:
        - PartUnity
      summary: Update an existing part unity
      description: Calls PartUnity.php to update a part unity
      operationId: updatePartUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of part unity you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PartUnity'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - PartUnity
      summary: Delete an existing part unity
      description: Calls PartUnity.php to delete a part unity
      operationId: deletePartUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the part unity you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /PaymentMethod:
    get:
      tags:
        - PaymentMethod
      summary: Get an overview of all payment methods
      description: Calls PaymentMethod.php to get necessary variables.
      operationId: getPaymentMethods
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned payment methods start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PaymentMethod'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - PaymentMethod
      summary: Create a new payment method
      description: Calls PaymentMethod.php to create a payment method
      operationId: addPaymentMethod
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            write desired values behind the = and remove the quotation marks to
            create a payment method
          required: true
          schema:
            example: name=&text=
          x-example: name=&text=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_PaymentMethod'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/PaymentMethod/{id}':
    put:
      tags:
        - PaymentMethod
      summary: Update an existing payment method
      description: Calls PaymentMethod.php to update a payment method
      operationId: updatePaymentMethod
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of payment method you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create payment method.\r\n\r\n    Enter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_PaymentMethod'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - PaymentMethod
      summary: Delete an existing payment method
      description: Calls the delete() function in PaymentMethod.php
      operationId: deletePaymentMethod
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of payment method you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Place:
    get:
      tags:
        - Place
      summary: Get an overview of all places
      description: "Calls Place.php to get necessary variables.\r\n\r\nIt is recommended to set limit and offset appropriately as there are over 5000 entries for place!"
      operationId: getPlaces
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 1000
          required: false
          type: integer
          default: 1000
        - name: offset
          in: query
          description: Set the index where the returned places start. Default is 0
          required: false
          type: integer
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Place'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/contact:
    get:
      tags:
        - Report
      summary: Export the contact
      description: "Calls contact() in Report.php to export the contact.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportContact
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: true
          type: boolean
          default: true
        - name: 'contact[id]'
          in: query
          description: Id of contact which should be exported
          required: true
          type: integer
          default: null
        - name: 'contact[objectName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Contact
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/contactlist:
    get:
      tags:
        - Report
      summary: Export the contact list
      description: "Calls contactlist() in Report.php to export the contact list.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportContactList
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported contacts
          required: false
          type: integer
          default: 99999
        
        - name: 'sevQuery[offset]'
          in: query
          description: Set the index where the exported contacts start
          required: false
          type: integer
          default: 0
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Contact
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/inventory:
    get:
      tags:
        - Report
      summary: Export the inventory
      description: "Calls inventory() in Report.php to export the inventory.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportInventory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported inventory entries
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[offset]'
          in: query
          description: Set the index where the exported parts start
          required: false
          type: integer
          default: 99999
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Part
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/invoicelist:
    get:
      tags:
        - Report
      summary: Export the invoicelist
      description: "Calls invoicelist() in Report.php to export the invoices.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportInvoiceList
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported invoices
          required: false
          type: integer
          default: '99999'
        - name: 'sevQuery[offset]'
          in: query
          description: Set the index where the exported invoices should start
          required: false
          type: integer
          default: 0
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Invoice
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/voucherlist:
    get:
      tags:
        - Report
      summary: Export the voucher list
      description: "Calls voucherlist() in Report.php to export the vouchers.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportVoucherList
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[filter][startDate]'
          in: query
          description: Start date to filter vouchers with
          required: true
          type: string
          default: null
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported vouchers
          required: false
          type: integer
          default: '99999'
        - name: 'sevQuery[offset]'
          in: query
          description: Set the index where the exported vouchers should start
          required: false
          type: integer
          default: 0
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Voucher
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/orderlist:
    get:
      tags:
        - Report
      summary: Export the order list
      description: "Calls orderlist() in Report.php to export the orders.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportOrderList
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'sevQuery[limit]'
          in: query
          description: Limit exported orders
          required: false
          type: integer
          default: '99999'
        - name: 'sevQuery[offset]'
          in: query
          description: Set the index where the exported orders should start
          required: false
          type: integer
          default: 0
        - name: 'sevQuery[modelName]'
          in: query
          description: Model name which is exported
          required: true
          type: string
          default: Order
        - name: 'sevQuery[objectName]'
          in: query
          description: SevQuery object name
          required: true
          type: string
          default: SevQuery
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/profitAndLoss:
    get:
      tags:
        - Report
      summary: Export the profit and loss
      description: "Calls profitAndLoss() in Report.php to export the profit and loss.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportProfitAndLoss
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: startDate
          in: query
          description: Start date of the profit and loss calculation
          required: true
          type: string
          default: null
        - name: endDate
          in: query
          description: End date of the profit and loss calculation
          required: true
          type: string
          default: null
        - name: taxRule
          in: query
          description: Specify if you want the net income method or the profit and loss
          required: true
          type: boolean
          default: true
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Report/registerBook:
    get:
      tags:
        - Report
      summary: Export the register book / cash report
      description: "Calls registerBook() in Report.php to export the register book / cash report.\r\n\r\nWith **sevQuery[filter][yourFilter]**, you can filter the entries you want to export. For this, just switch 'yourFilter' with some parameter the involved model would normally take.\r\n\r\n**Currently there is a problem with swagger understanding return type 'file', so the api will respond accordingly but swagger ui can not display it correctly.**"
      operationId: ReportRegisterBook
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: download
          in: query
          description: Specifies if the document is downloaded
          required: false
          type: boolean
          default: true
        - name: 'checkAccount[id]'
          in: query
          description: Check account you want to export
          required: true
          type: integer
          default: null
        - name: 'checkAccount[objectName]'
          in: query
          description: Check account object name
          required: true
          type: string
          default: CheckAccount
        - name: startDate
          in: query
          description: Start date of the register book / cash report
          required: true
          type: string
          default: null
        - name: endDate
          in: query
          description: End date of the register book / cash report
          required: true
          type: string
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            type: file
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Search/search:
    get:
      tags:
        - Search
      summary: Search for a specified term
      description: "Calls search() in Search.php to search with a specified term in Contacts, Orders, Invoices, Vouchers, Documents and Parts.\r\n\r\nIt is also possible to search without defining a model, so sevDesk system operations will also be shown."
      operationId: Search
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: embed
          in: query
          description: ''
          required: false
          type: string
          default: 'contact,contact.parent,parent'
        - name: term
          in: query
          description: Term you want to search
          required: false
          type: string
          default: null
        - name: searchType
          in: query
          description: Specify a type (model) that you want to have searched
          required: false
          type: array
          items:
            type: string
            enum:
              - CONTACT
              - ORDER
              - INVOICE
              - VOUCHER
              - DOCUMENT
              - PART
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevClient/getSevDeskAccountInvoices:
    get:
      tags:
        - SevClient
      summary: Get sevDesk account invoices
      description: Get sevDesk account invoices
      operationId: SevClientGetSevDeskAccountInvoices
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevClientConfig:
    get:
      tags:
        - SevClientConfig
      summary: Get an overview of your sevClient config
      description: Calls SevClientConfig.php to get necessary variables.
      operationId: getSevClientConfig
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SevClientConfig'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/SevClientConfig/{id}':
    put:
      tags:
        - SevClientConfig
      summary: Update an existing sevClient config
      description: Calls SevClientConfig.php
      operationId: updateSevClientConfig
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of sevClient config you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create sevClient config.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SevClientConfig'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevSequence:
    get:
      tags:
        - SevSequence
      summary: Get an overview of all object sequences
      description: Calls SevSequence.php to get necessary variables.
      operationId: getSevSequence
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned check accounts start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SevSequence'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevToken:
    get:
      tags:
        - SevToken
      summary: Get an overview of all sevTokens
      description: Calls SevToken.php to get necessary variables.
      operationId: getSevTokens
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned sevTokens start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SevToken'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser:
    get:
      tags:
        - SevUser
      summary: Get an overview of your sevUser
      description: Calls SevUser.php to get necessary variables.
      operationId: getSevUser
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SevUser'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser/getApiToken:
    get:
      tags:
        - SevUser
      summary: Get the api token of your user
      description: >-
        Calls getApiToken() in SevUser.php to get the api token of your user. Be
        aware that this only works if your sevUser has certain privileges!
      operationId: SevUserGetApiToken
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser/isAllowed:
    get:
      tags:
        - SevUser
      summary: Return if user has access to a specific resource
      description: >-
        Calls isAllowed() in SevUser.php to return if a user is allowed to
        access a certain resource
      operationId: SevUserIsAllowed
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser/getJwt:
    get:
      tags:
        - SevUser
      summary: Get Json Web Token of the user
      description: Calls getJwt() in SevUser.php to return the Json Web Token of the user.
      operationId: SevUserGetJwt
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser/getInstance:
    get:
      tags:
        - SevUser
      summary: Get instance of the sevUser
      description: >-
        Calls getInstance() in SevUser.php to return the instance of the
        sevUser.
      operationId: SevUserGetInstance
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SevUser/getQRLoginData:
    get:
      tags:
        - SevUser
      summary: Get QR login data of the sevUser
      description: >-
        Calls getQRLoginData() in SevUser.php to return the QR login data of the
        sevUser. Be aware that this only works if your sevUser has certain
        privileges!
      operationId: SevUserGetQRLoginData
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /StaticCountry:
    get:
      tags:
        - StaticCountry
      summary: Get staticCountry list
      description: >-
        Calls StaticCountry.php to return the staticCountry list which is
        basically the list of countries.
      operationId: getStaticCountry
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /StaticIndustry:
    get:
      tags:
        - StaticCountry
      summary: Get staticIndustry list
      description: >-
        Calls StaticIndustry.php to return the staticIndustry list which is
        basically the list of industries.
      operationId: getStaticIndustry
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /StaticReferralProgram:
    get:
      tags:
        - StaticReferralProgram
      summary: Get staticReferralProgram list
      description: >-
        Calls StaticReferralProgram.php to return the staticReferralProgram list
        which is basically the list of referral programs.
      operationId: getStaticReferralPrograms
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_StaticReferralProgram'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SubscriptionHistory:
    get:
      tags:
        - SubscriptionHistory
      summary: Get an overview of your subscription history
      description: Calls SubscriptionHistory.php to get necessary variables.
      operationId: getSubscriptionHistory
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SubscriptionHistory'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SubscriptionType:
    get:
      tags:
        - SubscriptionType
      summary: Get an overview of all subscription types
      description: Calls SubscriptionType.php to get necessary variables.
      operationId: getSubscriptionTypes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SubscriptionType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /SwissEsr:
    get:
      tags:
        - SwissEsr
      summary: Get an overview of swiss esr
      description: Calls SwissEsr.php to get necessary variables.
      operationId: getSwissEsr
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_SwissEsr'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Tag:
    get:
      tags:
        - Tag
      summary: Get an overview of all tags
      description: Calls Tag.php to get necessary variables.
      operationId: getTags
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned tags start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Tag'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Tag
      summary: Create a new tag
      description: Calls Tag.php to create a new tag
      operationId: addTag
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a tag, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: name=
          x-example: name=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Tag'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Tag/{id}':
    put:
      tags:
        - Tag
      summary: Update an existing tag
      description: Calls Tag.php to update an existing tag
      operationId: updateTag
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tag you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create tag.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema:
            example: name=
          x-example: name=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Tag'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Tag
      summary: Delete an existing tag
      description: Calls the delete() function in Tag.php
      operationId: deleteTag
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tag you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /TagRelation:
    get:
      tags:
        - TagRelation
      summary: Get an overview of all tag relations
      description: Calls TagRelation.php to get necessary variables.
      operationId: getTagRelations
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned tag relations start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TagRelation'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - TagRelation
      summary: Create a new tag relation
      description: Calls TagRelation.php to create a new tag
      operationId: addTagRelation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a tag relation, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: 'tag[id]=&tag[objectName]=Tag&object[id]=&object[objectName]='
          x-example: 'tag[id]=&tag[objectName]=Tag&object[id]=&object[objectName]='
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_TagRelation'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/TagRelation/{id}':
    put:
      tags:
        - TagRelation
      summary: Update an existing tag relation
      description: Calls TagRelation.php to update an existing tag
      operationId: updateTagRelation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tag relation you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create tag relation.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TagRelation'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - TagRelation
      summary: Delete an existing tag relation
      description: Calls the delete() function in TagRelation.php
      operationId: deleteTagRelation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tag relation you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Task:
    get:
      tags:
        - Task
      summary: Get an overview of all tasks
      description: Calls Task.php to get necessary variables.
      operationId: getTasks
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned tasks start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Task'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Task
      summary: Create a new task
      description: Calls Task.php to add a task
      operationId: addTask
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a task, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: >-
              name=&assigned[id]=&assigned[objectName]=SevUser&category[id]=38&category[objectName]=Category&
              createUser[id]=&createUser[objectName]=SevUser&noticeCreator=0&deadline=01.01.1997&status=100&object[id]=&object[objectName]=
          x-example: >-
            name=&assigned[id]=&assigned[objectName]=SevUser&category[id]=38&category[objectName]=Category&
            createUser[id]=&createUser[objectName]=SevUser&noticeCreator=0&deadline=01.01.1997&status=100&object[id]=&object[objectName]=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Task/{id}':
    put:
      tags:
        - Task
      summary: Update an existing Task
      description: 'TODO: Enter short backend documentation here'
      operationId: updateTask
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of task you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema:
            example: >-
              name=&assigned[id]=&assigned[objectName]=SevUser&category[id]=38&category[objectName]=Category&
              createUser[id]=&createUser[objectName]=SevUser&noticeCreator=0&deadline=01.01.1997&status=100&object[id]=&object[objectName]=
          x-example: >-
            name=&assigned[id]=&assigned[objectName]=SevUser&category[id]=38&category[objectName]=Category&
            createUser[id]=&createUser[objectName]=SevUser&noticeCreator=0&deadline=01.01.1997&status=100&object[id]=&object[objectName]=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Task'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Task
      summary: Delete an existing task
      description: 'TODO: Write backend documentation'
      operationId: deleteTask
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the task you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /TaxSet:
    get:
      tags:
        - TaxSet
      summary: Get an overview of all tax sets
      description: Calls TaxSet.php to get necessary variables.
      operationId: getTaxSets
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned tax sets start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TaxSet'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - TaxSet
      summary: Create a new tax set
      description: Calls TaxSet.php to create a new tax set
      operationId: addTaxSet
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a tax set, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: text=&taxRate=&showInvoice=&showDebitVoucher=&showCreditVoucher=
          x-example: text=&taxRate=&showInvoice=&showDebitVoucher=&showCreditVoucher=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_TaxSet'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/TaxSet/{id}':
    put:
      tags:
        - TaxSet
      summary: Update an existing tax set
      description: Calls TaxSet.php to update an existing tax set
      operationId: updateTaxSet
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tax set you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create tax set.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TaxSet'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - TaxSet
      summary: Delete an existing tax set
      description: Calls the delete() function in TaxSet.php
      operationId: deleteTaxSet
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of tax set you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /TextTemplate:
    get:
      tags:
        - TextTemplate
      summary: Get an overview of all text template
      description: Calls TextTemplate.php to get necessary variables.
      operationId: getTextTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned text templates start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TextTemplate'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - TextTemplate
      summary: Create a new text template
      description: Calls TextTemplate.php to create a new text template
      operationId: addTextTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a text template, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: name=&text=&objectType=&textType=
          x-example: name=&text=&objectType=&textType=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_TextTemplate'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/TextTemplate/{id}':
    put:
      tags:
        - TextTemplate
      summary: Update an existing text template
      description: Calls TextTemplate.php to update an existing text template
      operationId: updateTextTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of text template you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create text template.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2="
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_TextTemplate'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - TextTemplate
      summary: Delete an existing text template
      description: Calls TextTemplate.php to delete a text template
      operationId: deleteTextTemplate
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of text template you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Unity:
    get:
      tags:
        - Unity
      summary: Get an overview of all unities
      description: Calls Unity.php to get necessary variables.
      operationId: getUnities
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned unities start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Unity'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Unity
      summary: Create a new unity
      description: Calls Unity.php to add an unity
      operationId: addUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create an unity, simply enter desired values after parameter= and
            remove the quotation marks.
          required: true
          schema:
            example: name=
          x-example: name=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_OrderPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Unity/{id}':
    put:
      tags:
        - Unity
      summary: Update an existing Unity
      description: 'TODO: Enter short backend documentation here'
      operationId: updateUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of unity you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Parameters which need to be updated. Enter the parameters according
            to the syntax: parameter1=&parameter2= and remove the quotation
            marks
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Unity'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Unity
      summary: Delete an existing unity
      description: >-
        Calls the delete() function in Unity.php. Be aware that you can't delete
        unities which are used somewhere!
      operationId: deleteUnity
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id of the unity you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /VatReport:
    get:
      tags:
        - VatReport
      summary: Get a vat report for a defined period of time
      description: Calls VatReport.php to get necessary variables.
      operationId: getVatReport
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: reportingYear
          in: query
          description: Year for which you want to have a vat report
          required: true
          type: integer
          default: null
        - name: reportingPeriodCode
          in: query
          description: Define the period for your vat report
          required: true
          type: string
          default: monthly
          enum:
            - monthly
            - quarterly
        - name: noActualTaxationOnInputTax
          in: query
          description: Define if you want actual taxation on input tax
          required: true
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Voucher:
    get:
      tags:
        - Voucher
      summary: Get an overview of all vouchers
      description: Calls Voucher.php to get necessary variables.
      operationId: getVouchers
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: Set the index where the returned vouchers start. Default is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - Voucher
      summary: Create a new voucher
      description: Calls Voucher.php to create a voucher
      operationId: addVoucher
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "To create a voucher, simply enter desired values after parameter= and remove the quotation marks.\r\n\r\n  Be aware that you can't use all the parameters included in the Model_Voucher, as creating a voucher involves other functions.\r\n\r\n  So for example, adding a sumNet/Gross/etc. does not work as they normally get their value from the product which is involved in the voucher\r\n\r\n  The product/part in this case is handled in the Model_VoucherPos which makes a call to Model_Part."
          required: true
          schema:
            example: >-
              voucherType=VOU&description=&status=&supplier[id]=&supplier[objectName]=Contact&voucherDate=&paymentDeadline=&taxType=default&creditDebit=C
          x-example: >-
            voucherType=VOU&description=&status=&supplier[id]=&supplier[objectName]=Contact&voucherDate=&paymentDeadline=&taxType=default&creditDebit=C
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}':
    put:
      tags:
        - Voucher
      summary: Update an existing voucher
      description: Calls Voucher.php to update an existing voucher
      operationId: updateVoucher
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create invoice.\r\n\r\n  Enter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - Voucher
      summary: Delete an existing voucher
      description: Calls the delete() function in Voucher.php
      operationId: deleteVoucher
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of voucher you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getTaxGroupes':
    get:
      tags:
        - Voucher
      summary: Get an overview of all vouchers
      description: Calls Voucher.php to get necessary variables.
      operationId: VoucherGetTaxGroups
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher you want to update
          required: true
          type: integer
          default: null
        - name: showTotalSum
          in: query
          description: Define if you want to have the total sum of each tax group
          required: true
          type: boolean
          default: false
          enum:
            - 'true'
            - 'false'
        - name: withCorrections
          in: query
          description: Define if you want to have the total sum with corrections
          required: true
          type: boolean
          default: false
          enum:
            - 'true'
            - 'false'
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/deleteDocument':
    delete:
      tags:
        - Voucher
      summary: Delete the document of an existing voucher
      description: >-
        Calls the deleteDocument() function in Voucher.php to delete the
        document of an existing voucher
      operationId: VoucherDeleteDocument
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to delete the document
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/markAsOpen':
    put:
      tags:
        - Voucher
      summary: Mark a specified voucher as open
      description: Mark the specified voucher as open
      operationId: VoucherMarkAsOpen
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher you want to mark as open
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/markAsPaid':
    put:
      tags:
        - Voucher
      summary: Mark a specified voucher as paid
      description: Mark the specified voucher as paid
      operationId: VoucherMarkAsPaid
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher you want to mark as paid
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter the date the voucher was paid here, using the format
            DD.MM.YYYY!
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/refundAmmount':
    put:
      tags:
        - Voucher
      summary: Refund an amount for a specified voucher
      description: Refund an amount for the specified voucher
      operationId: VoucherRefundAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher for which you want to refund an amount
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            Enter the amount which should be refunded, the date of the refund
            (format DD.MM.YYYY) and if it should appear in the feed an remove
            the quotation marks!
          schema:
            example: ammount=&date=&createFeed=
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_VoucherLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      deprecated: true
      security:
        - api_key: []
  '/Voucher/{id}/bookAmmount':
    put:
      tags:
        - Voucher
      summary: Book an amount for a specified voucher
      description: Book an amount for the specified voucher
      operationId: VoucherBookAmount
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher for which you want to book an amount
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            To book an amount for your voucher, simply enter desired values
            after parameter= and remove the quotation marks.
          schema:
            example: >-
              ammount=&date=&type=N&checkAccount[id]=&checkAccount[objectName]=&checkAccountTransaction[id]=&checkAccountTransaction[objectName]=&createFeed=
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      deprecated: true
      security:
        - api_key: []
  '/Voucher/{id}/getDebit':
    get:
      tags:
        - Voucher
      summary: Get unpaid amount of a specified voucher
      description: >-
        Calls getDebit() in Voucher.php to get the unpaid amount of a specified
        voucher
      operationId: VoucherGetDebit
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to get the unpaid amount
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getDocumentImage':
    get:
      tags:
        - Voucher
      summary: Returns the base64 encoded preview content of the vouchers document
      description: >-
        Calls getDocumentImage() in Voucher.php to return the base64 encoded
        preview content of the vouchers document
      operationId: VoucherGetDocumentImage
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to get the document image
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getCurrency':
    get:
      tags:
        - Voucher
      summary: Get the currency of a specified voucher
      description: >-
        Calls getCurrency() in Voucher.php to get the currency of the specified
        voucher
      operationId: VoucherGetCurrency
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to get the currency
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      deprecated: true
      security:
        - api_key: []
  '/Voucher/{id}/getCheckAccountTransactions':
    get:
      tags:
        - Voucher
      summary: Get the check account transactions of a specified voucher
      description: >-
        Calls getCheckAccountTransactions() in Voucher.php to get the check
        account transactions of the specified voucher
      operationId: VoucherGetCheckAccountTransactions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the voucher of which you want to get the check account
            transactions
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getCheckAccountTransactionLogs':
    get:
      tags:
        - Voucher
      summary: Get the check account transaction logs of a specified voucher
      description: >-
        Calls getCheckAccountTransactionLogs() in Voucher.php to get the check
        account transaction logs of the specified voucher
      operationId: VoucherGetCheckAccountTransactionLogs
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the voucher of which you want to get the check account
            transaction logs
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getDependingRecurringVouchers':
    get:
      tags:
        - Voucher
      summary: Get the depending recurring vouchers of a specified origin voucher
      description: >-
        Calls getDependingRecurringVouchers() in Voucher.php to get the
        depending recurring vouchers of the specified origin voucher
      operationId: VoucherGetDependingRecurringVouchers
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the voucher of which you want to get the depending recurring
            vouchers
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Voucher'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getAccountingTypes':
    get:
      tags:
        - Voucher
      summary: Get the accounting types of a specified voucher
      description: >-
        Calls getAccountingTypes() in Voucher.php to get the accounting types of
        the specified voucher
      operationId: VoucherGetAccountingTypes
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to get the accounting types
          required: true
          type: integer
          default: null
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_AccountingType'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/changeStatus':
    put:
      tags:
        - Voucher
      summary: Change status of a specified voucher
      description: Change the status of the specified voucher
      operationId: VoucherChangeStatus
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to change the status
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: >-
            To change the status of your voucher, simply enter desired values
            after parameter= and remove the quotation marks.
          schema:
            example: value=
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/Voucher/{id}/getDelinquent':
    get:
      tags:
        - Voucher
      summary: Return if the voucher is delinquent
      description: Calls getDelinquent() in Voucher.php to get if the voucher is delinquent
      operationId: VoucherGetDelinquent
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher of which you want to know if it is delinquent
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /VoucherLog:
    get:
      tags:
        - VoucherLog
      summary: Get an overview of all voucher log entries
      description: Calls VoucherLog.php to get necessary variables.
      operationId: getVoucherLog
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned voucher log entries start. Default
            is 0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_VoucherLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - VoucherLog
      summary: Create a new voucher log entry
      description: Calls VoucherLog.php to create a voucher log entry
      operationId: addVoucherLogEntry
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a voucher, simply enter desired values after parameter=
            and remove the quotation marks.
          required: true
          schema:
            example: >-
              voucher[id]=&voucher[objectName]=Voucher&fromStatus=&toStatus=&amountPayed=&bookingDate=
          x-example: >-
            voucher[id]=&voucher[objectName]=Voucher&fromStatus=&toStatus=&amountPayed=&bookingDate=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_VoucherLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/VoucherLog/{id}':
    put:
      tags:
        - VoucherLog
      summary: Update an existing voucher log entry
      description: Calls VoucherLog.php to update an existing voucher log entry
      operationId: updateVoucherLogEntry
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher log entry you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create voucher log entry.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_VoucherLog'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - VoucherLog
      summary: Delete an existing voucher log entry
      description: >-
        Calls the delete() function in VoucherLog.php to delete a voucher log
        entry
      operationId: deleteVoucherLogEntry
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of voucher log entry you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /VoucherPos:
    get:
      tags:
        - VoucherPos
      summary: Get an overview of all voucher positions
      description: Calls VoucherPos.php to get necessary variables.
      operationId: getVoucherPositions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: Limits the number of entries returned. Default is 100
          required: false
          type: integer
          default: 100
        - name: offset
          in: query
          description: >-
            Set the index where the returned voucher positions start. Default is
            0
          required: false
          type: integer
          default: 0
        - name: embed
          in: query
          description: >-
            Get some additional information. Embed can handle multiple values,
            they must be separated by comma. Default ``.
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_VoucherPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    post:
      tags:
        - VoucherPos
      summary: Create a new voucher position
      description: Calls VoucherPos.php to create a voucher position
      operationId: addVoucherPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: >-
            To create a voucher position, simply enter desired values after
            parameter= and remove the quotation marks.
          required: true
          schema:
            example: >-
              voucher[id]=&voucher[objectName]=Voucher&taxRate=&sum=&accountingType[id]=&accountingType[objectName]=AccountingType&isAsset=
          x-example: >-
            voucher[id]=&voucher[objectName]=Voucher&taxRate=&sum=&accountingType[id]=&accountingType[objectName]=AccountingType&isAsset=
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_VoucherPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/VoucherPos/{id}':
    put:
      tags:
        - VoucherPos
      summary: Update an existing voucher position
      description: Calls VoucherPos.php to update an existing voucher position
      operationId: updateVoucherPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the voucher position you want to update
          required: true
          type: integer
          default: null
        - name: body
          in: body
          description: "Parameters which need to be updated. Please refer to the description from create voucher position.\r\n\r\nEnter the parameters according to the syntax: parameter1=&parameter2= and remove the quotation marks"
          schema: {}
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_VoucherPos'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
    delete:
      tags:
        - VoucherPos
      summary: Delete an existing voucher position
      description: >-
        Calls the delete() function in VoucherPos.php to delete a voucher
        position
      operationId: deleteVoucherPos
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of voucher position you want to delete
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: deleted
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/VoucherPos/{id}/getAssetInstance':
    get:
      tags:
        - VoucherPos
      summary: Get the asset which is connected to a specified voucher position
      description: >-
        Calls getAssetInstance() in VoucherPos.php to get the asset which is
        connected to the specified voucher position
      operationId: VoucherPosGetAssetInstance
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the voucher position of which you want to get the connected
            asset
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Model_Asset'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  '/VoucherPos/{id}/getAdditionalInfo':
    get:
      tags:
        - VoucherPos
      summary: >-
        Get additional information about the asset which is connected to a
        specified voucher position
      description: >-
        Calls getAdditionalInformation() in VoucherPos.php to get additional
        information about the asset which is connected to the specified voucher
        position
      operationId: VoucherPosGetAdditionalInformation
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: >-
            Id of the voucher position of which you want to get additional
            information about the connected asset
          required: true
          type: integer
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Voucher/Factory/saveVoucher:
    post:
      tags:
        - Voucher
      summary: Create a new voucher
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the model.php itself still constructs the model however new instances of the model are created trough the factory.php\r\n\r\nSo for example when you create a new voucher it wont be saved by a POST request with '/Voucher?para1=&...' but with the saveVoucher function in Factory.php 'Voucher/Factory/saveVoucher?para1='"
      operationId: saveVoucher
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: body
          in: body
          description: "The saveVoucher function in Voucher/Factory.php combines both Voucher and VoucherPos with all their HTTP-methods.\r\n\r\nIt is now possible to **simultaneously** create a voucher with its position.\r\n\r\nTo simply (only) create a voucher you can use the given parameters and concatenate your values.\r\n\r\nFor also adding a voucher position refer to the **quick reference** below.\r\n\r\nThe parameters you find there are **needed** for creating a voucher position. Just concatenate them to the existing voucher parameters.\r\n\r\nYou can also find additional (optional) parameters in the **Models** section.\r\n\r\nQuick reference:\r\n* &voucherPosSave[0][accountingType][id]=\r\n* &voucherPosSave[0][accountingType][objectName]=AccountingType\r\n* &voucherPosSave[0][taxRate]=19\r\n* &voucherPosSave[0][sum]=\r\n* &voucherPosSave[0][objectName]=VoucherPos\r\n* &voucherPosSave[0][mapAll]=true\r\n* &voucherPosDelete=true/false <-- if you provide this parameter, you can delete a voucher position\r\n\r\nYou can also use additional parameters for creating a voucher in the same way by adding them in the format: **voucher[yourParameter]** "
          required: true
          schema:
            example: >-
              voucher[voucherDate]=&voucher[supplier][id]=&voucher[supplier][objectName]=Contact&voucher[description]=&voucher[payDate]=&voucher[status]=&voucher[sumNet]=0  
              &voucher[sumTax]=0&voucher[sumGross]=0&voucher[sumNetAccounting]=0&voucher[sumTaxAccounting]=0&voucher[sumGrossAccounting]=0&voucher[taxType]=default  
              &voucher[creditDebit]=D&voucher[voucherType]=VOU&voucher[recurringStartDate]=&voucher[recurringNextVoucher]=&voucher[enshrined]=0&voucher[paymentDeadline]=  
              &voucher[objectName]=Voucher&voucher[mapAll]=true&voucher[total]=0&existenceCheck=true
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Voucher_Factory'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Voucher/Factory/uploadTempFile:
    post:
      tags:
        - Voucher
      summary: Upload a temporary file to be used later
      description: "With the new version of sevdesk some models are not created by calling the Model.php directly but by calling the Factory.php because of better performance and flexibility.\r\n\r\nBasically the model.php itself still constructs the model however new instances of the model are created trough the factory.php\r\n\r\nSo for example when you create a new voucher it wont be saved by a POST request with '/Voucher?para1=&...' but with the saveVoucher function in Factory.php 'Voucher/Factory/saveVoucher?para1='"
      operationId: VoucherUploadTempFile
      consumes:
        - multipart/form-data
      produces:
        - application/xml
        - application/json
      parameters:
        - name: file
          in: formData
          description: file to upload
          required: true
          type: file
      responses:
        '201':
          description: created
          schema:
            $ref: '#/definitions/Model_Voucher_Factory'
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
  /Voucher/Factory/extractThumb:
    get:
      tags:
        - Voucher
      summary: Extract file thumb
      description: >-
        Calls extractThumb() in Voucher/Factory.php to extract the thumb of the
        specified file
      operationId: VoucherExtractThumb
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/pdf
      parameters:
        - name: fileName
          in: query
          description: Name of the file of which you want to extract the thumb
          required: false
          type: string
          default: null
      responses:
        '200':
          description: successful operation
        '400':
          description: invalid request
        '401':
          description: authentication required
      security:
        - api_key: []
definitions:
  Model_AccountingChart:
    properties:
      _create:
        description: creation date of the accounting chart
        type: string
        format: date-time
      _update:
        description: date the accounting chart was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name:
        description: ''
        type: string
    type: object
    xml:
      name: AccountingChart
  Model_AccountingContact:
    properties:
      _create:
        description: date the accounting contact was created
        type: string
        format: date-time
      _update:
        description: date the accounting contact was last updated
        type: string
        format: date-time
      _contact:
        description: ''
        type: object
        $ref: '#/definitions/Model_Contact'
      _contactName:
        description: ''
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _debitorNumber:
        description: ''
        type: integer
      _creditorNumber:
        description: ''
        type: integer
    type: object
    xml:
      name: AccountingContact
  Model_AccountingCorrection:
    properties:
      _create:
        description: date the accounting correction was created
        type: string
        format: date-time
      _update:
        description: date the accounting correction was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _object:
        description: object which is involved in the correction (eg. an invoice)
        type: object
      _accountingType:
        description: accounting type affected by the accounting correction
        type: object
      _ammount:
        description: amount of the correction
        type: number
        format: float
      _enshrined:
        description: ''
        type: boolean
    type: object
    xml:
      name: AccountingCorrection
  Model_AccountingIndex:
    properties:
      _sevClient:
        description: date the accounting index was created
        type: string
        format: date-time
      _keyword:
        description: ''
        type: string
      _accountingType:
        description: ''
        type: object
      _taxType:
        description: ''
        type: string
      _country:
        description: ''
        type: object
    type: object
    xml:
      name: AccountingIndex
  Model_AccountingSystem:
    properties:
      _create:
        description: creation date of the accounting system
        type: string
        format: date-time
      _update:
        description: date the accounting system was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: string
      _name:
        description: ''
        type: string
      _accountingChart:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingChart'
    type: object
    xml:
      name: AccountingSystem
  Model_AccountingSystemNumber:
    properties:
      _create:
        description: date the accounting system number was created
        type: string
        format: date-time
      _update:
        description: date the accounting system number was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _number:
        description: accounting system number
        type: integer
      _numberDepreciation:
        description: ''
        type: integer
      _accountingType:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _accountingSystem:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingSystem'
      _bookingType:
        description: ''
        type: string
    type: object
    xml:
      name: AccountingSystemNumber
  Model_AccountingType:
    properties:
      _create:
        description: date the accounting type was created
        type: string
        format: date-time
      _update:
        description: date the accounting type was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _parent:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _name:
        description: ''
        type: string
      _skr03:
        description: ''
        type: integer
      _skr03Deprecation:
        description: ''
        type: integer
      _accountingChart:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingChart'
      _skr04:
        description: ''
        type: integer
      _skr04Deprecation:
        description: ''
        type: integer
      _skrAt:
        description: ''
        type: integer
      _skrAtDeprecation:
        description: ''
        type: integer
      _skrCh:
        description: ''
        type: integer
      _skrChDeprecation:
        description: ''
        type: integer
      _skrGr:
        description: ''
        type: integer
      _skrGrDeprecation:
        description: ''
        type: integer
      _type:
        description: ''
        type: string
      _translationCode:
        description: ''
        type: string
      _descriptionTranslationCode:
        description: ''
        type: string
      _connotationTranslationCode:
        description: ''
        type: string
      _bookingType:
        description: ''
        type: string
      _assetType:
        description: ''
        type: string
        default: 'N'
      _status:
        description: ''
        type: integer
        default: 100
        enum:
          - 0 (Archived)
          - 100 (Active)
    type: object
    xml:
      name: AccountingType
  Model_AccountingType_Factory:
    properties:
      AccountingType:
        description: here you can find useful parameters for your accounting type request
        type: object
        $ref: '#/definitions/Model_AccountingType'
    type: object
    xml:
      name: AccountingTypeFactory
  Model_Aggregator:
    type: object
    xml:
      name: Aggregator
  Model_Asset:
    properties:
      _create:
        description: date the asset was created
        type: string
        format: date-time
      _update:
        description: date the asset was last updated
        type: string
        format: date-time
      _voucherPos:
        description: voucher position of the asset
        type: object
        $ref: '#/definitions/Model_VoucherPos'
      _name:
        description: ''
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _usefulLife:
        description: lifespan of the asset
        type: integer
      _acquisitionDate:
        description: date the asset was acquired
        type: string
        format: date-time
      _purchasePrice:
        description: ''
        type: number
        format: float
      _purchasePriceAccounting:
        description: ''
        type: number
        format: float
      _taxRate:
        description: ''
        type: number
        format: float
      _assetNumber:
        description: ''
        type: string
      _accountingType:
        description: accounting type of the asset
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _status:
        description: ''
        type: integer
        enum:
          - 50 (Created)
          - 100 (Active)
          - 500 (Low value)
          - 1000 (Depreciated)
      _enshrined:
        description: ''
        type: boolean
    type: object
    xml:
      name: Asset
  Model_AssetPos:
    properties:
      _create:
        description: date the asset position was created
        type: string
        format: date-time
      _update:
        description: date the asset position was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _asset:
        description: asset the asset position belongs to
        type: object
      _year:
        description: ''
        type: integer
      _depreciationAmount:
        description: ''
        type: number
        format: float
      _residualValue:
        description: ''
        type: number
        format: float
      _month:
        description: ''
        type: integer
      _enshrined:
        description: ''
        type: boolean
      _correction:
        description: ''
        type: boolean
    type: object
    xml:
      name: AssetPos
  Model_Category:
    properties:
      _create:
        description: creation date of the category
        type: string
        format: date-time
      _update:
        description: date the category was last updated
        type: string
        format: date-time
      _parent:
        description: ''
        type: object
        $ref: '#/definitions/Model_Category'
      _name:
        description: ''
        type: string
      _objectType:
        description: ''
        type: string
      _priority:
        description: ''
        type: integer
        default: 100
      _code:
        description: ''
        type: string
      _color:
        description: ''
        type: string
      _sevClient:
        description: ''
        type: object
      _postingAccount:
        description: ''
        type: string
      _type:
        description: ''
        type: string
      _translationCode:
        description: ''
        type: string
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
    type: object
    xml:
      name: Category
  Model_CheckAccount:
    properties:
      _create:
        description: date the CheckAccount was created
        type: string
        format: date-time
      _update:
        description: date the CheckAccount was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name:
        description: name of the CheckAccount
        type: string
      _type:
        description: type of the CheckAccount
        type: string
      _importType:
        description: ''
        type: string
      _currency:
        description: ''
        type: string
      _checkAccId:
        description: ''
        type: string
      _pin:
        description: ''
        type: string
      _defaultAccount:
        description: boolean showing whether this account is the default account or not
        type: string
      _status:
        description: ''
        type: integer
        enum:
          - 0 (Archived)
          - 100 (Active)
      _translationCode:
        description: ''
        type: string
      _bankServer:
        description: ''
        type: string
      _balance:
        description: ''
        type: number
        format: float
      _figoAccountId:
        description: ''
        type: string
      _credential1:
        description: ''
        type: string
      _credential2:
        description: ''
        type: string
      _credential3:
        description: ''
        type: string
      _accountingNumber:
        description: ''
        type: integer
      _figoPreferredTanScheme:
        description: ''
        type: string
      _iban:
        description: ''
        type: string
      _bic:
        description: ''
        type: string
      _baseAccount:
        description: ''
        type: boolean
      _priority:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: CheckAccount
  Model_CheckAccountTransaction:
    properties:
      _create:
        description: date the check account transaction was created
        type: string
        format: date-time
      _update:
        description: date the check account transaction was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _valueDate:
        description: ''
        type: string
        format: date-time
      _entryDate:
        description: ''
        type: string
        format: date-time
      _amount:
        description: amount of the transaction
        type: number
        format: float
      _gvCode:
        description: ''
        type: string
      _entryText:
        description: ''
        type: string
      _primaNotaNo:
        description: ''
        type: string
      _paymtPurpose:
        description: ''
        type: string
      _payeePayerBankCode:
        description: payer bank code
        type: string
      _payeePayerAcctNo:
        description: payer account number
        type: string
      _payeePayerName:
        description: payer name
        type: string
      _checkAccount:
        description: id of the check account
        type: object
        $ref: '#/definitions/Model_CheckAccount'
      _status:
        description: ''
        type: integer
        enum:
          - 100 (Created)
          - 200 (Linked)
          - 300 (Privat)
          - 400 (Booked)
      _score:
        description: ''
        type: string
      _compareHash:
        description: hash to be compared
        type: string
      _entryType:
        description: ''
        type: object
      _enshrined:
        description: ''
        type: boolean
      _sourceTransaction:
        description: source check account transaction used for transfers
        type: object
      _targetTransaction:
        description: destination check account transaction used for transfers
        type: object
      _obonoReceiptUuid:
        description: ''
        type: string
    type: object
    xml:
      name: CheckAccountTransaction
  Model_CheckAccountTransactionLog:
    properties:
      _create:
        description: date the check account transaction log was created
        type: string
        format: date-time
      _checkAccountTransaction:
        description: the check account transaction to which the log refers
        type: object
        $ref: '#/definitions/Model_CheckAccountTransaction'
      _fromStatus:
        description: the status before the logged change
        type: integer
      _toStatus:
        description: the status after the logged change
        type: integer
      _amountPaid:
        description: the logged amount which was paid
        type: number
        format: float
      _bookingDate:
        description: ''
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _object:
        description: Invoice/Voucher to which the logged transaction belongs
        type: object
    type: object
    xml:
      name: CheckAccountTransactionLog
  Model_CommunicationWay:
    properties:
      _create:
        description: date the communication way was created
        type: string
        format: date-time
      _update:
        description: date the communication way was last updated
        type: string
        format: date-time
      _contact:
        description: Contact to which the communication way refers
        type: object
        $ref: '#/definitions/Model_Contact'
      _type:
        description: type of the communication way
        type: string
        enum:
          - EMAIL
          - PHONE
          - WEB
          - MOBILE
      _value:
        description: value of the communication way
        type: string
      _key:
        description: the communication way key to which the communication way refers
        type: object
        $ref: '#/definitions/Model_CommunicationWayKey'
      _main:
        description: ''
        type: boolean
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: CommunicationWay
  Model_CommunicationWayKey:
    description: CommunicationWayKey is read only
    properties:
      _create:
        description: date the communication way key was created
        type: string
        format: date-time
      _update:
        description: date the communication way key was last updated
        type: string
        format: date-time
      _name:
        description: name of the communication way key
        type: string
      _translationCode:
        description: ''
        type: string
    type: object
    xml:
      name: CommunicationWayKey
  Model_Contact:
    properties:
      _address:
        description: the contact address
        type: object
        $ref: '#/definitions/Model_ContactAddress'
      _create:
        description: the creation date of the contact
        type: string
        format: date-time
      _update:
        description: 'date, the contact was last updated'
        type: string
        format: date-time
      _name:
        description: name of the contact
        type: string
      _status:
        description: status of the contact
        type: integer
        enum:
          - 1000 (Active)
          - 100 (Lead)
          - 500 (Pending)
      _customerNumber:
        description: customer number of the contact
        type: integer
      _parent:
        description: ''
        type: object
        $ref: '#/definitions/Model_Contact'
      _surename:
        description: surname of the contact
        type: string
      _familyname:
        description: family name of the contact
        type: string
      _titel:
        description: title of the contact
        type: string
      _category:
        description: category of the contact
        type: object
        enum:
          - 2 (Supplier)
          - 3 (Customer)
          - 4 (Partner)
        $ref: '#/definitions/Model_Category'
      _description:
        description: description of the contact
        type: string
      _academicTitle:
        description: any academic title of the contact
        type: string
      _gender:
        description: gender of the contact
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name2:
        description: second name of the contact
        type: string
      _birthday:
        description: birthday of the contact
        type: string
        format: date-time
      _vatNumber:
        description: vat number of the contact
        type: string
      _bankAccount:
        description: bank account of the contact
        type: string
      _bankNumber:
        description: bank number of the contact
        type: string
      _paymentMethod:
        description: desired payment method of the customer
        type: object
        $ref: '#/definitions/Model_PaymentMethod'
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
      _defaultCashbackTime:
        description: default cashback time of the contact
        type: integer
      _defaultCashbackPercent:
        description: default cashback percentage of the contact
        type: integer
      _defaultTimeToPay:
        description: default time to pay of the contact
        type: integer
      _taxNumber:
        description: tax number of the contact
        type: string
      _taxOffice:
        description: tax office of the contact
        type: string
    type: object
    xml:
      name: Contact
  Model_ContactAddress:
    properties:
      _create:
        description: the creation date of the contact
        type: string
        format: date-time
      _update:
        description: 'date, the contact was last updated'
        type: string
        format: date-time
      _contact:
        description: the contact the address belongs to
        type: object
        $ref: '#/definitions/Model_Contact'
      _street:
        description: ''
        type: string
      _zip:
        description: zip of the city/village
        type: string
      _city:
        description: ''
        type: string
      _country:
        description: ''
        type: object
        enum:
          - 1 (Germany)
          - 2 (Switzerland)
          - 3 (Austria)
          - 6 (Belgium)
          - 11 (France)
          - 12 (Greece)
          - 14 (Italy)
        $ref: '#/definitions/Model_StaticCountry'
      _category:
        description: category of the address
        type: object
        enum:
          - 43 (Work)
          - 44 (Private)
          - 45 (Invoice address)
          - 48 (Delivery address)
          - 49 (Pickup address)
        $ref: '#/definitions/Model_Category'
      _name:
        description: ''
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name2:
        description: ''
        type: string
      _name3:
        description: ''
        type: string
      _name4:
        description: ''
        type: string
    type: object
    xml:
      name: ContactAddress
  Model_Contact_Factory:
    description: >-
      Below are the models which can be used for the functions in
      Contact/Factory.php. Beware that you need to use them without the
      underscore at the beginning!
    properties:
      contact:
        description: here you can find useful parameters for your contact requests
        type: object
        $ref: '#/definitions/Model_Contact'
    type: object
    xml:
      name: ContactFactory
  Model_CostCentre:
    properties:
      _create:
        description: date the cost centre was created
        type: string
        format: date-time
      _update:
        description: date the cost centre was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _number:
        description: ''
        type: string
      _name:
        description: ''
        type: string
      _color:
        description: ''
        type: string
      _postingAccount:
        description: ''
        type: string
    type: object
    xml:
      name: CostCentre
  Model_CurrencyExchangeRate:
    properties:
      _date:
        description: date of the currency exchange rate
        type: string
        format: date-time
      _currency:
        description: currency which is rated
        type: string
      _rate:
        description: rate of the currency compared to EUR
        type: number
        format: float
    type: object
    xml:
      name: CurrencyExchangeRate
  Model_Discounts:
    properties:
      _create:
        description: date the discount was created
        type: string
        format: date-time
      _update:
        description: date the discount was last updated
        type: string
        format: date-time
      _object:
        description: object to which the discount belongs
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _discount:
        description: specifies if a discount is enabled
        type: boolean
      _text:
        description: description of the discount
        type: string
      _percentage:
        description: 'specifies if discount is of type percentage, otherwise its a value'
        type: boolean
      _value:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: Discounts
  Model_DocServer:
    type: object
    xml:
      name: DocServer
  Model_Document:
    properties:
      _create:
        description: date the document was created
        type: string
        format: date-time
      _update:
        description: date the document was last updated
        type: string
        format: date-time
      _object:
        description: ''
        type: object
      _documentNumber:
        description: ''
        type: string
      _baseObject:
        description: ''
        type: string
        format: date-time
      _createUser:
        description: SevUser who created the document
        type: object
        $ref: '#/definitions/Model_SevUser'
      _updateUser:
        description: SevUser who last updated the document
        type: object
        $ref: '#/definitions/Model_SevUser'
      _mimeType:
        description: ''
        type: string
      _description:
        description: ''
        type: string
      _objectAction:
        description: ''
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _folder:
        description: ''
        type: object
        $ref: '#/definitions/Model_DocumentFolder'
      _filename:
        description: ''
        type: string
      _status:
        description: ''
        type: integer
        default: 100
        enum:
          - 100 (Open)
          - 50 (Voucher)
          - 0 (Trashed)
      _extension:
        description: ''
        type: string
      _filesize:
        description: ''
        type: integer
    type: object
    xml:
      name: Document
  Model_DocumentFolder:
    properties:
      _create:
        description: date the document folder was created
        type: string
        format: date-time
      _update:
        description: date the document folder was last updated
        type: string
        format: date-time
      _name:
        description: ''
        type: string
      _parent:
        description: ''
        type: object
        $ref: '#/definitions/Model_DocumentFolder'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _object:
        description: ''
        type: object
      _status:
        description: ''
        type: integer
        default: 100
        enum:
          - 100 (Open)
          - 0 (Trashed)
      _translationCode:
        description: ''
        type: string
    type: object
    xml:
      name: DocumentFolder
  Model_DocumentIndex:
    properties:
      _create:
        description: date the document index was created
        type: string
        format: date-time
      _update:
        description: date the document index was last updated
        type: string
        format: date-time
      _user:
        description: user that created the document index
        type: object
      _document:
        description: the document to which the index belongs
        type: object
      _index:
        description: index
        type: integer
      _name:
        description: ''
        type: string
      _status:
        description: status of the document index
        type: integer
        enum:
          - 100 (Approved)
          - 10 (Open)
          - 50 (Revision)
      _extension:
        description: ''
        type: string
      _mimeType:
        description: ''
        type: string
      _sevClient:
        description: sevClient that created the document index
        type: object
    type: object
    xml:
      name: DocumentIndex
  Model_Document_Factory:
    description: >-
      Below are the models which can be used for the functions in
      Document/Factory.php. Beware that you need to use them without the
      underscore at the beginning!
    properties:
      Model_Document:
        description: the Model_Document to create
        type: object
        $ref: '#/definitions/Model_Document'
    type: object
    xml:
      name: DocumentFactory
  Model_Email:
    properties:
      _create:
        description: creation date of the Email
        type: string
        format: date-time
      _update:
        description: date the email was last updated
        type: string
        format: date-time
      _object:
        description: invoice object which is send via email
        type: object
        $ref: '#/definitions/Model_Invoice'
      _from:
        description: sender of the email
        type: string
      _to:
        description: recipient of the email
        type: string
      _subject:
        description: subject of the email
        type: string
      _text:
        description: text written in the email
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _cc:
        description: cc of the email
        type: string
      _bcc:
        description: bcc of the email
        type: string
      _arrived:
        description: arrival date of the email
        type: string
        format: date-time
    type: object
    xml:
      name: Email
  Model_EntryType:
    properties:
      _create:
        description: date the entry type was created
        type: string
        format: date-time
      _update:
        description: date the entry type was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name:
        description: ''
        type: string
    type: object
    xml:
      name: EntryType
  Model_Export:
    type: object
    xml:
      name: Export
  Model_Feed:
    properties:
      _create:
        description: creation date of the feed
        type: string
        format: date-time
      _update:
        description: date the feed was last updated
        type: string
        format: date-time
      _object:
        description: ''
        type: object
      _text:
        description: ''
        type: string
      _type:
        description: ''
        type: object
      _user:
        description: ''
        type: object
        $ref: '#/definitions/Model_SevUser'
      _objectAction:
        description: ''
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: Feed
  Model_Help:
    type: object
    xml:
      name: Help
  Model_InventoryPartLog:
    description: The inventory part log contains all part bookings (acquisition/dispatch)
    properties:
      _create:
        description: creation date of the inventory part log
        type: string
        format: date-time
      _postingDate:
        description: ''
        type: string
        format: date-time
      _part:
        description: part which is involved in the part booking which is logged
        type: object
      _supplier:
        description: supplier which is involved in the part booking which is logged
        type: object
      _ammount:
        description: amount booked which is logged
        type: number
        format: float
      _name:
        description: description of the booking which is logged
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _object:
        description: ''
        type: object
    type: object
    xml:
      name: InventoryPartLog
  Model_Invoice:
    properties:
      _invoiceNumber:
        description: ''
        type: string
      _contact:
        description: the contact the invoice belongs to
        type: object
        $ref: '#/definitions/Model_Contact'
      _create:
        description: the date the invoice was created
        type: string
        format: date-time
      _update:
        description: the date the invoice was last updated
        type: string
        format: date-time
      _invoiceDate:
        description: the date of the invoice
        type: string
        format: date-time
      _header:
        description: header/subject of the invoice
        type: string
      _headText:
        description: head text of the invoice
        type: string
      _footText:
        description: foot text of the invoice
        type: string
      _timeToPay:
        description: >-
          time left for paying the invoice, use format dd.MM.yyyy or number for
          number of days left
        type: string
        format: date-time
      _discountTime:
        description: ''
        type: string
        format: date-time
      _discount:
        description: the discount value in '%'
        type: number
        format: float
      _addressName:
        description: 'the name in the address, equals the contacts name'
        type: string
      _addressStreet:
        description: 'the street in the address, equals the contacts street'
        type: string
      _addressZip:
        description: 'the zip-code in the address, equals the contacts zip'
        type: string
      _addressCity:
        description: 'the city in the address, equals the contacts city'
        type: string
      _addressCountry:
        description: 'the country in the address, equals the contacts country'
        type: object
        $ref: '#/definitions/Model_StaticCountry'
      _payDate:
        description: >-
          time left for paying the invoice, use format DD.MM.YYYY or number for
          number of days left
        type: string
        format: date-time
      _createUser:
        description: SevUser who created the invoice
        type: object
        $ref: '#/definitions/Model_SevUser'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _deliveryDate:
        description: 'delivery date of the goods from the invoice, please use dd.MM.yyyy'
        type: string
        format: date-time
      _status:
        description: status of the invoice
        type: integer
        enum:
          - 100 (created)
          - 200 (delivered)
          - 1000 (payed)
      _smallSettlement:
        description: ''
        type: boolean
      _contactPerson:
        description: SevUser who created the invoice and therefore is the contact person
        type: object
        $ref: '#/definitions/Model_SevUser'
      _taxRate:
        description: tax rate used when adding a value added tax regulation
        type: number
        format: float
        maximum: 100
        minimum: 0
      _taxText:
        description: additional text when adding a value added tax regulation
        type: string
        enum:
          - Umsatzsteuer ausweisen
          - Steuerfreie innergemeinschaftliche Lieferung(Europäische Union)
          - >-
            Steuerschuldnerschaft des Leistungsempfängers (Außerhalb EU, z.B.
            Schweiz)
      _dunningLevel:
        description: dunning level of the invoice
        type: integer
      _addressParentName:
        description: name of the contacts address
        type: string
      _addressContactRef:
        description: a reference to the contacts address
        type: object
        $ref: '#/definitions/Model_ContactAddress'
      _taxType:
        description: ''
        type: string
        enum:
          - default
          - eu
          - noteu
      _paymentMethod:
        description: ''
        type: object
        $ref: '#/definitions/Model_PaymentMethod'
      _costCentre:
        description: ''
        type: object
        $ref: '#/definitions/Model_CostCentre'
      _sendDate:
        description: ''
        type: string
        format: date-time
      _origin:
        description: ''
        type: object
      _invoiceType:
        description: type of the invoice
        type: string
        enum:
          - RE (Invoice)
          - MA (Invoice reminder)
          - WKR (periodic invoice)
      _accountIntervall:
        description: ''
        type: integer
      _accountLastInvoice:
        description: ''
        type: string
        format: date-time
      _accountNextInvoice:
        description: ''
        type: string
        format: date-time
      _reminderTotal:
        description: ''
        type: number
        format: float
      _reminderDebit:
        description: ''
        type: number
        format: float
      _reminderDeadline:
        description: ''
        type: string
        format: date-time
      _reminderCharge:
        description: ''
        type: number
        format: float
      _addressParentName2:
        description: ''
        type: string
      _addressName2:
        description: ''
        type: string
      _taxSet:
        description: ''
        type: object
        $ref: '#/definitions/Model_TaxSet'
      _addressGender:
        description: ''
        type: string
      _accountEndDate:
        description: ''
        type: string
        format: date-time
      _address:
        description: ''
        type: string
      _currency:
        description: ''
        type: string
      _sumNet:
        description: ''
        type: number
        format: float
      _sumTax:
        description: ''
        type: number
        format: float
      _sumGross:
        description: ''
        type: number
        format: float
      _sumDiscounts:
        description: ''
        type: number
        format: float
      _sumNetForeignCurrency:
        description: ''
        type: number
        format: float
      _sumTaxForeignCurrency:
        description: ''
        type: number
        format: float
      _sumGrossForeignCurrency:
        description: ''
        type: number
        format: float
      _sumDiscountsForeignCurrency:
        description: ''
        type: number
        format: float
      _sumNetAccounting:
        description: ''
        type: number
        format: float
      _sumTaxAccounting:
        description: ''
        type: number
        format: float
      _sumGrossAccounting:
        description: ''
        type: number
        format: float
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
      _costumerInternalNote:
        description: ''
        type: string
      _showNet:
        description: ''
        type: boolean
      _enshrined:
        description: ''
        type: boolean
      _sendType:
        description: ''
        type: string
      _deliveryDateUntil:
        description: ''
        type: string
        format: date-time
    type: object
    xml:
      name: Invoice
  Model_InvoiceLog:
    properties:
      _create:
        description: date the invoice log was created
        type: string
        format: date-time
      _invoice:
        description: the invoice which is logged
        type: object
      _fromStatus:
        description: status before the change
        type: integer
      _toStatus:
        description: status after the change
        type: integer
      _ammountPayed:
        description: amount that was payed
        type: number
        format: float
      _bookingDate:
        description: date of the booking
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: InvoiceLog
  Model_InvoicePos:
    properties:
      _create:
        description: creation date of the invoice position
        type: string
        format: date-time
      _update:
        description: date the invoice position was last updated
        type: string
        format: date-time
      _invoice:
        description: the Model_Invoice the invoice position belongs to
        type: object
        $ref: '#/definitions/Model_Invoice'
      _part:
        description: the product/part which belongs to the invoice position
        type: object
        $ref: '#/definitions/Model_Part'
      _quantity:
        description: the quantity of the product/part
        type: number
        format: float
      _price:
        description: the price of the product/part
        type: number
        format: float
      _name:
        description: the name of the product/part
        type: string
      _priority:
        description: ''
        type: integer
        default: 100
      _unity:
        description: ''
        type: object
        $ref: '#/definitions/Model_Unity'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _positionNumber:
        description: ''
        type: integer
        default: 1000
      _text:
        description: ''
        type: string
      _discount:
        description: 'does not get filled, discount is handled in the discount_model'
        type: number
        format: float
      _taxRate:
        description: tax rate in percent
        type: number
        format: float
      _temporary:
        description: ''
        type: boolean
      _sumNet:
        description: ''
        type: number
        format: float
      _sumGross:
        description: ''
        type: number
        format: float
      _sumDiscount:
        description: 'does not get filled, sumDiscount is handled in the discount_model'
        type: number
        format: float
      _sumTax:
        description: ''
        type: number
        format: float
      _sumNetAccounting:
        description: equals sumNet
        type: number
        format: float
      _sumTaxAccounting:
        description: equals sumTax
        type: number
        format: float
      _sumGrossAccounting:
        description: equals sumGross
        type: number
        format: float
      _priceNet:
        description: net price of the product/part (one)
        type: number
        format: float
      _priceGross:
        description: gross price of the product/part (one)
        type: number
        format: float
      _priceTax:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: InvoicePosition
  Model_Invoice_Factory:
    description: >-
      Below are the models which can be used for the functions in
      Invoice/Factory.php. Beware that you need to use them without the
      underscore at the beginning!
    properties:
      invoice:
        description: the Model_Invoice to create/update
        type: object
        $ref: '#/definitions/Model_Invoice'
      'invoicePosSave[]':
        description: the Model_InvoicePos to create/update
        type: object
        $ref: '#/definitions/Model_Invoice'
      'invoicePosDelete[]':
        description: the Model_InvoicePos to delete
        type: object
        $ref: '#/definitions/Model_Invoice'
      'discountSave[]':
        description: the Model_Discounts to create/update
        type: object
        $ref: '#/definitions/Model_Discounts'
      'discountDelete[]':
        description: the Model_Discounts to delete
        type: object
        $ref: '#/definitions/Model_Discounts'
    type: object
    xml:
      name: InvoiceFactory
  Model_Letter:
    properties:
      _create:
        description: creation date of the letter
        type: string
        format: date-time
      _update:
        description: date the letter was last updated
        type: string
        format: date-time
      _letterNumber:
        description: ''
        type: string
      _contact:
        description: ''
        type: object
        $ref: '#/definitions/Model_Contact'
      _letterDate:
        description: ''
        type: string
        format: date-time
      _header:
        description: ''
        type: string
      _addressName:
        description: ''
        type: string
      _addressName2:
        description: ''
        type: string
      _addressStreet:
        description: ''
        type: string
      addressZip:
        description: ''
        type: string
      _addressCity:
        description: ''
        type: string
      _addressCountry:
        description: ''
        type: object
        $ref: '#/definitions/Model_StaticCountry'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _status:
        description: ''
        type: integer
        enum:
          - 100 (Created)
          - 200 (Delivered)
      _contactPerson:
        description: ''
        type: object
        $ref: '#/definitions/Model_SevUser'
      _addressParentName:
        description: ''
        type: string
      _addressContactRef:
        description: reference to Model_ContactAddress
        type: object
        $ref: '#/definitions/Model_ContactAddress'
      _text:
        description: text for the letter
        type: string
      _sendDate:
        description: ''
        type: string
        format: date-time
      _addressParentName2:
        description: ''
        type: string
      _addressGender:
        description: ''
        type: string
      _address:
        description: ''
        type: string
      _sendType:
        description: ''
        type: string
    type: object
    xml:
      name: Letter
  Model_ObjectUsed:
    description: Note that Model_ObjectUsed is read-only
    properties:
      _create:
        description: date the object used was created
        type: string
        format: date-time
      user:
        description: sevUser that used an object
        type: object
      _object:
        description: object that was used
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: ObjectsUsed
  Model_ObjectViewed:
    description: Note that Model_ObjectViewed is read-only!
    properties:
      _create:
        description: date the object viewed was created
        type: string
        format: date-time
      _update:
        description: date the object viewed was last updated
        type: string
        format: date-time
      _user:
        description: sevUser that viewed the object
        type: object
      _object:
        description: object that was viewed
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: ObjectViewed
  Model_Order:
    properties:
      _create:
        description: date the order was created
        type: string
        format: date-time
      _update:
        description: date the order was last updated
        type: string
        format: date-time
      _oderNumber:
        description: ''
        type: string
      _contact:
        description: the Model_Contact which is linked to the order
        type: object
        $ref: '#/definitions/Model_Contact'
      _orderDate:
        description: ''
        type: string
        format: date-time
      _status:
        description: ''
        type: integer
        enum:
          - 100 (CREATED)
          - 200 (DELIVERED)
          - 280 (CLOSED)
          - 300 (REJECTED)
          - 500 (ACCEPTED)
          - 750 (SOMECALCULATED)
          - 1000 (CALCULATED)
      _header:
        description: ''
        type: string
      _headText:
        description: ''
        type: string
      _footText:
        description: ''
        type: string
      _addressName:
        description: ''
        type: string
      _addressStreet:
        description: ''
        type: string
      _addressZip:
        description: ''
        type: string
      _addressCity:
        description: ''
        type: string
      _addressCountry:
        description: ''
        type: object
        $ref: '#/definitions/Model_StaticCountry'
      _createUser:
        description: ''
        type: object
        $ref: '#/definitions/Model_SevUser'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _deliveryTerms:
        description: ''
        type: string
      _paymentTerms:
        description: ''
        type: string
      _origin:
        description: ''
        type: object
      _version:
        description: ''
        type: integer
      _smallSettlement:
        description: ''
        type: boolean
      _contactPerson:
        description: contact person for the order which is a SevUser
        type: object
        $ref: '#/definitions/Model_SevUser'
      _taxRate:
        description: ''
        type: number
        format: float
      _taxSet:
        description: ''
        type: object
        $ref: '#/definitions/Model_TaxSet'
      _taxText:
        description: ''
        type: string
      _addressParentName:
        description: ''
        type: string
      _addressContactRef:
        description: ''
        type: object
        $ref: '#/definitions/Model_ContactAddress'
      _taxType:
        description: ''
        type: string
      _orderType:
        description: ''
        type: string
      _sendDate:
        description: date the order was sent
        type: string
        format: date-time
      _addressParentName2:
        description: ''
        type: string
      _addressName2:
        description: ''
        type: string
      _addressGender:
        description: ''
        type: string
      _address:
        description: >-
          concatenation of address attributes acquired from
          Model_Contact->Model_ContactAddress
        type: string
        $ref: '#/definitions/Model_ContactAddress'
      _currency:
        description: ''
        type: string
      _sumNet:
        description: ''
        type: number
        format: float
      _sumTax:
        description: ''
        type: number
        format: float
      _sumGross:
        description: ''
        type: number
        format: float
      _sumDiscounts:
        description: ''
        type: number
        format: float
      _sumNetForeignCurrency:
        description: ''
        type: number
        format: float
      _sumTaxForeignCurrency:
        description: ''
        type: number
        format: float
      _sumGrossForeignCurrency:
        description: ''
        type: number
        format: float
      _sumDiscountsForeignCurrency:
        description: ''
        type: number
        format: float
      _weight:
        description: ''
        type: number
        format: float
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
      _costumerInternalNote:
        description: ''
        type: string
      _showNet:
        description: ''
        type: boolean
      _sendType:
        description: ''
        type: string
    type: object
    xml:
      name: Order
  Model_OrderLog:
    properties:
      _create:
        description: date the order log was created
        type: string
        format: date-time
      _update:
        description: date the order was last updated
        type: string
        format: date-time
      _date:
        description: date of the order log
        type: string
        format: date-time
      _order:
        description: the order to which the order log refers
        type: object
        $ref: '#/definitions/Model_Order'
      _object:
        description: >-
          the object which was involved in the logged order action (eg. a
          created invoice)
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _currency:
        description: currency of the logged order
        type: string
      _amount:
        description: amount of the order position
        type: number
        format: float
      _amountType:
        description: 'type of the order position amount, can be one from unity or custom'
        type: string
      _taxRate:
        description: tax rate of the order
        type: integer
    type: object
    xml:
      name: OrderLog
  Model_OrderPos:
    properties:
      _create:
        description: creation date of the order position
        type: string
        format: date-time
      _update:
        description: date the order position was last updated
        type: string
        format: date-time
      _order:
        description: Model_Order the position belongs to
        type: object
        $ref: '#/definitions/Model_Order'
      _part:
        description: The Model_Part which is used in Model_OrderPos
        type: object
        $ref: '#/definitions/Model_Part'
      _quantity:
        description: quantity of the Model_Part
        type: number
        format: float
      _price:
        description: price of the Model_Part
        type: number
        format: float
      _name:
        description: ''
        type: string
      _priority:
        description: ''
        type: integer
      _unity:
        description: ''
        type: object
        $ref: '#/definitions/Model_Unity'
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _positionNumber:
        description: ''
        type: integer
      _text:
        description: ''
        type: string
      _discount:
        description: ''
        type: number
        format: float
      _optional:
        description: ''
        type: boolean
      _optionalChargeable:
        description: ''
        type: boolean
      _taxRate:
        description: ''
        type: number
        format: float
      _sumNet:
        description: ''
        type: number
        format: float
      _sumGross:
        description: ''
        type: number
        format: float
      _sumDiscount:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: OrderPosition
  Model_Part:
    properties:
      _create:
        description: date the part was created
        type: string
        format: date-time
      _update:
        description: date the part was last updated
        type: string
        format: date-time
      _name:
        description: name of the part
        type: string
      _partNumber:
        description: ''
        type: string
      _text:
        description: ''
        type: string
      _category:
        description: ''
        type: object
        $ref: '#/definitions/Model_Category'
      _stock:
        description: ''
        type: number
        format: float
      _unity:
        description: 'unity of the part, references Unity.php'
        type: object
        $ref: '#/definitions/Model_Unity'
      _pricePartner:
        description: >-
          price for a partner. Can be added via the options in the inventory
          where the part is displayed
        type: number
        format: float
      _priceCustomer:
        description: >-
          price for a customer. Can be added via the options in the inventory
          where the part is displayed
        type: number
        format: float
      _price:
        description: price of the part
        type: number
        format: float
      _secondUnity:
        description: a second unity which can be added to the part
        type: object
        $ref: '#/definitions/Model_Unity'
      _secondUnityFactor:
        description: >-
          factor for the second unity resulting in a new sumNet for the
          secondUnity
        type: number
        format: float
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _pricePurchase:
        description: ''
        type: number
        format: float
      _taxRate:
        description: ''
        type: number
        format: float
      _image:
        description: ''
        type: string
      _status:
        description: ''
        type: integer
      _characteristics:
        description: characteristics of the part
        type: string
      _origin:
        description: ''
        type: object
        $ref: '#/definitions/Model_Part'
      _characteristicsString:
        description: ''
        type: string
      _internalComment:
        description: ''
        type: string
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
      _accountingType:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _priceNet:
        description: ''
        type: number
        format: float
      _priceGross:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: Part
  Model_PartContactPrice:
    properties:
      _create:
        description: date the part contact price was created
        type: string
        format: date-time
      _update:
        description: date the part contact price was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _contact:
        description: contact for which you have a special price
        type: object
      _part:
        description: part for which you have a special price
        type: object
      _type:
        description: type of the part contact price
        type: string
        enum:
          - sup (SUPPLIER)
          - cust (CUSTOMER)
      _priceNet:
        description: special net price for contact
        type: number
        format: float
      _priceGross:
        description: special gross price for contact
        type: number
        format: float
    type: object
    xml:
      name: PartContactPrice
  Model_PartUnity:
    properties:
      _create:
        description: date the part unity was created
        type: string
        format: date-time
      _update:
        description: date the part unity was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _part:
        description: part involved in the part unity
        type: object
      _price:
        description: price of the part
        type: number
        format: float
      _factor:
        description: factor of the part
        type: number
        format: float
      _unity:
        description: unity of the part
        type: object
    type: object
    xml:
      name: PartUnity
  Model_PaymentMethod:
    properties:
      _create:
        description: date the payment method was created
        type: string
        format: date-time
      _update:
        description: date the payment method was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _name:
        description: ''
        type: string
      _text:
        description: ''
        type: string
    type: object
    xml:
      name: PaymentMethod
  Model_Place:
    properties:
      _name:
        description: name of the place
        type: string
      _lon:
        description: longitude of the place
        type: number
        format: float
      _lat:
        description: latitude of the place
        type: number
        format: float
      _zip:
        description: zip of the place
        type: string
      _locId:
        description: location id of the place
        type: integer
    type: object
    xml:
      name: Place
  Model_Report:
    type: object
    xml:
      name: Report
  Model_Search:
    type: object
    xml:
      name: Search
  Model_SevClient:
    properties:
      hidden:
        description: This information is not visible for you
        type: string
    type: object
    xml:
      name: SevClient
  Model_SevClientConfig:
    properties:
      hidden:
        description: This information is not visible for you
        type: string
    type: object
    xml:
      name: SevClientConfig
  Model_SevQuery:
    properties:
      _modelName:
        description: Name of the model for which you want to make a query
        type: string
      _limit:
        description: Limit for the returned entries
        type: integer
      _offset:
        description: Offset for the returned entries
        type: integer
      _filter:
        description: Filters that should be applied to the returned entries
        type: array
      _order:
        description: Define how returned entries should be sorted
        type: string
    type: object
    xml:
      name: SevQuery
  Model_SevSequence:
    properties:
      _create:
        description: date the SevSequence was created
        type: string
        format: date-time
      _update:
        description: date the SevSequence was last updated
        type: string
        format: date-time
      _forObject:
        description: Object for which the sequence is
        type: string
      _format:
        description: Format of the sequence
        type: string
      _nextSequence:
        description: next sequence of the object
        type: integer
      _sevClient:
        description: ''
        type: object
      _type:
        description: type of the object
        type: string
    type: object
    xml:
      name: SevSequence
  Model_SevToken:
    properties:
      _create:
        description: date the sevToken was created
        type: string
        format: date-time
      _update:
        description: date the sevToken was last updated
        type: string
        format: date-time
      _user:
        description: SevUser to whom the sevToken belongs
        type: object
      _token:
        description: token of the sevUser
        type: string
      _expire:
        description: expiration date of the token
        type: string
        format: date-time
      _active:
        description: Defines if the token is active
        type: boolean
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _ipAddress:
        description: Ip address of the user
        type: string
      _userAgent:
        description: Information about the users system
        type: string
      _tokenType:
        description: Type of the token
        type: string
        enum:
          - LOGIN
          - API
          - SUPPORT
      _confirmationToken:
        description: Confirmation token
        type: string
    type: object
    xml:
      name: SevToken
  Model_SevUser:
    properties:
      hidden:
        description: This information is not visible for you
        type: string
    type: object
    xml:
      name: SevUser
  Model_StaticCountry:
    properties:
      _code:
        description: ''
        type: string
      _name:
        description: ''
        type: string
      _nameEn:
        description: ''
        type: string
      _translationCode:
        description: ''
        type: string
      _locale:
        description: ''
        type: string
        default: en_US
      _priority:
        description: ''
        type: integer
    type: object
    xml:
      name: StaticCountry
  Model_StaticIndustry:
    properties:
      _name:
        description: ''
        type: string
      _translationCode:
        description: ''
        type: string
    type: object
    xml:
      name: StaticIndustry
  Model_StaticReferralProgram:
    properties:
      _headline:
        description: ''
        type: string
      _text:
        description: ''
        type: string
      _rewardAmountLead:
        description: ''
        type: number
        format: float
      _rewardAmount:
        description: ''
        type: number
        format: float
      _rewardPercentage:
        description: ''
        type: number
        format: float
      _rewardType:
        description: ''
        type: string
      _earningAmount:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: StaticReferralProgram
  Model_SubscriptionHistory:
    properties:
      _endDate:
        description: End date of subscription in subscription history
        type: string
        format: date-time
      _currentSubscriptionCode:
        description: Status of the subscription you currently have
        type: string
      _currentSubscriptionDuration:
        description: Duration of your current subscription
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: SubscriptionHistory
  Model_SubscriptionType:
    properties:
      _create:
        description: date the subscription type was created
        type: string
        format: date-time
      _update:
        description: date the subscription type was last updated
        type: string
        format: date-time
      _name:
        description: name of the subscription type
        type: string
      _planCode:
        description: code of the subscription plan
        type: string
      _planDuration:
        description: duration of the subscription plan in months
        type: string
      _externalProductId:
        description: ''
        type: string
      _externalProductIdSandbox:
        description: ''
        type: string
      _sumNet:
        description: net sum payable for the subscription type
        type: number
        format: float
      _sumVat:
        description: vat sum payable for the subscription type
        type: number
        format: float
      _sumGross:
        description: gross sum payable for the subscription type
        type: number
        format: float
      _externalProductIdGbp:
        description: ''
        type: string
      _sumNetGbp:
        description: ''
        type: number
        format: float
      _translationCode:
        description: translation code for the subscription type
        type: string
    type: object
    xml:
      name: SubscriptionType
  Model_SwissEsr:
    properties:
      _create:
        description: date the swiss esr was created
        type: string
        format: date-time
      _update:
        description: date the swiss esr was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _addressCityCredit:
        description: ''
        type: string
      _addressZipCredit:
        description: ''
        type: string
      _postSubscriberNumberBank:
        description: ''
        type: string
      _internalSubscriberNumber:
        description: ''
        type: string
      _documentTypeCode:
        description: ''
        type: string
      _isEsr:
        description: ''
        type: integer
    type: object
    xml:
      name: SwissEsr
  Model_Tag:
    properties:
      _create:
        description: date the tag was created
        type: string
        format: date-time
      _name:
        description: name of the tag
        type: string
      _objectType:
        description: ''
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _color:
        description: ''
        type: string
    type: object
    xml:
      name: Tag
  Model_TagRelation:
    properties:
      _create:
        description: date the tag relation was created
        type: string
        format: date-time
      _tag:
        description: tag which is has a relation to another object
        type: object
        $ref: '#/definitions/Model_Tag'
      _object:
        description: object type to which the tag is related
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: TagRelation
  Model_Task:
    properties:
      _create:
        description: the date the task was created
        type: string
        format: date-time
      _update:
        description: date the task was last updated
        type: string
        format: date-time
      _name:
        description: ''
        type: string
      _assigned:
        description: the sevDesk user who is assigned to the task
        type: object
        $ref: '#/definitions/Model_SevUser'
      _object:
        description: 'can be a contact, invoice, etc to which the task refers to'
        type: object
      _deadline:
        description: ''
        type: string
        format: date-time
      _status:
        description: ''
        type: integer
        enum:
          - 100 (Open)
          - 500 (Progress)
          - 1000 (Done)
      _category:
        description: category of the created task
        type: object
        $ref: '#/definitions/Model_Category'
      _done:
        description: ''
        type: string
        format: date-time
      _createUser:
        description: the SevUser who created the task
        type: object
        $ref: '#/definitions/Model_SevUser'
      _doneUser:
        description: the SevUser who completed the task
        type: object
        $ref: '#/definitions/Model_SevUser'
      _noticeCreator:
        description: notice the creator when the task is finished
        type: boolean
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _begin:
        description: ''
        type: string
        format: date-time
    type: object
    xml:
      name: Task
  Model_TaxSet:
    properties:
      _create:
        description: date the tax set was created
        type: string
        format: date-time
      _update:
        description: date the tax set was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _text:
        description: ''
        type: string
      _taxRate:
        description: ''
        type: number
        format: float
      _code:
        description: ''
        type: number
        format: float
      _displayText:
        description: ''
        type: string
      _vatReportFieldNet:
        description: ''
        type: string
      _vatReportFieldTax:
        description: ''
        type: string
      _accountingExportVatField:
        description: ''
        type: string
      _showInvoice:
        description: ''
        type: boolean
      _showDebitVoucher:
        description: ''
        type: boolean
      _showCreditVoucher:
        description: ''
        type: boolean
      _onlyForVatDec:
        description: ''
        type: boolean
    type: object
    xml:
      name: TaxSet
  Model_TextTemplate:
    properties:
      _create:
        description: date the text template was created
        type: string
        format: date-time
      _update:
        description: date the text template was last updated
        type: string
        format: date-time
      _name:
        description: name of the text template
        type: string
      _text:
        description: text of your text template
        type: string
      _objectType:
        description: object type for which you want to use the text template
        type: string
        enum:
          - RE
          - AN
          - AB
          - LI
          - MA
          - MAIL
      _textType:
        description: type of your text
        type: string
        enum:
          - HEAD
          - FOOT
      _sevUser:
        description: sevUser who created the text template
        type: object
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _main:
        description: defines if the text template is used as the main template
        type: boolean
    type: object
    xml:
      name: TextTemplate
  Model_Unity:
    properties:
      _create:
        description: the date the unity was created
        type: string
        format: date-time
      _name:
        description: ''
        type: string
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _translationCode:
        description: ''
        type: string
      _entryType:
        description: ''
        type: object
        $ref: '#/definitions/Model_EntryType'
    type: object
    xml:
      name: Unity
  Model_VatReport:
    properties:
      _create:
        description: date the vat report was created
        type: string
        format: date-time
      _update:
        description: date the vat report was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _country:
        description: StaticCountry of the vat report
        type: object
        $ref: '#/definitions/Model_StaticCountry'
      _reportDate:
        description: date of the vat report
        type: string
        format: date-time
      _reportingYear:
        description: year which is reported
        type: string
      _reportingPeriod:
        description: period which is reported
        type: string
      _reportingPeriodCode:
        description: ''
        type: string
      _reportingValues:
        description: ''
        type: string
      _testCase:
        description: ''
        type: boolean
      _actualTaxation:
        description: >-
          define if you want to report the main income method or the profit and
          loss
        type: boolean
      _corrected:
        description: ''
        type: boolean
      _resultFinanceAuthority:
        description: ''
        type: string
      _financeAuthorityTicketNumber:
        description: ''
        type: string
    type: object
    xml:
      name: VatReport
  Model_Voucher:
    properties:
      _create:
        description: date the voucher was created
        type: string
        format: date-time
      _update:
        description: date the voucher was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _createUser:
        description: sevUser who created the voucher
        type: object
        $ref: '#/definitions/Model_SevUser'
      _voucherDate:
        description: ''
        type: string
        format: date-time
      _supplier:
        description: ''
        type: object
        $ref: '#/definitions/Model_Contact'
      _supplierName:
        description: ''
        type: string
      _description:
        description: ''
        type: string
      _document:
        description: ''
        type: object
        $ref: '#/definitions/Model_Document'
      _resultDisdar:
        description: ''
        type: string
      _documentPreview:
        description: ''
        type: object
        $ref: '#/definitions/Model_Document'
      _payDate:
        description: ''
        type: string
        format: date-time
      _status:
        description: ''
        type: integer
        default: 100
        enum:
          - 50 (Created)
          - 100 (Delivered)
          - 1000 (Payed)
      _object:
        description: ''
        type: object
      _sumNet:
        description: ''
        type: number
        format: float
        default: 0
      _sumTax:
        description: ''
        type: number
        format: float
        default: 0
      _sumGross:
        description: ''
        type: number
        format: float
        default: 0
      _sumNetAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _sumTaxAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _sumGrossAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _taxType:
        description: ''
        type: string
      _creditDebit:
        description: ''
        type: string
      _hidden:
        description: ''
        type: boolean
      _costCentre:
        description: ''
        type: object
        $ref: '#/definitions/Model_CostCentre'
      _origin:
        description: ''
        type: object
      _voucherType:
        description: ''
        type: string
      _recurringIntervall:
        description: ''
        type: integer
      _recurringStartDate:
        description: ''
        type: string
        format: date-time
      _recurringNextVoucher:
        description: ''
        type: string
        format: date-time
      _recurringLastVoucher:
        description: ''
        type: string
        format: date-time
      _recurringEndDate:
        description: ''
        type: string
        format: date-time
      _enshrined:
        description: ''
        type: boolean
      _inSource:
        description: ''
        type: string
      _taxSet:
        description: ''
        type: object
        $ref: '#/definitions/Model_TaxSet'
      _iban:
        description: ''
        type: string
      _accountingSpecialCase:
        description: ''
        type: string
      _paymentDeadline:
        description: ''
        type: string
        format: date-time
      _tip:
        description: ''
        type: number
        format: float
        default: 0
    type: object
    xml:
      name: Voucher
  Model_VoucherLog:
    properties:
      _create:
        description: date the voucher log was created
        type: string
        format: date-time
      _voucher:
        description: voucher to which the log belongs
        type: object
        $ref: '#/definitions/Model_Voucher'
      _fromStatus:
        description: status of the voucher before the logged change
        type: integer
      _toStatus:
        description: status of the voucher after the logged change
        type: integer
      _amountPayed:
        description: amount which was payed
        type: number
        format: float
      _bookingDate:
        description: date of the booking
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
    type: object
    xml:
      name: VoucherLog
  Model_VoucherPos:
    properties:
      _create:
        description: date the voucher positions was created
        type: string
        format: date-time
      _update:
        description: date the voucher position was last updated
        type: string
        format: date-time
      _sevClient:
        description: >-
          sevClient is the unique id every customer has and is used in nearly
          all operations
        type: object
      _voucher:
        description: voucher to which the position belongs
        type: object
        $ref: '#/definitions/Model_Voucher'
      _accountingType:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _estimatedAccountingType:
        description: ''
        type: object
        $ref: '#/definitions/Model_AccountingType'
      _taxRate:
        description: ''
        type: number
        format: float
      _sum:
        description: ''
        type: number
        format: float
      _net:
        description: ''
        type: boolean
      _isAsset:
        description: ''
        type: boolean
      _sumNet:
        description: ''
        type: number
        format: float
        default: 0
      _sumTax:
        description: ''
        type: number
        format: float
        default: 0
      _sumGross:
        description: ''
        type: number
        format: float
        default: 0
      _sumNetAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _sumTaxAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _sumGrossAccounting:
        description: ''
        type: number
        format: float
        default: 0
      _comment:
        description: ''
        type: string
      _isGwg:
        description: ''
        type: boolean
      _cateringTaxRate:
        description: ''
        type: number
        format: float
      _cateringTip:
        description: ''
        type: number
        format: float
    type: object
    xml:
      name: VoucherPos
  Model_Voucher_Factory:
    description: >-
      Below are the models which can be used for the saveVoucher function.
      Beware that you need to use them without the underscore at the beginning!
    properties:
      'voucher[]':
        description: the Model_Voucher to create/update
        type: object
        $ref: '#/definitions/Model_Voucher'
      'voucherPosSave[]':
        description: the Model_VoucherPos to create/update
        type: object
        $ref: '#/definitions/Model_VoucherPos'
      voucherPosDelete:
        description: the Model_VoucherPos to delete
        type: object
        $ref: '#/definitions/Model_VoucherPos'
    type: object
    xml:
      name: VoucherFactory
securityDefinitions:
  api_key:
    type: apiKey
    name: token
    in: query
tags:
  - name: Contact
    description: Everything about the Contact model
  - name: Invoice
    description: Everything about the Invoice model
  - name: InvoicePos
    description: Everything about the InvoicePos (invoice positions) model
  - name: Order
    description: Everything about the Order model
  - name: OrderPos
    description: Everything about the OrderPos (order positions) model
  - name: Unity
    description: Everything about the Unity model
  - name: Task
    description: Everything about the Task model
  - name: Feed
    description: Everything about the Feed model
  - name: Part
    description: Everything about the Part model
  - name: SevClient
    description: Everything about the SevClient model
  - name: Voucher
    description: Everything about the Voucher model
  - name: PaymentMethod
    description: Everything about the PaymentMethod model
  - name: Discounts
    description: Everything about the Discounts model
  - name: AccountingContact
    description: Everything about the AccountingContact model
  - name: AccountingType
    description: Everything about the AccountingType model
  - name: AccountingSystemNumber
    description: Everything about the AccountingSystemNumber model
  - name: Asset
    description: Everything about the Asset model
  - name: AssetPos
    description: Everything about the AssetPos (asset position) model
  - name: Category
    description: Everything about the Category model
  - name: CheckAccount
    description: Everything about the CheckAccount model
  - name: CheckAccountTransaction
    description: Everything about the CheckAccountTransaction model
  - name: CheckAccountTransactionLog
    description: Everything about the CheckAccountTransactionLog model
  - name: CommunicationWay
    description: Everything about the CommunicationWay model
  - name: VoucherPos
    description: Everything about the VoucherPos (voucher position) model
  - name: CommunicationWayKey
    description: Everything about the CommunicationWayKey model. Note that it is read only!
  - name: ContactAddress
    description: Everything about the ContactAddress model
  - name: CostCentre
    description: Everything about the CostCentre model
  - name: CurrencyExchangeRate
    description: >-
      Everything about the CurrencyExchangeRate model. Note that it is read
      only!
  - name: Document
    description: Everything about the Document model
  - name: DocumentFolder
    description: Everything about the DocumentFolder model
  - name: Email
    description: Everything about the Email model
  - name: Help
    description: Everything about the Help model
  - name: InventoryPartLog
    description: Everything about the InventoryPartLog model
  - name: Tag
    description: Everything about the Tag model
  - name: InvoiceLog
    description: Everything about the InvoiceLog model
  - name: ObjectUsed
    description: Everything about the ObjectUsed model. Note that it is read-only
  - name: ObjectViewed
    description: Everything about the ObjectViewed model. Note that it is read-only!
  - name: OrderLog
    description: Everything about the OrderLog model
  - name: PartUnity
    description: Everything about the PartUnity model
  - name: PartContactPrice
    description: Everything about the PartContactPrice model
  - name: Place
    description: Everything about the Place model. Note that it is read-only!
  - name: Report
    description: >-
      Everything about the Report model. Note that it is not db based and is
      only responsible for the export of different models!
  - name: AccountingCorrection
    description: Everything about the AccountingCorrection model
  - name: AccountingIndex
    description: Everything about the AccountingIndex model
  - name: AccountingSystem
    description: Everything about the AccountingSystem model. Note that it is read-only!
  - name: Aggregator
    description: >-
      Everything about the Aggregator model. Note that it is not db based and
      only contains several function returning calculated data from other
      models!
  - name: DocServer
    description: >-
      Everything about the DocServer model. Note that it is not db based and is
      only responsible for storing and getting data on the doc server!
  - name: DocumentIndex
    description: Everything about the DocumentIndex model. Note that it is read-only!
  - name: EntryType
    description: Everything about the EntryType model
  - name: Export
    description: >-
      Everything about the Export model. Note that it is not db based and is
      only responsible for the export of different models!
  - name: Search
    description: Everything about the Search model. Note that it is not db based!
  - name: SevClientConfig
    description: Everything about the SevClientConfig model
  - name: SevQuery
    description: Everything about the SevQuery model. Note that it is not db based!
  - name: SevSequence
    description: Everything about the SevSequence model. Note that it is read-only!
  - name: SevToken
    description: Everything about the SevToken model. Note that it is read-only!
  - name: SevUser
    description: Everything about the SevUser model. Note that it is read-only!
  - name: StaticCountry
    description: Everything about the StaticCountry model. Note that it is read-only!
  - name: StaticIndustry
    description: Everything about the StaticIndustry model. Note that it is read-only!
  - name: StaticReferralProgram
    description: >-
      Everything about the StaticReferralProgram model. Note that it is
      read-only!
  - name: SubscriptionHistory
    description: Everything about the SubscriptionHistory model. Note that it is read-only!
  - name: SubscriptionType
    description: Everything about the SubscriptionType model. Note that it is read-only!
  - name: SwissEsr
    description: Everything about the SwissEsr model
  - name: TagRelation
    description: Everything about the TagRelation model
  - name: TaxSet
    description: Everything about the TaxSet model
  - name: TextTemplate
    description: Everything about the TextTemplate model
  - name: VoucherLog
    description: Everything about the VoucherLog model