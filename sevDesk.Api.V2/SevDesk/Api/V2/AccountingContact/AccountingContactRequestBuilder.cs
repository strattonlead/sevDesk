// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.AccountingContact.Item;
using SevDesk.Api.V2.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.AccountingContact
{
    /// <summary>
    /// Builds and executes requests for operations under \AccountingContact
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class AccountingContactRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the sevDesk.Api.V2.AccountingContact.item collection</summary>
        /// <param name="position">ID of accounting contact to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder"/></returns>
        public global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("accountingContactId", position);
                return new global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.AccountingContact.item collection</summary>
        /// <param name="position">ID of accounting contact to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("accountingContactId", position);
                return new global::SevDesk.Api.V2.AccountingContact.Item.WithAccountingContactItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountingContactRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/AccountingContact{?contact%5Bid%5D*,contact%5BobjectName%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AccountingContactRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/AccountingContact{?contact%5Bid%5D*,contact%5BobjectName%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all accounting contact which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.AccountingContact.AccountingContactGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.AccountingContact.AccountingContactGetResponse?> GetAsAccountingContactGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.AccountingContact.AccountingContactGetResponse> GetAsAccountingContactGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.AccountingContact.AccountingContactGetResponse>(requestInfo, global::SevDesk.Api.V2.AccountingContact.AccountingContactGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all accounting contact which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.AccountingContact.AccountingContactResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsAccountingContactGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.AccountingContact.AccountingContactResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.AccountingContact.AccountingContactResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.AccountingContact.AccountingContactResponse>(requestInfo, global::SevDesk.Api.V2.AccountingContact.AccountingContactResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new accounting contact.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_AccountingContactResponse"/></returns>
        /// <param name="body">Accounting contact model</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Models.Model_AccountingContactResponse?> PostAsync(global::SevDesk.Api.V2.Models.Model_AccountingContact body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Models.Model_AccountingContactResponse> PostAsync(global::SevDesk.Api.V2.Models.Model_AccountingContact body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Models.Model_AccountingContactResponse>(requestInfo, global::SevDesk.Api.V2.Models.Model_AccountingContactResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all accounting contact which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new accounting contact.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Accounting contact model</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_AccountingContact body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_AccountingContact body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all accounting contact which have been added up until now. Filters can be added.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AccountingContactRequestBuilderGetQueryParameters 
        {
            /// <summary>ID of contact for which you want the accounting contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contact%5Bid%5D")]
            public string? Contactid { get; set; }
#nullable restore
#else
            [QueryParameter("contact%5Bid%5D")]
            public string Contactid { get; set; }
#endif
            /// <summary>Object name. Only needed if you also defined the ID of a contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contact%5BobjectName%5D")]
            public string? ContactobjectName { get; set; }
#nullable restore
#else
            [QueryParameter("contact%5BobjectName%5D")]
            public string ContactobjectName { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AccountingContactRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.AccountingContact.AccountingContactRequestBuilder.AccountingContactRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AccountingContactRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
