// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    /// <summary>
    /// Model holds data about a single selectable account with additional information matching to that account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ReceiptGuideDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>The ID of the matching account datev</summary>
        public int? AccountDatevId { get; set; }
        /// <summary>The name of the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountName { get; set; }
#nullable restore
#else
        public string AccountName { get; set; }
#endif
        /// <summary>The account number of the account datev (dependent on the active accounting system of the client)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An array that holds the viable receipt types for this account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedReceiptTypes { get; set; }
#nullable restore
#else
        public List<string> AllowedReceiptTypes { get; set; }
#endif
        /// <summary>An array that holds all possible tax rules for this account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SevDesk.Api.V2.Models.ReceiptGuideDto_allowedTaxRules>? AllowedTaxRules { get; set; }
#nullable restore
#else
        public List<global::SevDesk.Api.V2.Models.ReceiptGuideDto_allowedTaxRules> AllowedTaxRules { get; set; }
#endif
        /// <summary>The description of the account and/or what the account is used for</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.ReceiptGuideDto"/> and sets the default values.
        /// </summary>
        public ReceiptGuideDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.ReceiptGuideDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.ReceiptGuideDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.ReceiptGuideDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountDatevId", n => { AccountDatevId = n.GetIntValue(); } },
                { "accountName", n => { AccountName = n.GetStringValue(); } },
                { "accountNumber", n => { AccountNumber = n.GetStringValue(); } },
                { "allowedReceiptTypes", n => { AllowedReceiptTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "allowedTaxRules", n => { AllowedTaxRules = n.GetCollectionOfObjectValues<global::SevDesk.Api.V2.Models.ReceiptGuideDto_allowedTaxRules>(global::SevDesk.Api.V2.Models.ReceiptGuideDto_allowedTaxRules.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("accountDatevId", AccountDatevId);
            writer.WriteStringValue("accountName", AccountName);
            writer.WriteStringValue("accountNumber", AccountNumber);
            writer.WriteCollectionOfPrimitiveValues<string>("allowedReceiptTypes", AllowedReceiptTypes);
            writer.WriteCollectionOfObjectValues<global::SevDesk.Api.V2.Models.ReceiptGuideDto_allowedTaxRules>("allowedTaxRules", AllowedTaxRules);
            writer.WriteStringValue("description", Description);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
