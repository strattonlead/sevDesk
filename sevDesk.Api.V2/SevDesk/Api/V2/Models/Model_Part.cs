// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    /// <summary>
    /// Part model
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Model_Part : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Category of the part.&lt;br&gt;    For all categories, send a GET to /Category?objectType=Part</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_Part_category? Category { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_Part_category Category { get; set; }
#endif
        /// <summary>Date of part creation</summary>
        public DateTimeOffset? Create { get; private set; }
        /// <summary>The part id</summary>
        public int? Id { get; private set; }
        /// <summary>An internal comment for the part.&lt;br&gt;     Does not appear on invoices and orders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InternalComment { get; set; }
#nullable restore
#else
        public string InternalComment { get; set; }
#endif
        /// <summary>Name of the part</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The part object name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; private set; }
#nullable restore
#else
        public string ObjectName { get; private set; }
#endif
        /// <summary>The part number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PartNumber { get; set; }
#nullable restore
#else
        public string PartNumber { get; set; }
#endif
        /// <summary>Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.</summary>
        public float? Price { get; set; }
        /// <summary>Gross price for which the part is sold</summary>
        public float? PriceGross { get; set; }
        /// <summary>Net price for which the part is sold</summary>
        public float? PriceNet { get; set; }
        /// <summary>Purchase price of the part</summary>
        public float? PricePurchase { get; set; }
        /// <summary>Client to which part belongs. Will be filled automatically</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_Part_sevClient? SevClient { get; private set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_Part_sevClient SevClient { get; private set; }
#endif
        /// <summary>Status of the part. 50 &lt;-&gt; Inactive - 100 &lt;-&gt; Active</summary>
        public int? Status { get; set; }
        /// <summary>The stock of the part</summary>
        public float? Stock { get; set; }
        /// <summary>Defines if the stock should be enabled</summary>
        public bool? StockEnabled { get; set; }
        /// <summary>Tax rate of the part</summary>
        public float? TaxRate { get; set; }
        /// <summary>A text describing the part</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The unit in which the part is measured</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_Part_unity? Unity { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_Part_unity Unity { get; set; }
#endif
        /// <summary>Date of last part update</summary>
        public DateTimeOffset? Update { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.Model_Part"/> and sets the default values.
        /// </summary>
        public Model_Part()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_Part"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.Model_Part CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.Model_Part();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category", n => { Category = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_Part_category>(global::SevDesk.Api.V2.Models.Model_Part_category.CreateFromDiscriminatorValue); } },
                { "create", n => { Create = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "internalComment", n => { InternalComment = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "objectName", n => { ObjectName = n.GetStringValue(); } },
                { "partNumber", n => { PartNumber = n.GetStringValue(); } },
                { "price", n => { Price = n.GetFloatValue(); } },
                { "priceGross", n => { PriceGross = n.GetFloatValue(); } },
                { "priceNet", n => { PriceNet = n.GetFloatValue(); } },
                { "pricePurchase", n => { PricePurchase = n.GetFloatValue(); } },
                { "sevClient", n => { SevClient = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_Part_sevClient>(global::SevDesk.Api.V2.Models.Model_Part_sevClient.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "stock", n => { Stock = n.GetFloatValue(); } },
                { "stockEnabled", n => { StockEnabled = n.GetBoolValue(); } },
                { "taxRate", n => { TaxRate = n.GetFloatValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "unity", n => { Unity = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_Part_unity>(global::SevDesk.Api.V2.Models.Model_Part_unity.CreateFromDiscriminatorValue); } },
                { "update", n => { Update = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_Part_category>("category", Category);
            writer.WriteStringValue("internalComment", InternalComment);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("partNumber", PartNumber);
            writer.WriteFloatValue("price", Price);
            writer.WriteFloatValue("priceGross", PriceGross);
            writer.WriteFloatValue("priceNet", PriceNet);
            writer.WriteFloatValue("pricePurchase", PricePurchase);
            writer.WriteIntValue("status", Status);
            writer.WriteFloatValue("stock", Stock);
            writer.WriteBoolValue("stockEnabled", StockEnabled);
            writer.WriteFloatValue("taxRate", TaxRate);
            writer.WriteStringValue("text", Text);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_Part_unity>("unity", Unity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
