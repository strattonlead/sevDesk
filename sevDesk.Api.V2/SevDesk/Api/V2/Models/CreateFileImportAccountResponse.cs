// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    /// <summary>
    /// CheckAccount model. Showing the properties relevant to file import accounts.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class CreateFileImportAccountResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountingNumber { get; set; }
#nullable restore
#else
        public string AccountingNumber { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.</summary>
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_autoMapTransactions? AutoMapTransactions { get; set; }
        /// <summary>Date of check account creation</summary>
        public DateTimeOffset? Create { get; set; }
        /// <summary>The currency of the check account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Defines if this check account is the default account.</summary>
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_defaultAccount? DefaultAccount { get; set; }
        /// <summary>The IBAN of the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iban { get; set; }
#nullable restore
#else
        public string Iban { get; set; }
#endif
        /// <summary>The check account id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Import type, for accounts that are type &quot;online&quot; but not connected to a data provider. Transactions can be imported by this method on the check account.</summary>
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_importType? ImportType { get; set; }
        /// <summary>Name of the check account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The check account object name, always &apos;CheckAccount&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>Client to which check account belongs. Will be filled automatically</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_sevClient? SevClient { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_sevClient SevClient { get; set; }
#endif
        /// <summary>Status of the check account. 0 &lt;-&gt; Archived - 100 &lt;-&gt; Active</summary>
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_status? Status { get; set; }
        /// <summary>The type of the check account. Account with a CSV or MT940 import are regarded as online.</summary>
        public global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_type? Type { get; set; }
        /// <summary>Date of last check account update</summary>
        public DateTimeOffset? Update { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse"/> and sets the default values.
        /// </summary>
        public CreateFileImportAccountResponse()
        {
            AdditionalData = new Dictionary<string, object>();
            AutoMapTransactions = global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_autoMapTransactions.One;
            DefaultAccount = global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_defaultAccount.Zero;
            Status = global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_status.OneZeroZero;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountingNumber", n => { AccountingNumber = n.GetStringValue(); } },
                { "autoMapTransactions", n => { AutoMapTransactions = n.GetEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_autoMapTransactions>(); } },
                { "create", n => { Create = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "defaultAccount", n => { DefaultAccount = n.GetEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_defaultAccount>(); } },
                { "iban", n => { Iban = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "importType", n => { ImportType = n.GetEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_importType>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "objectName", n => { ObjectName = n.GetStringValue(); } },
                { "sevClient", n => { SevClient = n.GetObjectValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_sevClient>(global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_sevClient.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_type>(); } },
                { "update", n => { Update = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountingNumber", AccountingNumber);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_autoMapTransactions>("autoMapTransactions", AutoMapTransactions);
            writer.WriteDateTimeOffsetValue("create", Create);
            writer.WriteStringValue("currency", Currency);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_defaultAccount>("defaultAccount", DefaultAccount);
            writer.WriteStringValue("iban", Iban);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_importType>("importType", ImportType);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("objectName", ObjectName);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_sevClient>("sevClient", SevClient);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_status>("status", Status);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.CreateFileImportAccountResponse_type>("type", Type);
            writer.WriteDateTimeOffsetValue("update", Update);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
