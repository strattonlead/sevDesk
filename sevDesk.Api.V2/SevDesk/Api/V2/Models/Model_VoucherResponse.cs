// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    /// <summary>
    /// Voucher model
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Model_VoucherResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Cost centre for the voucher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_costCentre? CostCentre { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_costCentre CostCentre { get; set; }
#endif
        /// <summary>Date of voucher creation</summary>
        public DateTimeOffset? Create { get; private set; }
        /// <summary>User who created the voucher. Will be filled automatically.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_createUser? CreateUser { get; private set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_createUser CreateUser { get; private set; }
#endif
        /// <summary>Defines if your voucher is a credit (C) or debit (D)</summary>
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_creditDebit? CreditDebit { get; set; }
        /// <summary>specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the &quot;propertyForeignCurrencyDeadline&quot; or &quot;propertyExchangeRate&quot; parameter must be specified. If both parameters are specified, then the &quot;propertyForeignCurrencyDeadline&quot; parameter is preferred</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Needs to be provided as timestamp or dd.mm.yyyy</summary>
        public DateTimeOffset? DeliveryDate { get; set; }
        /// <summary>Needs to be provided as timestamp or dd.mm.yyyy</summary>
        public DateTimeOffset? DeliveryDateUntil { get; set; }
        /// <summary>The description of the voucher. Essentially the voucher number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The document of the voucher.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_document? Document { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_document Document { get; set; }
#endif
        /// <summary>Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.</summary>
        public DateTimeOffset? Enshrined { get; private set; }
        /// <summary>The voucher id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The mapAll property</summary>
        public bool? MapAll { get; set; }
        /// <summary>The voucher object name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; private set; }
#nullable restore
#else
        public string ObjectName { get; private set; }
#endif
        /// <summary>Amount which has already been paid for this voucher by the customer</summary>
        public double? PaidAmount { get; private set; }
        /// <summary>Needs to be timestamp or dd.mm.yyyy</summary>
        public DateTimeOffset? PayDate { get; set; }
        /// <summary>Payment deadline of the voucher.</summary>
        public DateTimeOffset? PaymentDeadline { get; set; }
        /// <summary>Defines the exchange rate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PropertyExchangeRate { get; set; }
#nullable restore
#else
        public string PropertyExchangeRate { get; set; }
#endif
        /// <summary>Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy</summary>
        public DateTimeOffset? PropertyForeignCurrencyDeadline { get; set; }
        /// <summary>The date when the recurring vouchers end being generated.&lt;br&gt;    Necessary attribute for all recurring vouchers.</summary>
        public DateTimeOffset? RecurringEndDate { get; set; }
        /// <summary>The DateInterval in which recurring vouchers are generated.&lt;br&gt;     Necessary attribute for all recurring vouchers.</summary>
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_recurringInterval? RecurringInterval { get; set; }
        /// <summary>The date when the last voucher was generated.</summary>
        public DateTimeOffset? RecurringLastVoucher { get; set; }
        /// <summary>The date when the next voucher should be generated.&lt;br&gt;     Necessary attribute for all recurring vouchers.</summary>
        public DateTimeOffset? RecurringNextVoucher { get; set; }
        /// <summary>The date when the recurring vouchers start being generated.&lt;br&gt;     Necessary attribute for all recurring vouchers.</summary>
        public DateTimeOffset? RecurringStartDate { get; set; }
        /// <summary>Client to which voucher belongs. Will be filled automatically</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_sevClient? SevClient { get; private set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_sevClient SevClient { get; private set; }
#endif
        /// <summary>Please have a look in     &lt;a href=&apos;#tag/Voucher/Types-and-status-of-vouchers&apos;&gt;status of vouchers&lt;/a&gt;    to see what the different status codes mean</summary>
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_status? Status { get; set; }
        /// <summary>Sum of all discounts in the voucher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumDiscounts { get; private set; }
#nullable restore
#else
        public string SumDiscounts { get; private set; }
#endif
        /// <summary>Discounts sum of the voucher in the foreign currency</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumDiscountsForeignCurrency { get; private set; }
#nullable restore
#else
        public string SumDiscountsForeignCurrency { get; private set; }
#endif
        /// <summary>Gross sum of the voucher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumGross { get; private set; }
#nullable restore
#else
        public string SumGross { get; private set; }
#endif
        /// <summary>Gross accounting sum of the voucher. Is usually the same as sumGross</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumGrossAccounting { get; private set; }
#nullable restore
#else
        public string SumGrossAccounting { get; private set; }
#endif
        /// <summary>Net sum of the voucher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumNet { get; private set; }
#nullable restore
#else
        public string SumNet { get; private set; }
#endif
        /// <summary>Net accounting sum of the voucher. Is usually the same as sumNet</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumNetAccounting { get; private set; }
#nullable restore
#else
        public string SumNetAccounting { get; private set; }
#endif
        /// <summary>Tax sum of the voucher</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumTax { get; private set; }
#nullable restore
#else
        public string SumTax { get; private set; }
#endif
        /// <summary>Tax accounting sum of the voucher. Is usually the same as sumTax</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SumTaxAccounting { get; private set; }
#nullable restore
#else
        public string SumTaxAccounting { get; private set; }
#endif
        /// <summary>The contact used in the voucher as a supplier.&lt;br&gt;If you don&apos;t have a contact as a supplier, you can set this object to null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_supplier? Supplier { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_supplier Supplier { get; set; }
#endif
        /// <summary>The supplier name.&lt;br&gt;     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierName { get; set; }
#nullable restore
#else
        public string SupplierName { get; set; }
#endif
        /// <summary>**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxRule? TaxRule { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxRule TaxRule { get; set; }
#endif
        /// <summary>**Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**Tax set of the voucher. Needs to be added if you chose the taxType=custom.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxSet? TaxSet { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxSet TaxSet { get; set; }
#endif
        /// <summary>**Use this in sevdesk-Update 1.0 (instead of taxRule).**Tax type of the voucher.There are four tax types:1. default - Umsatzsteuer ausweisen2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)4. custom - Using custom tax set5. ss - Not subject to VAT according to §19 1 UStGTax rates are heavily connected to the tax type used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxType { get; set; }
#nullable restore
#else
        public string TaxType { get; set; }
#endif
        /// <summary>Date of last voucher update</summary>
        public DateTimeOffset? Update { get; private set; }
        /// <summary>Needs to be provided as timestamp or dd.mm.yyyy</summary>
        public DateTimeOffset? VoucherDate { get; set; }
        /// <summary>Type of the voucher. For more information on the different types, check     &lt;a href=&apos;#tag/Voucher/Types-and-status-of-vouchers&apos;&gt;this&lt;/a&gt;</summary>
        public global::SevDesk.Api.V2.Models.Model_VoucherResponse_voucherType? VoucherType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.Model_VoucherResponse"/> and sets the default values.
        /// </summary>
        public Model_VoucherResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_VoucherResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.Model_VoucherResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.Model_VoucherResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "costCentre", n => { CostCentre = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_costCentre>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_costCentre.CreateFromDiscriminatorValue); } },
                { "create", n => { Create = n.GetDateTimeOffsetValue(); } },
                { "createUser", n => { CreateUser = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_createUser>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_createUser.CreateFromDiscriminatorValue); } },
                { "creditDebit", n => { CreditDebit = n.GetEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_creditDebit>(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "deliveryDate", n => { DeliveryDate = n.GetDateTimeOffsetValue(); } },
                { "deliveryDateUntil", n => { DeliveryDateUntil = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "document", n => { Document = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_document>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_document.CreateFromDiscriminatorValue); } },
                { "enshrined", n => { Enshrined = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "mapAll", n => { MapAll = n.GetBoolValue(); } },
                { "objectName", n => { ObjectName = n.GetStringValue(); } },
                { "paidAmount", n => { PaidAmount = n.GetDoubleValue(); } },
                { "payDate", n => { PayDate = n.GetDateTimeOffsetValue(); } },
                { "paymentDeadline", n => { PaymentDeadline = n.GetDateTimeOffsetValue(); } },
                { "propertyExchangeRate", n => { PropertyExchangeRate = n.GetStringValue(); } },
                { "propertyForeignCurrencyDeadline", n => { PropertyForeignCurrencyDeadline = n.GetDateTimeOffsetValue(); } },
                { "recurringEndDate", n => { RecurringEndDate = n.GetDateTimeOffsetValue(); } },
                { "recurringInterval", n => { RecurringInterval = n.GetEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_recurringInterval>(); } },
                { "recurringLastVoucher", n => { RecurringLastVoucher = n.GetDateTimeOffsetValue(); } },
                { "recurringNextVoucher", n => { RecurringNextVoucher = n.GetDateTimeOffsetValue(); } },
                { "recurringStartDate", n => { RecurringStartDate = n.GetDateTimeOffsetValue(); } },
                { "sevClient", n => { SevClient = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_sevClient>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_sevClient.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_status>(); } },
                { "sumDiscounts", n => { SumDiscounts = n.GetStringValue(); } },
                { "sumDiscountsForeignCurrency", n => { SumDiscountsForeignCurrency = n.GetStringValue(); } },
                { "sumGross", n => { SumGross = n.GetStringValue(); } },
                { "sumGrossAccounting", n => { SumGrossAccounting = n.GetStringValue(); } },
                { "sumNet", n => { SumNet = n.GetStringValue(); } },
                { "sumNetAccounting", n => { SumNetAccounting = n.GetStringValue(); } },
                { "sumTax", n => { SumTax = n.GetStringValue(); } },
                { "sumTaxAccounting", n => { SumTaxAccounting = n.GetStringValue(); } },
                { "supplier", n => { Supplier = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_supplier>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_supplier.CreateFromDiscriminatorValue); } },
                { "supplierName", n => { SupplierName = n.GetStringValue(); } },
                { "taxRule", n => { TaxRule = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxRule>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxRule.CreateFromDiscriminatorValue); } },
                { "taxSet", n => { TaxSet = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxSet>(global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxSet.CreateFromDiscriminatorValue); } },
                { "taxType", n => { TaxType = n.GetStringValue(); } },
                { "update", n => { Update = n.GetDateTimeOffsetValue(); } },
                { "voucherDate", n => { VoucherDate = n.GetDateTimeOffsetValue(); } },
                { "voucherType", n => { VoucherType = n.GetEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_voucherType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_costCentre>("costCentre", CostCentre);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_creditDebit>("creditDebit", CreditDebit);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("deliveryDate", DeliveryDate);
            writer.WriteDateTimeOffsetValue("deliveryDateUntil", DeliveryDateUntil);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_document>("document", Document);
            writer.WriteBoolValue("mapAll", MapAll);
            writer.WriteDateTimeOffsetValue("payDate", PayDate);
            writer.WriteDateTimeOffsetValue("paymentDeadline", PaymentDeadline);
            writer.WriteStringValue("propertyExchangeRate", PropertyExchangeRate);
            writer.WriteDateTimeOffsetValue("propertyForeignCurrencyDeadline", PropertyForeignCurrencyDeadline);
            writer.WriteDateTimeOffsetValue("recurringEndDate", RecurringEndDate);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_recurringInterval>("recurringInterval", RecurringInterval);
            writer.WriteDateTimeOffsetValue("recurringLastVoucher", RecurringLastVoucher);
            writer.WriteDateTimeOffsetValue("recurringNextVoucher", RecurringNextVoucher);
            writer.WriteDateTimeOffsetValue("recurringStartDate", RecurringStartDate);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_status>("status", Status);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_supplier>("supplier", Supplier);
            writer.WriteStringValue("supplierName", SupplierName);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxRule>("taxRule", TaxRule);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_taxSet>("taxSet", TaxSet);
            writer.WriteStringValue("taxType", TaxType);
            writer.WriteDateTimeOffsetValue("voucherDate", VoucherDate);
            writer.WriteEnumValue<global::SevDesk.Api.V2.Models.Model_VoucherResponse_voucherType>("voucherType", VoucherType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
