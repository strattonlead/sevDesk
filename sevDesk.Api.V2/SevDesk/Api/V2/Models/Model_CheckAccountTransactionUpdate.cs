// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    /// <summary>
    /// CheckAccountTransaction model. Responsible for the transactions on payment accounts.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class Model_CheckAccountTransactionUpdate : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of the transaction</summary>
        public float? Amount { get; set; }
        /// <summary>The check account to which the transaction belongs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_checkAccount? CheckAccount { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_checkAccount CheckAccount { get; set; }
#endif
        /// <summary>Date the check account transaction was imported</summary>
        public DateTimeOffset? EntryDate { get; set; }
        /// <summary>Name of the payee/payer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PayeePayerName { get; set; }
#nullable restore
#else
        public string PayeePayerName { get; set; }
#endif
        /// <summary>the purpose of the transaction</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymtPurpose { get; set; }
#nullable restore
#else
        public string PaymtPurpose { get; set; }
#endif
        /// <summary>The check account transaction serving as the source of the rebooking</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_sourceTransaction? SourceTransaction { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_sourceTransaction SourceTransaction { get; set; }
#endif
        /// <summary>Status of the check account transaction.&lt;br&gt;     100 &lt;-&gt; Created&lt;br&gt;     200 &lt;-&gt; Linked&lt;br&gt;     300 &lt;-&gt; Private&lt;br&gt;     400 &lt;-&gt; Booked</summary>
        public int? Status { get; set; }
        /// <summary>The check account transaction serving as the target of the rebooking</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_targetTransaction? TargetTransaction { get; set; }
#nullable restore
#else
        public global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_targetTransaction TargetTransaction { get; set; }
#endif
        /// <summary>Date the check account transaction was booked</summary>
        public DateTimeOffset? ValueDate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate"/> and sets the default values.
        /// </summary>
        public Model_CheckAccountTransactionUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetFloatValue(); } },
                { "checkAccount", n => { CheckAccount = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_checkAccount>(global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_checkAccount.CreateFromDiscriminatorValue); } },
                { "entryDate", n => { EntryDate = n.GetDateTimeOffsetValue(); } },
                { "payeePayerName", n => { PayeePayerName = n.GetStringValue(); } },
                { "paymtPurpose", n => { PaymtPurpose = n.GetStringValue(); } },
                { "sourceTransaction", n => { SourceTransaction = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_sourceTransaction>(global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_sourceTransaction.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "targetTransaction", n => { TargetTransaction = n.GetObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_targetTransaction>(global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_targetTransaction.CreateFromDiscriminatorValue); } },
                { "valueDate", n => { ValueDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("amount", Amount);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_checkAccount>("checkAccount", CheckAccount);
            writer.WriteDateTimeOffsetValue("entryDate", EntryDate);
            writer.WriteStringValue("payeePayerName", PayeePayerName);
            writer.WriteStringValue("paymtPurpose", PaymtPurpose);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_sourceTransaction>("sourceTransaction", SourceTransaction);
            writer.WriteIntValue("status", Status);
            writer.WriteObjectValue<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionUpdate_targetTransaction>("targetTransaction", TargetTransaction);
            writer.WriteDateTimeOffsetValue("valueDate", ValueDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
