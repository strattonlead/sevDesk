// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class Model_discountsResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date of discount creation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Create { get; set; }
#nullable restore
#else
        public string Create { get; set; }
#endif
        /// <summary>Indicates that this is a discount or a surcharge (0 = surcharge, 1 = discount)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Discount { get; set; }
#nullable restore
#else
        public string Discount { get; set; }
#endif
        /// <summary>The id of the discount</summary>
        public int? Id { get; set; }
        /// <summary>Defines is the Discount net or gross (0 = net, 1 = gross)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsNet { get; set; }
#nullable restore
#else
        public string IsNet { get; set; }
#endif
        /// <summary>Model name, which is &apos;Discounts&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>Defines if this is a percentage or an absolute discount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Percentage { get; set; }
#nullable restore
#else
        public string Percentage { get; set; }
#endif
        /// <summary>Client to which the discount belongs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SevClient { get; set; }
#nullable restore
#else
        public string SevClient { get; set; }
#endif
        /// <summary>A text describing your position.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>Date of last discount update</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Update { get; set; }
#nullable restore
#else
        public string Update { get; set; }
#endif
        /// <summary>Value of the discount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Models.Model_discountsResponse"/> and sets the default values.
        /// </summary>
        public Model_discountsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_discountsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Models.Model_discountsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Models.Model_discountsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "create", n => { Create = n.GetStringValue(); } },
                { "discount", n => { Discount = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "isNet", n => { IsNet = n.GetStringValue(); } },
                { "objectName", n => { ObjectName = n.GetStringValue(); } },
                { "percentage", n => { Percentage = n.GetStringValue(); } },
                { "sevClient", n => { SevClient = n.GetStringValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "update", n => { Update = n.GetStringValue(); } },
                { "value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("create", Create);
            writer.WriteStringValue("discount", Discount);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("isNet", IsNet);
            writer.WriteStringValue("objectName", ObjectName);
            writer.WriteStringValue("percentage", Percentage);
            writer.WriteStringValue("sevClient", SevClient);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("update", Update);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
