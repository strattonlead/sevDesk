// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate
{
    /// <summary>
    /// Builds and executes requests for operations under \CheckAccount\{checkAccountId}\getBalanceAtDate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class GetBalanceAtDateRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GetBalanceAtDateRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CheckAccount/{checkAccountId}/getBalanceAtDate?date={date}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GetBalanceAtDateRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CheckAccount/{checkAccountId}/getBalanceAtDate?date={date}", rawUrl)
        {
        }
        /// <summary>
        /// Get the balance, calculated as the sum of all transactions sevdesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevdesk did not import old transactions.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateGetResponse?> GetAsGetBalanceAtDateGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateGetResponse> GetAsGetBalanceAtDateGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateGetResponse>(requestInfo, global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the balance, calculated as the sum of all transactions sevdesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevdesk did not import old transactions.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsGetBalanceAtDateGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateResponse>(requestInfo, global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the balance, calculated as the sum of all transactions sevdesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevdesk did not import old transactions.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the balance, calculated as the sum of all transactions sevdesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevdesk did not import old transactions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class GetBalanceAtDateRequestBuilderGetQueryParameters 
        {
            /// <summary>Only consider transactions up to this date at 23:59:59</summary>
            [QueryParameter("date")]
            public Date? Date { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class GetBalanceAtDateRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.CheckAccount.Item.GetBalanceAtDate.GetBalanceAtDateRequestBuilder.GetBalanceAtDateRequestBuilderGetQueryParameters>
        {
        }
    }
}
