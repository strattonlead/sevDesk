// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.Contact.Factory;
using SevDesk.Api.V2.Contact.Item;
using SevDesk.Api.V2.Contact.Mapper;
using SevDesk.Api.V2.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.Contact
{
    /// <summary>
    /// Builds and executes requests for operations under \Contact
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ContactRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The Factory property</summary>
        public global::SevDesk.Api.V2.Contact.Factory.FactoryRequestBuilder Factory
        {
            get => new global::SevDesk.Api.V2.Contact.Factory.FactoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Mapper property</summary>
        public global::SevDesk.Api.V2.Contact.Mapper.MapperRequestBuilder Mapper
        {
            get => new global::SevDesk.Api.V2.Contact.Mapper.MapperRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.Contact.item collection</summary>
        /// <param name="position">ID of contact to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder"/></returns>
        public global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("contactId", position);
                return new global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.Contact.item collection</summary>
        /// <param name="position">ID of contact to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("contactId", position);
                return new global::SevDesk.Api.V2.Contact.Item.WithContactItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Contact.ContactRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContactRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Contact{?customerNumber*,depth*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Contact.ContactRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ContactRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Contact{?customerNumber*,depth*}", rawUrl)
        {
        }
        /// <summary>
        /// There are a multitude of parameter which can be used to filter.&lt;br&gt;     A few of them are attached but     for a complete list please check out &lt;a href=&apos;#tag/Contact/How-to-filter-for-certain-contacts&apos;&gt;this&lt;/a&gt; list
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.ContactGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Contact.ContactGetResponse?> GetAsContactGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Contact.ContactGetResponse> GetAsContactGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Contact.ContactGetResponse>(requestInfo, global::SevDesk.Api.V2.Contact.ContactGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// There are a multitude of parameter which can be used to filter.&lt;br&gt;     A few of them are attached but     for a complete list please check out &lt;a href=&apos;#tag/Contact/How-to-filter-for-certain-contacts&apos;&gt;this&lt;/a&gt; list
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.ContactResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsContactGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Contact.ContactResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Contact.ContactResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Contact.ContactResponse>(requestInfo, global::SevDesk.Api.V2.Contact.ContactResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new contact.&lt;br&gt;     For adding addresses and communication ways, you will need to use the ContactAddress and CommunicationWay endpoints.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_ContactResponse"/></returns>
        /// <param name="body">Contact model</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Models.Model_ContactResponse?> PostAsync(global::SevDesk.Api.V2.Models.Model_Contact body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Models.Model_ContactResponse> PostAsync(global::SevDesk.Api.V2.Models.Model_Contact body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Models.Model_ContactResponse>(requestInfo, global::SevDesk.Api.V2.Models.Model_ContactResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// There are a multitude of parameter which can be used to filter.&lt;br&gt;     A few of them are attached but     for a complete list please check out &lt;a href=&apos;#tag/Contact/How-to-filter-for-certain-contacts&apos;&gt;this&lt;/a&gt; list
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new contact.&lt;br&gt;     For adding addresses and communication ways, you will need to use the ContactAddress and CommunicationWay endpoints.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Contact model</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_Contact body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_Contact body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.ContactRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.Contact.ContactRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.Contact.ContactRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// There are a multitude of parameter which can be used to filter.&lt;br&gt;     A few of them are attached but     for a complete list please check out &lt;a href=&apos;#tag/Contact/How-to-filter-for-certain-contacts&apos;&gt;this&lt;/a&gt; list
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class ContactRequestBuilderGetQueryParameters 
        {
            /// <summary>Retrieve all contacts with this customer number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("customerNumber")]
            public string? CustomerNumber { get; set; }
#nullable restore
#else
            [QueryParameter("customerNumber")]
            public string CustomerNumber { get; set; }
#endif
            /// <summary>Defines if both organizations &lt;b&gt;and&lt;/b&gt; persons should be returned.&lt;br&gt;     &apos;0&apos; -&gt; only organizations, &apos;1&apos; -&gt; organizations and persons</summary>
            [Obsolete("This property is deprecated, use DepthAsGetDepthQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("depth")]
            public string? Depth { get; set; }
#nullable restore
#else
            [QueryParameter("depth")]
            public string Depth { get; set; }
#endif
            /// <summary>Defines if both organizations &lt;b&gt;and&lt;/b&gt; persons should be returned.&lt;br&gt;     &apos;0&apos; -&gt; only organizations, &apos;1&apos; -&gt; organizations and persons</summary>
            [QueryParameter("depth")]
            public global::SevDesk.Api.V2.Contact.GetDepthQueryParameterType? DepthAsGetDepthQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class ContactRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.Contact.ContactRequestBuilder.ContactRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class ContactRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
