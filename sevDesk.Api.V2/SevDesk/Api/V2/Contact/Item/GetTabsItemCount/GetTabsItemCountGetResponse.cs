// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SevDesk.Api.V2.Contact.Item.GetTabsItemCount
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class GetTabsItemCountGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The creditNotes property</summary>
        public double? CreditNotes { get; set; }
        /// <summary>The documents property</summary>
        public double? Documents { get; set; }
        /// <summary>The invoicePos property</summary>
        public double? InvoicePos { get; set; }
        /// <summary>The invoices property</summary>
        public double? Invoices { get; set; }
        /// <summary>The letters property</summary>
        public double? Letters { get; set; }
        /// <summary>The orders property</summary>
        public double? Orders { get; set; }
        /// <summary>The parts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Parts { get; set; }
#nullable restore
#else
        public string Parts { get; set; }
#endif
        /// <summary>The persons property</summary>
        public double? Persons { get; set; }
        /// <summary>The vouchers property</summary>
        public double? Vouchers { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Contact.Item.GetTabsItemCount.GetTabsItemCountGetResponse"/> and sets the default values.
        /// </summary>
        public GetTabsItemCountGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Contact.Item.GetTabsItemCount.GetTabsItemCountGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SevDesk.Api.V2.Contact.Item.GetTabsItemCount.GetTabsItemCountGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SevDesk.Api.V2.Contact.Item.GetTabsItemCount.GetTabsItemCountGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "creditNotes", n => { CreditNotes = n.GetDoubleValue(); } },
                { "documents", n => { Documents = n.GetDoubleValue(); } },
                { "invoicePos", n => { InvoicePos = n.GetDoubleValue(); } },
                { "invoices", n => { Invoices = n.GetDoubleValue(); } },
                { "letters", n => { Letters = n.GetDoubleValue(); } },
                { "orders", n => { Orders = n.GetDoubleValue(); } },
                { "parts", n => { Parts = n.GetStringValue(); } },
                { "persons", n => { Persons = n.GetDoubleValue(); } },
                { "vouchers", n => { Vouchers = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("creditNotes", CreditNotes);
            writer.WriteDoubleValue("documents", Documents);
            writer.WriteDoubleValue("invoicePos", InvoicePos);
            writer.WriteDoubleValue("invoices", Invoices);
            writer.WriteDoubleValue("letters", Letters);
            writer.WriteDoubleValue("orders", Orders);
            writer.WriteStringValue("parts", Parts);
            writer.WriteDoubleValue("persons", Persons);
            writer.WriteDoubleValue("vouchers", Vouchers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
