// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.CreditNote.Item.SendByWithRender
{
    /// <summary>
    /// Builds and executes requests for operations under \CreditNote\{creditNoteId}\sendByWithRender
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class SendByWithRenderRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SendByWithRenderRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CreditNote/{creditNoteId}/sendByWithRender?sendType={sendType}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SendByWithRenderRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CreditNote/{creditNoteId}/sendByWithRender?sendType={sendType}", rawUrl)
        {
        }
        /// <summary>
        /// Sending a credit note to end-customers is an important part of the bookkeeping process.&lt;br&gt; Depending on the way you want to send the credit note, you need to use different endpoints.&lt;br&gt; Let&apos;s start with just printing out the credit note, meaning we only need to render the pdf.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_CreditNote_sendByWithRender"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Models.Model_CreditNote_sendByWithRender?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder.SendByWithRenderRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Models.Model_CreditNote_sendByWithRender> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder.SendByWithRenderRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Models.Model_CreditNote_sendByWithRender>(requestInfo, global::SevDesk.Api.V2.Models.Model_CreditNote_sendByWithRender.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sending a credit note to end-customers is an important part of the bookkeeping process.&lt;br&gt; Depending on the way you want to send the credit note, you need to use different endpoints.&lt;br&gt; Let&apos;s start with just printing out the credit note, meaning we only need to render the pdf.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder.SendByWithRenderRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder.SendByWithRenderRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Sending a credit note to end-customers is an important part of the bookkeeping process.&lt;br&gt; Depending on the way you want to send the credit note, you need to use different endpoints.&lt;br&gt; Let&apos;s start with just printing out the credit note, meaning we only need to render the pdf.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class SendByWithRenderRequestBuilderGetQueryParameters 
        {
            /// <summary>the type you want to print.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sendType")]
            public string? SendType { get; set; }
#nullable restore
#else
            [QueryParameter("sendType")]
            public string SendType { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class SendByWithRenderRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.CreditNote.Item.SendByWithRender.SendByWithRenderRequestBuilder.SendByWithRenderRequestBuilderGetQueryParameters>
        {
        }
    }
}
