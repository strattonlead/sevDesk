// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.CommunicationWay.Item;
using SevDesk.Api.V2.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.CommunicationWay
{
    /// <summary>
    /// Builds and executes requests for operations under \CommunicationWay
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class CommunicationWayRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the sevDesk.Api.V2.CommunicationWay.item collection</summary>
        /// <param name="position">ID of communication way to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder"/></returns>
        public global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("communicationWayId", position);
                return new global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.CommunicationWay.item collection</summary>
        /// <param name="position">ID of communication way to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("communicationWayId", position);
                return new global::SevDesk.Api.V2.CommunicationWay.Item.WithCommunicationWayItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommunicationWayRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CommunicationWay{?contact%5Bid%5D*,contact%5BobjectName%5D*,main*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommunicationWayRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CommunicationWay{?contact%5Bid%5D*,contact%5BobjectName%5D*,main*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all communication ways which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CommunicationWay.CommunicationWayGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayGetResponse?> GetAsCommunicationWayGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayGetResponse> GetAsCommunicationWayGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayGetResponse>(requestInfo, global::SevDesk.Api.V2.CommunicationWay.CommunicationWayGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all communication ways which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CommunicationWay.CommunicationWayResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCommunicationWayGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayResponse>(requestInfo, global::SevDesk.Api.V2.CommunicationWay.CommunicationWayResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new contact communication way.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_CommunicationWayResponse"/></returns>
        /// <param name="body">Contact communication way model</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Models.Model_CommunicationWayResponse?> PostAsync(global::SevDesk.Api.V2.Models.Model_CommunicationWay body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Models.Model_CommunicationWayResponse> PostAsync(global::SevDesk.Api.V2.Models.Model_CommunicationWay body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Models.Model_CommunicationWayResponse>(requestInfo, global::SevDesk.Api.V2.Models.Model_CommunicationWayResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all communication ways which have been added up until now. Filters can be added.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new contact communication way.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Contact communication way model</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_CommunicationWay body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_CommunicationWay body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all communication ways which have been added up until now. Filters can be added.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CommunicationWayRequestBuilderGetQueryParameters 
        {
            /// <summary>ID of contact for which you want the communication ways.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contact%5Bid%5D")]
            public string? Contactid { get; set; }
#nullable restore
#else
            [QueryParameter("contact%5Bid%5D")]
            public string Contactid { get; set; }
#endif
            /// <summary>Object name. Only needed if you also defined the ID of a contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("contact%5BobjectName%5D")]
            public string? ContactobjectName { get; set; }
#nullable restore
#else
            [QueryParameter("contact%5BobjectName%5D")]
            public string ContactobjectName { get; set; }
#endif
            /// <summary>Define if you only want the main communication way.</summary>
            [Obsolete("This property is deprecated, use MainAsGetMainQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("main")]
            public string? Main { get; set; }
#nullable restore
#else
            [QueryParameter("main")]
            public string Main { get; set; }
#endif
            /// <summary>Define if you only want the main communication way.</summary>
            [QueryParameter("main")]
            public global::SevDesk.Api.V2.CommunicationWay.GetMainQueryParameterType? MainAsGetMainQueryParameterType { get; set; }
            /// <summary>Type of the communication ways you want to get.</summary>
            [Obsolete("This property is deprecated, use TypeAsGetTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>Type of the communication ways you want to get.</summary>
            [QueryParameter("type")]
            public global::SevDesk.Api.V2.CommunicationWay.GetTypeQueryParameterType? TypeAsGetTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CommunicationWayRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.CommunicationWay.CommunicationWayRequestBuilder.CommunicationWayRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CommunicationWayRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
