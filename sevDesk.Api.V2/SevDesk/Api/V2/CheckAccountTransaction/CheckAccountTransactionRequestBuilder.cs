// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.CheckAccountTransaction.Item;
using SevDesk.Api.V2.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.CheckAccountTransaction
{
    /// <summary>
    /// Builds and executes requests for operations under \CheckAccountTransaction
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class CheckAccountTransactionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the sevDesk.Api.V2.CheckAccountTransaction.item collection</summary>
        /// <param name="position">ID of check account transaction</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder"/></returns>
        public global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("checkAccountTransactionId", position);
                return new global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.CheckAccountTransaction.item collection</summary>
        /// <param name="position">ID of check account transaction</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("checkAccountTransactionId", position);
                return new global::SevDesk.Api.V2.CheckAccountTransaction.Item.WithCheckAccountTransactionItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CheckAccountTransactionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CheckAccountTransaction{?checkAccount%5Bid%5D,checkAccount%5BobjectName%5D,endDate,isBooked,onlyCredit,onlyDebit,payeePayerName,paymtPurpose,startDate}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CheckAccountTransactionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/CheckAccountTransaction{?checkAccount%5Bid%5D,checkAccount%5BobjectName%5D,endDate,isBooked,onlyCredit,onlyDebit,payeePayerName,paymtPurpose,startDate}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve all transactions depending on the filters defined in the query.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionGetResponse?> GetAsCheckAccountTransactionGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionGetResponse> GetAsCheckAccountTransactionGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionGetResponse>(requestInfo, global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all transactions depending on the filters defined in the query.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCheckAccountTransactionGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionResponse>(requestInfo, global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new transaction on a check account.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionResponse"/></returns>
        /// <param name="body">CheckAccountTransaction model. Responsible for the transactions on payment accounts.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionResponse?> PostAsync(global::SevDesk.Api.V2.Models.Model_CheckAccountTransaction body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionResponse> PostAsync(global::SevDesk.Api.V2.Models.Model_CheckAccountTransaction body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionResponse>(requestInfo, global::SevDesk.Api.V2.Models.Model_CheckAccountTransactionResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all transactions depending on the filters defined in the query.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new transaction on a check account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">CheckAccountTransaction model. Responsible for the transactions on payment accounts.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_CheckAccountTransaction body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::SevDesk.Api.V2.Models.Model_CheckAccountTransaction body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve all transactions depending on the filters defined in the query.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CheckAccountTransactionRequestBuilderGetQueryParameters 
        {
            /// <summary>Retrieve all transactions on this check account. Must be provided with checkAccount[objectName]</summary>
            [QueryParameter("checkAccount%5Bid%5D")]
            public int? CheckAccountid { get; set; }
            /// <summary>Only required if checkAccount[id] was provided. &apos;CheckAccount&apos; should be used as value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("checkAccount%5BobjectName%5D")]
            public string? CheckAccountobjectName { get; set; }
#nullable restore
#else
            [QueryParameter("checkAccount%5BobjectName%5D")]
            public string CheckAccountobjectName { get; set; }
#endif
            /// <summary>Only retrieve transactions up to this date</summary>
            [QueryParameter("endDate")]
            public DateTimeOffset? EndDate { get; set; }
            /// <summary>Only retrieve booked transactions</summary>
            [QueryParameter("isBooked")]
            public bool? IsBooked { get; set; }
            /// <summary>Only retrieve credit transactions</summary>
            [QueryParameter("onlyCredit")]
            public bool? OnlyCredit { get; set; }
            /// <summary>Only retrieve debit transactions</summary>
            [QueryParameter("onlyDebit")]
            public bool? OnlyDebit { get; set; }
            /// <summary>Only retrieve transactions with this payee / payer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("payeePayerName")]
            public string? PayeePayerName { get; set; }
#nullable restore
#else
            [QueryParameter("payeePayerName")]
            public string PayeePayerName { get; set; }
#endif
            /// <summary>Only retrieve transactions with this payment purpose</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("paymtPurpose")]
            public string? PaymtPurpose { get; set; }
#nullable restore
#else
            [QueryParameter("paymtPurpose")]
            public string PaymtPurpose { get; set; }
#endif
            /// <summary>Only retrieve transactions from this date on</summary>
            [QueryParameter("startDate")]
            public DateTimeOffset? StartDate { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CheckAccountTransactionRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.CheckAccountTransaction.CheckAccountTransactionRequestBuilder.CheckAccountTransactionRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CheckAccountTransactionRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
