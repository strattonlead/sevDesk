// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SevDesk.Api.V2.Tag.Factory;
using SevDesk.Api.V2.Tag.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.Tag
{
    /// <summary>
    /// Builds and executes requests for operations under \Tag
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class TagRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The Factory property</summary>
        public global::SevDesk.Api.V2.Tag.Factory.FactoryRequestBuilder Factory
        {
            get => new global::SevDesk.Api.V2.Tag.Factory.FactoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.Tag.item collection</summary>
        /// <param name="position">ID of tag to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder"/></returns>
        public global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tagId", position);
                return new global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the sevDesk.Api.V2.Tag.item collection</summary>
        /// <param name="position">ID of tag to return</param>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("tagId", position);
                return new global::SevDesk.Api.V2.Tag.Item.WithTagItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Tag.TagRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TagRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Tag{?id*,name*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Tag.TagRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TagRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Tag{?id*,name*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve all tags
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Tag.TagGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Tag.TagGetResponse?> GetAsTagGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Tag.TagGetResponse> GetAsTagGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Tag.TagGetResponse>(requestInfo, global::SevDesk.Api.V2.Tag.TagGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all tags
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Tag.TagResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsTagGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Tag.TagResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Tag.TagResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Tag.TagResponse>(requestInfo, global::SevDesk.Api.V2.Tag.TagResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve all tags
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Tag.TagRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.Tag.TagRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.Tag.TagRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve all tags
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class TagRequestBuilderGetQueryParameters 
        {
            /// <summary>ID of the Tag</summary>
            [QueryParameter("id")]
            public double? Id { get; set; }
            /// <summary>Name of the Tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class TagRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.Tag.TagRequestBuilder.TagRequestBuilderGetQueryParameters>
        {
        }
    }
}
