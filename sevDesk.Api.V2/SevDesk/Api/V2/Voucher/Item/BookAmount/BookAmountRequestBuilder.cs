// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.Voucher.Item.BookAmount
{
    /// <summary>
    /// Builds and executes requests for operations under \Voucher\{voucherId}\bookAmount
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class BookAmountRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BookAmountRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Voucher/{voucherId}/bookAmount", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BookAmountRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Voucher/{voucherId}/bookAmount", rawUrl)
        {
        }
        /// <summary>
        /// Booking the voucher with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking a voucher, all by using the same endpoint.&lt;br&gt; Conveniently, the booking process is exactly the same as the process for invoices.&lt;br&gt; For this reason, you can have a look at it &lt;a href=&apos;#tag/Voucher/How-to-filter-for-certain-vouchers&apos;&gt;here&lt;/a&gt; and all you need to to is to change &quot;Invoice&quot; into &quot;Voucher&quot; in the URL.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutResponse?> PutAsBookAmountPutResponseAsync(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutResponse> PutAsBookAmountPutResponseAsync(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutResponse>(requestInfo, global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Booking the voucher with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking a voucher, all by using the same endpoint.&lt;br&gt; Conveniently, the booking process is exactly the same as the process for invoices.&lt;br&gt; For this reason, you can have a look at it &lt;a href=&apos;#tag/Voucher/How-to-filter-for-certain-vouchers&apos;&gt;here&lt;/a&gt; and all you need to to is to change &quot;Invoice&quot; into &quot;Voucher&quot; in the URL.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PutAsBookAmountPutResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountResponse?> PutAsync(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountResponse> PutAsync(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountResponse>(requestInfo, global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Booking the voucher with a transaction is probably the most important part in the bookkeeping process.&lt;br&gt; There are several ways on correctly booking a voucher, all by using the same endpoint.&lt;br&gt; Conveniently, the booking process is exactly the same as the process for invoices.&lt;br&gt; For this reason, you can have a look at it &lt;a href=&apos;#tag/Voucher/How-to-filter-for-certain-vouchers&apos;&gt;here&lt;/a&gt; and all you need to to is to change &quot;Invoice&quot; into &quot;Voucher&quot; in the URL.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.Voucher.Item.BookAmount.BookAmountRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class BookAmountRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
