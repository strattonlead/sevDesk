// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SevDesk.Api.V2.Order.Item.GetPdf
{
    /// <summary>
    /// Builds and executes requests for operations under \Order\{orderId}\getPdf
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class GetPdfRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GetPdfRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Order/{orderId}/getPdf{?download*,preventSendBy*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GetPdfRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Order/{orderId}/getPdf{?download*,preventSendBy*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves the pdf document of an order with additional metadata and commit the order.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfGetResponse?> GetAsGetPdfGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfGetResponse> GetAsGetPdfGetResponseAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfGetResponse>(requestInfo, global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the pdf document of an order with additional metadata and commit the order.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsGetPdfGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfResponse?> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfResponse> GetAsync(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfResponse>(requestInfo, global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the pdf document of an order with additional metadata and commit the order.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder WithUrl(string rawUrl)
        {
            return new global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the pdf document of an order with additional metadata and commit the order.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class GetPdfRequestBuilderGetQueryParameters 
        {
            /// <summary>If u want to download the pdf of the order.</summary>
            [QueryParameter("download")]
            public bool? Download { get; set; }
            /// <summary>Defines if u want to send the order.</summary>
            [QueryParameter("preventSendBy")]
            public bool? PreventSendBy { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class GetPdfRequestBuilderGetRequestConfiguration : RequestConfiguration<global::SevDesk.Api.V2.Order.Item.GetPdf.GetPdfRequestBuilder.GetPdfRequestBuilderGetQueryParameters>
        {
        }
    }
}
